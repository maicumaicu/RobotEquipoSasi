
Bluepill v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080089d0  080089d0  000189d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a28  08008a28  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08008a28  08008a28  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a28  08008a28  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08008a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c18  200000b0  08008adc  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003cc8  08008adc  00023cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b2b  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a26  00000000  00000000  00030c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199d7  00000000  00000000  00035a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001569a  00000000  00000000  0004f41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d4d  00000000  00000000  00064ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000546c  00000000  00000000  000f8858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080089b4 	.word	0x080089b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	080089b4 	.word	0x080089b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e016      	b.n	8001198 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001170:	3301      	adds	r3, #1
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	429a      	cmp	r2, r3
 8001178:	d20b      	bcs.n	8001192 <GetPage+0x36>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001180:	029b      	lsls	r3, r3, #10
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	d304      	bcc.n	8001192 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	e006      	b.n	80011a0 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b7f      	cmp	r3, #127	; 0x7f
 800119c:	dde5      	ble.n	800116a <GetPage+0xe>
	  }
  }

  return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	4613      	mov	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80011be:	f004 fc7f 	bl	8005ac0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff ffca 	bl	800115c <GetPage>
 80011c8:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80011d6:	69f8      	ldr	r0, [r7, #28]
 80011d8:	f7ff ffc0 	bl	800115c <GetPage>
 80011dc:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <Flash_Write_Data+0xb4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <Flash_Write_Data+0xb4>)
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	0a9b      	lsrs	r3, r3, #10
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <Flash_Write_Data+0xb4>)
 80011f6:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <Flash_Write_Data+0xb4>)
 8001200:	f004 fd50 	bl	8005ca4 <HAL_FLASHEx_Erase>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01f      	beq.n	800124a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800120a:	f004 fc8f 	bl	8005b2c <HAL_FLASH_GetError>
 800120e:	4603      	mov	r3, r0
 8001210:	e022      	b.n	8001258 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	461c      	mov	r4, r3
 8001220:	4615      	mov	r5, r2
 8001222:	4622      	mov	r2, r4
 8001224:	462b      	mov	r3, r5
 8001226:	68f9      	ldr	r1, [r7, #12]
 8001228:	2002      	movs	r0, #2
 800122a:	f004 fbd9 	bl	80059e0 <HAL_FLASH_Program>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d106      	bne.n	8001242 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3304      	adds	r3, #4
 8001238:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	e003      	b.n	800124a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001242:	f004 fc73 	bl	8005b2c <HAL_FLASH_GetError>
 8001246:	4603      	mov	r3, r0
 8001248:	e006      	b.n	8001258 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124e:	429a      	cmp	r2, r3
 8001250:	dbdf      	blt.n	8001212 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001252:	f004 fc5b 	bl	8005b0c <HAL_FLASH_Lock>

	   return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	200000cc 	.word	0x200000cc

08001264 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3304      	adds	r3, #4
 800127e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3304      	adds	r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	80fa      	strh	r2, [r7, #6]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d000      	beq.n	8001292 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001290:	e7ef      	b.n	8001272 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001292:	bf00      	nop
	}
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <Convert_To_Str>:
void Convert_To_Str (uint32_t *Data, char *Buf)
{
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7fe ff51 	bl	8000150 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	089c      	lsrs	r4, r3, #2
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7fe ff4c 	bl	8000150 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4423      	add	r3, r4
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	e01b      	b.n	800130c <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da00      	bge.n	80012dc <Convert_To_Str+0x3e>
 80012da:	3303      	adds	r3, #3
 80012dc:	109b      	asrs	r3, r3, #2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4259      	negs	r1, r3
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	f001 0103 	and.w	r1, r1, #3
 80012f2:	bf58      	it	pl
 80012f4:	424b      	negpl	r3, r1
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	fa22 f103 	lsr.w	r1, r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbdf      	blt.n	80012d4 <Convert_To_Str+0x36>
	}
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
	...

08001320 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001324:	f003 fc18 	bl	8004b58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001328:	f000 f892 	bl	8001450 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800132c:	f000 fadc 	bl	80018e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001330:	f000 fabc 	bl	80018ac <MX_DMA_Init>
	MX_ADC1_Init();
 8001334:	f000 f8e8 	bl	8001508 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001338:	f000 f97e 	bl	8001638 <MX_TIM1_Init>
	MX_TIM3_Init();
 800133c:	f000 f9d4 	bl	80016e8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001340:	f000 fa26 	bl	8001790 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8001344:	f000 fa88 	bl	8001858 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001348:	f000 f948 	bl	80015dc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <main+0x104>)
 800134e:	4a36      	ldr	r2, [pc, #216]	; (8001428 <main+0x108>)
 8001350:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <main+0x104>)
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 800135a:	4b32      	ldr	r3, [pc, #200]	; (8001424 <main+0x104>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <main+0x104>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <main+0x104>)
 8001368:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <main+0x108>)
 800136a:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <main+0x104>)
 800136e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001372:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <main+0x104>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <main+0x104>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <main+0x104>)
 8001382:	4a29      	ldr	r2, [pc, #164]	; (8001428 <main+0x108>)
 8001384:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <main+0x104>)
 8001388:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138c:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <main+0x104>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <main+0x104>)
 8001396:	2200      	movs	r2, #0
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800139a:	2108      	movs	r1, #8
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <main+0x10c>)
 800139e:	f005 fd41 	bl	8006e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013a2:	210c      	movs	r1, #12
 80013a4:	4821      	ldr	r0, [pc, #132]	; (800142c <main+0x10c>)
 80013a6:	f005 fd3d 	bl	8006e24 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013aa:	213c      	movs	r1, #60	; 0x3c
 80013ac:	4820      	ldr	r0, [pc, #128]	; (8001430 <main+0x110>)
 80013ae:	f005 fe7d 	bl	80070ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013b2:	213c      	movs	r1, #60	; 0x3c
 80013b4:	481f      	ldr	r0, [pc, #124]	; (8001434 <main+0x114>)
 80013b6:	f005 fe79 	bl	80070ac <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2108      	movs	r1, #8
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <main+0x108>)
 80013c0:	f004 feb3 	bl	800612a <HAL_GPIO_WritePin>
	TIM4->CCR3 = 15000;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <main+0x118>)
 80013c6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 15000;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <main+0x118>)
 80013ce:	f643 2298 	movw	r2, #15000	; 0x3a98
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
	xSpeed = 15000;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <main+0x11c>)
 80013d6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80013da:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80013dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e0:	4917      	ldr	r1, [pc, #92]	; (8001440 <main+0x120>)
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <main+0x124>)
 80013e4:	f003 fd16 	bl	8004e14 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <main+0x108>)
 80013f0:	f004 fe9b 	bl	800612a <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <main+0x128>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CNT = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <main+0x12c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <main+0x108>)
 8001408:	f004 fe8f 	bl	800612a <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		mainMachine();
 800140c:	f000 fcbc 	bl	8001d88 <mainMachine>
		 ticksNow = HAL_GetTick();
		 }*/
		//intUartSend(TIM1->CNT);
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);*/
		btnMachine(0);
 8001410:	2000      	movs	r0, #0
 8001412:	f002 ff17 	bl	8004244 <btnMachine>
		btnMachine(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f002 ff14 	bl	8004244 <btnMachine>
		btnMachine(2);
 800141c:	2002      	movs	r0, #2
 800141e:	f002 ff11 	bl	8004244 <btnMachine>
		mainMachine();
 8001422:	e7f3      	b.n	800140c <main+0xec>
 8001424:	2000233c 	.word	0x2000233c
 8001428:	40010c00 	.word	0x40010c00
 800142c:	20000234 	.word	0x20000234
 8001430:	200001a4 	.word	0x200001a4
 8001434:	200001ec 	.word	0x200001ec
 8001438:	40000800 	.word	0x40000800
 800143c:	20003c9c 	.word	0x20003c9c
 8001440:	200002c0 	.word	0x200002c0
 8001444:	200000dc 	.word	0x200000dc
 8001448:	40000400 	.word	0x40000400
 800144c:	40012c00 	.word	0x40012c00

08001450 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145a:	2228      	movs	r2, #40	; 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f006 fbbe 	bl	8007be0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800149c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 ff9c 	bl	80063e4 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x66>
		Error_Handler();
 80014b2:	f002 ff81 	bl	80043b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014b6:	230f      	movs	r3, #15
 80014b8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fa08 	bl	80068e8 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x92>
		Error_Handler();
 80014de:	f002 ff6b 	bl	80043b8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e2:	2302      	movs	r3, #2
 80014e4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ea:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fb92 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xae>
		Error_Handler();
 80014fa:	f002 ff5d 	bl	80043b8 <Error_Handler>
	}
}
 80014fe:	bf00      	nop
 8001500:	3750      	adds	r7, #80	; 0x50
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_ADC1_Init+0xcc>)
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <MX_ADC1_Init+0xd0>)
 800151c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001524:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001528:	2201      	movs	r2, #1
 800152a:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <MX_ADC1_Init+0xcc>)
 800152e:	2200      	movs	r2, #0
 8001530:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001534:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001538:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_ADC1_Init+0xcc>)
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001542:	2204      	movs	r2, #4
 8001544:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001548:	f003 fb8c 	bl	8004c64 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x4e>
		Error_Handler();
 8001552:	f002 ff31 	bl	80043b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800155a:	2301      	movs	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001568:	f003 fd44 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001572:	f002 ff21 	bl	80043b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001576:	2301      	movs	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800157a:	2302      	movs	r3, #2
 800157c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_ADC1_Init+0xcc>)
 8001584:	f003 fd36 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC1_Init+0x8a>
		Error_Handler();
 800158e:	f002 ff13 	bl	80043b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001592:	2302      	movs	r3, #2
 8001594:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001596:	2303      	movs	r3, #3
 8001598:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_ADC1_Init+0xcc>)
 80015a0:	f003 fd28 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0xa6>
		Error_Handler();
 80015aa:	f002 ff05 	bl	80043b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80015ae:	2303      	movs	r3, #3
 80015b0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80015b2:	2304      	movs	r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_ADC1_Init+0xcc>)
 80015bc:	f003 fd1a 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC1_Init+0xc2>
		Error_Handler();
 80015c6:	f002 fef7 	bl	80043b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000dc 	.word	0x200000dc
 80015d8:	40012400 	.word	0x40012400

080015dc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_I2C1_Init+0x50>)
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <MX_I2C1_Init+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_I2C1_Init+0x50>)
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_I2C1_Init+0x58>)
 80015ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_I2C1_Init+0x50>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_I2C1_Init+0x50>)
 800161a:	f004 fd9f 	bl	800615c <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001624:	f002 fec8 	bl	80043b8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000150 	.word	0x20000150
 8001630:	40005400 	.word	0x40005400
 8001634:	000186a0 	.word	0x000186a0

08001638 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2224      	movs	r2, #36	; 0x24
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f006 faca 	bl	8007be0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_TIM1_Init+0xa8>)
 8001656:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <MX_TIM1_Init+0xac>)
 8001658:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <MX_TIM1_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_TIM1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <MX_TIM1_Init+0xa8>)
 8001668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_TIM1_Init+0xa8>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_TIM1_Init+0xa8>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_TIM1_Init+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001680:	2303      	movs	r3, #3
 8001682:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001690:	230a      	movs	r3, #10
 8001692:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001698:	2301      	movs	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_TIM1_Init+0xa8>)
 80016ac:	f005 fc5c 	bl	8006f68 <HAL_TIM_Encoder_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x82>
		Error_Handler();
 80016b6:	f002 fe7f 	bl	80043b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <MX_TIM1_Init+0xa8>)
 80016c8:	f006 f84a 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80016d2:	f002 fe71 	bl	80043b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	; 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001a4 	.word	0x200001a4
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fa72 	bl	8007be0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_TIM3_Init+0xa4>)
 8001708:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_TIM3_Init+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800172a:	2303      	movs	r3, #3
 800172c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800173a:	230a      	movs	r3, #10
 800173c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001756:	f005 fc07 	bl	8006f68 <HAL_TIM_Encoder_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001760:	f002 fe2a 	bl	80043b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_TIM3_Init+0xa0>)
 8001772:	f005 fff5 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 800177c:	f002 fe1c 	bl	80043b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200001ec 	.word	0x200001ec
 800178c:	40000400 	.word	0x40000400

08001790 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <MX_TIM4_Init+0xc4>)
 80017b6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80017d8:	481d      	ldr	r0, [pc, #116]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017da:	f005 fad3 	bl	8006d84 <HAL_TIM_PWM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM4_Init+0x58>
		Error_Handler();
 80017e4:	f002 fde8 	bl	80043b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	4619      	mov	r1, r3
 80017f6:	4816      	ldr	r0, [pc, #88]	; (8001850 <MX_TIM4_Init+0xc0>)
 80017f8:	f005 ffb2 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM4_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001802:	f002 fdd9 	bl	80043b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2360      	movs	r3, #96	; 0x60
 8001808:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2208      	movs	r2, #8
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_TIM4_Init+0xc0>)
 800181e:	f005 fcd3 	bl	80071c8 <HAL_TIM_PWM_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001828:	f002 fdc6 	bl	80043b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	220c      	movs	r2, #12
 8001830:	4619      	mov	r1, r3
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM4_Init+0xc0>)
 8001834:	f005 fcc8 	bl	80071c8 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM4_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800183e:	f002 fdbb 	bl	80043b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM4_Init+0xc0>)
 8001844:	f003 f8b0 	bl	80049a8 <HAL_TIM_MspPostInit>

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000234 	.word	0x20000234
 8001854:	40000800 	.word	0x40000800

08001858 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <MX_USART3_UART_Init+0x50>)
 8001860:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001864:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001868:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_USART3_UART_Init+0x4c>)
 8001890:	f005 ffc4 	bl	800781c <HAL_UART_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800189a:	f002 fd8d 	bl	80043b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000027c 	.word	0x2000027c
 80018a8:	40004800 	.word	0x40004800

080018ac <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_DMA_Init+0x38>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <MX_DMA_Init+0x38>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_DMA_Init+0x38>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200b      	movs	r0, #11
 80018d0:	f003 fe61 	bl	8005596 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018d4:	200b      	movs	r0, #11
 80018d6:	f003 fe7a 	bl	80055ce <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <MX_GPIO_Init+0x114>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <MX_GPIO_Init+0x114>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <MX_GPIO_Init+0x114>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <MX_GPIO_Init+0x114>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <MX_GPIO_Init+0x114>)
 800191a:	f043 0320 	orr.w	r3, r3, #32
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <MX_GPIO_Init+0x114>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <MX_GPIO_Init+0x114>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a32      	ldr	r2, [pc, #200]	; (80019fc <MX_GPIO_Init+0x114>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <MX_GPIO_Init+0x114>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_GPIO_Init+0x114>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <MX_GPIO_Init+0x114>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_GPIO_Init+0x114>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001962:	4827      	ldr	r0, [pc, #156]	; (8001a00 <MX_GPIO_Init+0x118>)
 8001964:	f004 fbe1 	bl	800612a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_Pin | STBY_Pin | AIN1_Pin | AIN2_Pin,
 8001968:	2200      	movs	r2, #0
 800196a:	f248 0138 	movw	r1, #32824	; 0x8038
 800196e:	4825      	ldr	r0, [pc, #148]	; (8001a04 <MX_GPIO_Init+0x11c>)
 8001970:	f004 fbdb 	bl	800612a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin | BIN1_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800197a:	4823      	ldr	r0, [pc, #140]	; (8001a08 <MX_GPIO_Init+0x120>)
 800197c:	f004 fbd5 	bl	800612a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001984:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2302      	movs	r3, #2
 8001990:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	4619      	mov	r1, r3
 8001998:	4819      	ldr	r0, [pc, #100]	; (8001a00 <MX_GPIO_Init+0x118>)
 800199a:	f004 fa2b 	bl	8005df4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 800199e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	4619      	mov	r1, r3
 80019b2:	4814      	ldr	r0, [pc, #80]	; (8001a04 <MX_GPIO_Init+0x11c>)
 80019b4:	f004 fa1e 	bl	8005df4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_Pin STBY_Pin AIN1_Pin AIN2_Pin */
	GPIO_InitStruct.Pin = LED_Pin | STBY_Pin | AIN1_Pin | AIN2_Pin;
 80019b8:	f248 0338 	movw	r3, #32824	; 0x8038
 80019bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	4619      	mov	r1, r3
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <MX_GPIO_Init+0x11c>)
 80019d2:	f004 fa0f 	bl	8005df4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BIN2_Pin BIN1_Pin */
	GPIO_InitStruct.Pin = BIN2_Pin | BIN1_Pin;
 80019d6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80019da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <MX_GPIO_Init+0x120>)
 80019f0:	f004 fa00 	bl	8005df4 <HAL_GPIO_Init>

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40011000 	.word	0x40011000
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	00000000 	.word	0x00000000

08001a10 <intUartSend>:

/* USER CODE BEGIN 4 */

void intUartSend(float entero) {
 8001a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	int d;
	int u;
	int de1;
	int de2;

	m = abs(entero / 1000);
 8001a1a:	497d      	ldr	r1, [pc, #500]	; (8001c10 <intUartSend+0x200>)
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fa65 	bl	8000eec <__aeabi_fdiv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb73 	bl	8001110 <__aeabi_f2iz>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bfb8      	it	lt
 8001a30:	425b      	neglt	r3, r3
 8001a32:	61fb      	str	r3, [r7, #28]
	c = abs(entero / 100) - m * 10;
 8001a34:	4977      	ldr	r1, [pc, #476]	; (8001c14 <intUartSend+0x204>)
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fa58 	bl	8000eec <__aeabi_fdiv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb66 	bl	8001110 <__aeabi_f2iz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a4a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f06f 0109 	mvn.w	r1, #9
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
	d = abs(entero / 10) - (m * 100 + c * 10);
 8001a5c:	496e      	ldr	r1, [pc, #440]	; (8001c18 <intUartSend+0x208>)
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fa44 	bl	8000eec <__aeabi_fdiv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fb52 	bl	8001110 <__aeabi_f2iz>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001a72:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	fb02 f003 	mul.w	r0, r2, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4403      	add	r3, r0
 8001a8a:	1acb      	subs	r3, r1, r3
 8001a8c:	617b      	str	r3, [r7, #20]
	u = abs(entero) - (m * 1000 + c * 100 + d * 10);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fb3e 	bl	8001110 <__aeabi_f2iz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001a9a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aa4:	fb03 f202 	mul.w	r2, r3, r2
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2064      	movs	r0, #100	; 0x64
 8001aac:	fb00 f303 	mul.w	r3, r0, r3
 8001ab0:	18d0      	adds	r0, r2, r3
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4403      	add	r3, r0
 8001abe:	1acb      	subs	r3, r1, r3
 8001ac0:	613b      	str	r3, [r7, #16]
	if (entero > 0) {
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fb18 	bl	80010fc <__aeabi_fcmpgt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80aa 	beq.w	8001c28 <intUartSend+0x218>
		de1 = (entero - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ada:	fb03 f202 	mul.w	r2, r3, r2
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2164      	movs	r1, #100	; 0x64
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	18d1      	adds	r1, r2, r3
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	18ca      	adds	r2, r1, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f8ef 	bl	8000cdc <__aeabi_i2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff f834 	bl	8000b70 <__aeabi_fsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4943      	ldr	r1, [pc, #268]	; (8001c18 <intUartSend+0x208>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f939 	bl	8000d84 <__aeabi_fmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fafb 	bl	8001110 <__aeabi_f2iz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60fb      	str	r3, [r7, #12]
		de2 = (entero - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1)) * 100;
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fc82 	bl	8000428 <__aeabi_f2d>
 8001b24:	4604      	mov	r4, r0
 8001b26:	460d      	mov	r5, r1
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2164      	movs	r1, #100	; 0x64
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	18d1      	adds	r1, r2, r3
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	18ca      	adds	r2, r1, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fc59 	bl	8000404 <__aeabi_i2d>
 8001b52:	4680      	mov	r8, r0
 8001b54:	4689      	mov	r9, r1
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7fe fc54 	bl	8000404 <__aeabi_i2d>
 8001b5c:	a32a      	add	r3, pc, #168	; (adr r3, 8001c08 <intUartSend+0x1f8>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fcb9 	bl	80004d8 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	f7fe fafd 	bl	800016c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe faf5 	bl	8000168 <__aeabi_dsub>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <intUartSend+0x20c>)
 8001b8c:	f7fe fca4 	bl	80004d8 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe ff4e 	bl	8000a38 <__aeabi_d2iz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = m + '0';
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3330      	adds	r3, #48	; 0x30
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <intUartSend+0x210>)
 8001baa:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = c + '0';
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3330      	adds	r3, #48	; 0x30
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <intUartSend+0x210>)
 8001bb6:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = d + '0';
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3330      	adds	r3, #48	; 0x30
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <intUartSend+0x210>)
 8001bc2:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = u + '0';
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3330      	adds	r3, #48	; 0x30
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <intUartSend+0x210>)
 8001bce:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = ',';
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <intUartSend+0x210>)
 8001bd2:	222c      	movs	r2, #44	; 0x2c
 8001bd4:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = de1 + '0';
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3330      	adds	r3, #48	; 0x30
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <intUartSend+0x210>)
 8001be0:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de2 + '0';
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3330      	adds	r3, #48	; 0x30
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <intUartSend+0x210>)
 8001bec:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = '\n';
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <intUartSend+0x210>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	4909      	ldr	r1, [pc, #36]	; (8001c20 <intUartSend+0x210>)
 8001bfa:	480a      	ldr	r0, [pc, #40]	; (8001c24 <intUartSend+0x214>)
 8001bfc:	f005 fe5b 	bl	80078b6 <HAL_UART_Transmit>
	 TX_BUFFER[4] = ',';
	 TX_BUFFER[5] = de1 + '0';
	 TX_BUFFER[6] = de2 + '0';
	 TX_BUFFER[7] = '\n';
	 HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);*/
}
 8001c00:	e0b1      	b.n	8001d66 <intUartSend+0x356>
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	9999999a 	.word	0x9999999a
 8001c0c:	3fb99999 	.word	0x3fb99999
 8001c10:	447a0000 	.word	0x447a0000
 8001c14:	42c80000 	.word	0x42c80000
 8001c18:	41200000 	.word	0x41200000
 8001c1c:	40590000 	.word	0x40590000
 8001c20:	20002300 	.word	0x20002300
 8001c24:	2000027c 	.word	0x2000027c
		de1 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c34:	fb03 f202 	mul.w	r2, r3, r2
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2164      	movs	r1, #100	; 0x64
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	18d1      	adds	r1, r2, r3
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	18ca      	adds	r2, r1, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f842 	bl	8000cdc <__aeabi_i2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7fe ff87 	bl	8000b70 <__aeabi_fsub>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4944      	ldr	r1, [pc, #272]	; (8001d78 <intUartSend+0x368>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f88c 	bl	8000d84 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa4e 	bl	8001110 <__aeabi_f2iz>
 8001c74:	4603      	mov	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fbd2 	bl	8000428 <__aeabi_f2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c8e:	fb03 f202 	mul.w	r2, r3, r2
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2164      	movs	r1, #100	; 0x64
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	18d1      	adds	r1, r2, r3
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	18ca      	adds	r2, r1, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fba9 	bl	8000404 <__aeabi_i2d>
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4689      	mov	r9, r1
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7fe fba4 	bl	8000404 <__aeabi_i2d>
 8001cbc:	a32c      	add	r3, pc, #176	; (adr r3, 8001d70 <intUartSend+0x360>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fc09 	bl	80004d8 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4640      	mov	r0, r8
 8001ccc:	4649      	mov	r1, r9
 8001cce:	f7fe fa4d 	bl	800016c <__adddf3>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fa45 	bl	8000168 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
				* 100;
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <intUartSend+0x36c>)
 8001cec:	f7fe fbf4 	bl	80004d8 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe fe9e 	bl	8000a38 <__aeabi_d2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = '-';
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <intUartSend+0x370>)
 8001d02:	222d      	movs	r2, #45	; 0x2d
 8001d04:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = m + '0';
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3330      	adds	r3, #48	; 0x30
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <intUartSend+0x370>)
 8001d10:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = c + '0';
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3330      	adds	r3, #48	; 0x30
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <intUartSend+0x370>)
 8001d1c:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = d + '0';
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3330      	adds	r3, #48	; 0x30
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <intUartSend+0x370>)
 8001d28:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = u + '0';
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <intUartSend+0x370>)
 8001d34:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = ',';
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <intUartSend+0x370>)
 8001d38:	222c      	movs	r2, #44	; 0x2c
 8001d3a:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de1 + '0';
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3330      	adds	r3, #48	; 0x30
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <intUartSend+0x370>)
 8001d46:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = de2 + '0';
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3330      	adds	r3, #48	; 0x30
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <intUartSend+0x370>)
 8001d52:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <intUartSend+0x370>)
 8001d56:	220a      	movs	r2, #10
 8001d58:	721a      	strb	r2, [r3, #8]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 9, 100);
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	2209      	movs	r2, #9
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <intUartSend+0x370>)
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <intUartSend+0x374>)
 8001d62:	f005 fda8 	bl	80078b6 <HAL_UART_Transmit>
}
 8001d66:	bf00      	nop
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	3fb99999 	.word	0x3fb99999
 8001d78:	41200000 	.word	0x41200000
 8001d7c:	40590000 	.word	0x40590000
 8001d80:	20002300 	.word	0x20002300
 8001d84:	2000027c 	.word	0x2000027c

08001d88 <mainMachine>:

void mainMachine() {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001d8c:	4ba1      	ldr	r3, [pc, #644]	; (8002014 <mainMachine+0x28c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	f200 8170 	bhi.w	8002076 <mainMachine+0x2ee>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <mainMachine+0x14>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001db1 	.word	0x08001db1
 8001da0:	08001ef5 	.word	0x08001ef5
 8001da4:	08001f6d 	.word	0x08001f6d
 8001da8:	0800200b 	.word	0x0800200b
 8001dac:	08001eef 	.word	0x08001eef
	case SETUP:
		actual.x = ALTO;
 8001db0:	4b99      	ldr	r3, [pc, #612]	; (8002018 <mainMachine+0x290>)
 8001db2:	2208      	movs	r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 8001db6:	4b98      	ldr	r3, [pc, #608]	; (8002018 <mainMachine+0x290>)
 8001db8:	2208      	movs	r2, #8
 8001dba:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis();
 8001dbc:	f001 ffce 	bl	8003d5c <resetAxis>
		movimientoFlag = 0;
 8001dc0:	4b96      	ldr	r3, [pc, #600]	; (800201c <mainMachine+0x294>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 8001dc6:	4b96      	ldr	r3, [pc, #600]	; (8002020 <mainMachine+0x298>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
		/*if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		 } else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		 }*/
		if (btns[0].flag == 1) {
 8001dcc:	4b95      	ldr	r3, [pc, #596]	; (8002024 <mainMachine+0x29c>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d12e      	bne.n	8001e32 <mainMachine+0xaa>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dda:	4893      	ldr	r0, [pc, #588]	; (8002028 <mainMachine+0x2a0>)
 8001ddc:	f004 f9a5 	bl	800612a <HAL_GPIO_WritePin>
			choice = SLOW;
 8001de0:	4b92      	ldr	r3, [pc, #584]	; (800202c <mainMachine+0x2a4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001de6:	4b92      	ldr	r3, [pc, #584]	; (8002030 <mainMachine+0x2a8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a92      	ldr	r2, [pc, #584]	; (8002034 <mainMachine+0x2ac>)
 8001dec:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001dee:	4b92      	ldr	r3, [pc, #584]	; (8002038 <mainMachine+0x2b0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001df8:	4b8f      	ldr	r3, [pc, #572]	; (8002038 <mainMachine+0x2b0>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[SLOW];
 8001e02:	4b8e      	ldr	r3, [pc, #568]	; (800203c <mainMachine+0x2b4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <mainMachine+0x2b8>)
 8001e08:	6013      	str	r3, [r2, #0]
			KD = KDchoice[SLOW];
 8001e0a:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <mainMachine+0x2bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8e      	ldr	r2, [pc, #568]	; (8002048 <mainMachine+0x2c0>)
 8001e10:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001e12:	4b8e      	ldr	r3, [pc, #568]	; (800204c <mainMachine+0x2c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <mainMachine+0xa4>
				mainState = CALIBRATE;
 8001e1a:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <mainMachine+0x28c>)
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
				t++;
 8001e20:	4b8a      	ldr	r3, [pc, #552]	; (800204c <mainMachine+0x2c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a89      	ldr	r2, [pc, #548]	; (800204c <mainMachine+0x2c4>)
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e002      	b.n	8001e32 <mainMachine+0xaa>
			} else {
				mainState = MAPPING;
 8001e2c:	4b79      	ldr	r3, [pc, #484]	; (8002014 <mainMachine+0x28c>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 8001e32:	4b7c      	ldr	r3, [pc, #496]	; (8002024 <mainMachine+0x29c>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d124      	bne.n	8001e84 <mainMachine+0xfc>
			// Set The LED ON!
			choice = FAST;
 8001e3a:	4b7c      	ldr	r3, [pc, #496]	; (800202c <mainMachine+0x2a4>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001e40:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <mainMachine+0x2a8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a7b      	ldr	r2, [pc, #492]	; (8002034 <mainMachine+0x2ac>)
 8001e46:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001e48:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <mainMachine+0x2b0>)
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001e52:	4b79      	ldr	r3, [pc, #484]	; (8002038 <mainMachine+0x2b0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 8001e5c:	4b77      	ldr	r3, [pc, #476]	; (800203c <mainMachine+0x2b4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a77      	ldr	r2, [pc, #476]	; (8002040 <mainMachine+0x2b8>)
 8001e62:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 8001e64:	4b77      	ldr	r3, [pc, #476]	; (8002044 <mainMachine+0x2bc>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a77      	ldr	r2, [pc, #476]	; (8002048 <mainMachine+0x2c0>)
 8001e6a:	6013      	str	r3, [r2, #0]
			mainState = RACING;
 8001e6c:	4b69      	ldr	r3, [pc, #420]	; (8002014 <mainMachine+0x28c>)
 8001e6e:	2203      	movs	r2, #3
 8001e70:	601a      	str	r2, [r3, #0]
			Flash_Read_Data(0x0801FC00, Rx_Data, 2);
 8001e72:	2202      	movs	r2, #2
 8001e74:	4976      	ldr	r1, [pc, #472]	; (8002050 <mainMachine+0x2c8>)
 8001e76:	4877      	ldr	r0, [pc, #476]	; (8002054 <mainMachine+0x2cc>)
 8001e78:	f7ff f9f4 	bl	8001264 <Flash_Read_Data>
			Convert_To_Str(Rx_Data, string);
 8001e7c:	4976      	ldr	r1, [pc, #472]	; (8002058 <mainMachine+0x2d0>)
 8001e7e:	4874      	ldr	r0, [pc, #464]	; (8002050 <mainMachine+0x2c8>)
 8001e80:	f7ff fa0d 	bl	800129e <Convert_To_Str>
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 8001e84:	4b67      	ldr	r3, [pc, #412]	; (8002024 <mainMachine+0x29c>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 80f3 	bne.w	8002074 <mainMachine+0x2ec>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e94:	4871      	ldr	r0, [pc, #452]	; (800205c <mainMachine+0x2d4>)
 8001e96:	f004 f948 	bl	800612a <HAL_GPIO_WritePin>
			choice = FAST;
 8001e9a:	4b64      	ldr	r3, [pc, #400]	; (800202c <mainMachine+0x2a4>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001ea0:	4b63      	ldr	r3, [pc, #396]	; (8002030 <mainMachine+0x2a8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <mainMachine+0x2ac>)
 8001ea6:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001ea8:	4b63      	ldr	r3, [pc, #396]	; (8002038 <mainMachine+0x2b0>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <mainMachine+0x2b0>)
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
			KP = KPchoice[FAST];
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	; (800203c <mainMachine+0x2b4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <mainMachine+0x2b8>)
 8001ec2:	6013      	str	r3, [r2, #0]
			KD = KDchoice[FAST];
 8001ec4:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <mainMachine+0x2bc>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <mainMachine+0x2c0>)
 8001eca:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	; (800204c <mainMachine+0x2c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d108      	bne.n	8001ee6 <mainMachine+0x15e>
				mainState = CALIBRATE;
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <mainMachine+0x28c>)
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	601a      	str	r2, [r3, #0]
				t++;
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <mainMachine+0x2c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	4a5a      	ldr	r2, [pc, #360]	; (800204c <mainMachine+0x2c4>)
 8001ee2:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 8001ee4:	e0c6      	b.n	8002074 <mainMachine+0x2ec>
				mainState = MAPPING;
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <mainMachine+0x28c>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
		break;
 8001eec:	e0c2      	b.n	8002074 <mainMachine+0x2ec>
	case CALIBRATE:
		calibrateMachine();
 8001eee:	f000 f8c5 	bl	800207c <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 8001ef2:	e0c0      	b.n	8002076 <mainMachine+0x2ee>
	case MAPPING:
		if (finishFlag == 0) {
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <mainMachine+0x298>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <mainMachine+0x17a>
			robotMachine();
 8001efc:	f000 f9ba 	bl	8002274 <robotMachine>
			finishFlag = 0;
			resetAxis();
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001f00:	e0b9      	b.n	8002076 <mainMachine+0x2ee>
			TX_BUFFER[0] = 'X';
 8001f02:	4b57      	ldr	r3, [pc, #348]	; (8002060 <mainMachine+0x2d8>)
 8001f04:	2258      	movs	r2, #88	; 0x58
 8001f06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001f08:	2364      	movs	r3, #100	; 0x64
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4954      	ldr	r1, [pc, #336]	; (8002060 <mainMachine+0x2d8>)
 8001f0e:	4855      	ldr	r0, [pc, #340]	; (8002064 <mainMachine+0x2dc>)
 8001f10:	f005 fcd1 	bl	80078b6 <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <mainMachine+0x290>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fedf 	bl	8000cdc <__aeabi_i2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fd75 	bl	8001a10 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001f26:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <mainMachine+0x2d8>)
 8001f28:	2259      	movs	r2, #89	; 0x59
 8001f2a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001f2c:	2364      	movs	r3, #100	; 0x64
 8001f2e:	2201      	movs	r2, #1
 8001f30:	494b      	ldr	r1, [pc, #300]	; (8002060 <mainMachine+0x2d8>)
 8001f32:	484c      	ldr	r0, [pc, #304]	; (8002064 <mainMachine+0x2dc>)
 8001f34:	f005 fcbf 	bl	80078b6 <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001f38:	4b37      	ldr	r3, [pc, #220]	; (8002018 <mainMachine+0x290>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fecd 	bl	8000cdc <__aeabi_i2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fd63 	bl	8001a10 <intUartSend>
			actual.x = ALTO;
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <mainMachine+0x290>)
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <mainMachine+0x290>)
 8001f52:	2208      	movs	r2, #8
 8001f54:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <mainMachine+0x298>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
			resetAxis();
 8001f5c:	f001 fefe 	bl	8003d5c <resetAxis>
			PrintMap();
 8001f60:	f001 ff16 	bl	8003d90 <PrintMap>
			mainState = RESOLUTION;
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <mainMachine+0x28c>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	601a      	str	r2, [r3, #0]
		break;
 8001f6a:	e084      	b.n	8002076 <mainMachine+0x2ee>
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <mainMachine+0x290>)
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <mainMachine+0x290>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	483c      	ldr	r0, [pc, #240]	; (8002068 <mainMachine+0x2e0>)
 8001f76:	461a      	mov	r2, r3
 8001f78:	0052      	lsls	r2, r2, #1
 8001f7a:	441a      	add	r2, r3
 8001f7c:	00d3      	lsls	r3, r2, #3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	440b      	add	r3, r1
 8001f86:	01db      	lsls	r3, r3, #7
 8001f88:	4413      	add	r3, r2
 8001f8a:	4403      	add	r3, r0
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d12c      	bne.n	8001fee <mainMachine+0x266>
			addDirection(actual.x, actual.y);
 8001f94:	4b20      	ldr	r3, [pc, #128]	; (8002018 <mainMachine+0x290>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <mainMachine+0x290>)
 8001f9a:	6852      	ldr	r2, [r2, #4]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fb3c 	bl	800261c <addDirection>
			TX_BUFFER[0] = 'X';
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <mainMachine+0x2d8>)
 8001fa6:	2258      	movs	r2, #88	; 0x58
 8001fa8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001faa:	2364      	movs	r3, #100	; 0x64
 8001fac:	2201      	movs	r2, #1
 8001fae:	492c      	ldr	r1, [pc, #176]	; (8002060 <mainMachine+0x2d8>)
 8001fb0:	482c      	ldr	r0, [pc, #176]	; (8002064 <mainMachine+0x2dc>)
 8001fb2:	f005 fc80 	bl	80078b6 <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <mainMachine+0x290>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fe8e 	bl	8000cdc <__aeabi_i2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fd24 	bl	8001a10 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <mainMachine+0x2d8>)
 8001fca:	2259      	movs	r2, #89	; 0x59
 8001fcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001fce:	2364      	movs	r3, #100	; 0x64
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4923      	ldr	r1, [pc, #140]	; (8002060 <mainMachine+0x2d8>)
 8001fd4:	4823      	ldr	r0, [pc, #140]	; (8002064 <mainMachine+0x2dc>)
 8001fd6:	f005 fc6e 	bl	80078b6 <HAL_UART_Transmit>
			intUartSend(actual.y);
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <mainMachine+0x290>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe7c 	bl	8000cdc <__aeabi_i2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fd12 	bl	8001a10 <intUartSend>
			directions[directionsSize] = 'o';
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
			mainState = SETUP;
		}

		break;
 8001fec:	e043      	b.n	8002076 <mainMachine+0x2ee>
			directions[directionsSize] = 'o';
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <mainMachine+0x2e4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <mainMachine+0x2e8>)
 8001ff4:	216f      	movs	r1, #111	; 0x6f
 8001ff6:	54d1      	strb	r1, [r2, r3]
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
 8001ff8:	2219      	movs	r2, #25
 8001ffa:	491d      	ldr	r1, [pc, #116]	; (8002070 <mainMachine+0x2e8>)
 8001ffc:	4815      	ldr	r0, [pc, #84]	; (8002054 <mainMachine+0x2cc>)
 8001ffe:	f7ff f8d5 	bl	80011ac <Flash_Write_Data>
			mainState = SETUP;
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <mainMachine+0x28c>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
		break;
 8002008:	e035      	b.n	8002076 <mainMachine+0x2ee>
	case RACING:
		runDirections(string);
 800200a:	4813      	ldr	r0, [pc, #76]	; (8002058 <mainMachine+0x2d0>)
 800200c:	f000 faa8 	bl	8002560 <runDirections>
		break;
 8002010:	e031      	b.n	8002076 <mainMachine+0x2ee>
 8002012:	bf00      	nop
 8002014:	2000236c 	.word	0x2000236c
 8002018:	2000245c 	.word	0x2000245c
 800201c:	20002330 	.word	0x20002330
 8002020:	2000232c 	.word	0x2000232c
 8002024:	2000233c 	.word	0x2000233c
 8002028:	40010c00 	.word	0x40010c00
 800202c:	2000231c 	.word	0x2000231c
 8002030:	20000010 	.word	0x20000010
 8002034:	20002314 	.word	0x20002314
 8002038:	20000018 	.word	0x20000018
 800203c:	20000000 	.word	0x20000000
 8002040:	2000230c 	.word	0x2000230c
 8002044:	20000008 	.word	0x20000008
 8002048:	20002310 	.word	0x20002310
 800204c:	20003c94 	.word	0x20003c94
 8002050:	20002390 	.word	0x20002390
 8002054:	0801fc00 	.word	0x0801fc00
 8002058:	200023f8 	.word	0x200023f8
 800205c:	40011000 	.word	0x40011000
 8002060:	20002300 	.word	0x20002300
 8002064:	2000027c 	.word	0x2000027c
 8002068:	2000246c 	.word	0x2000246c
 800206c:	20002324 	.word	0x20002324
 8002070:	20002374 	.word	0x20002374
		break;
 8002074:	bf00      	nop
	}

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop

0800207c <calibrateMachine>:

void calibrateMachine() {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	switch (calState) {
 8002080:	4b72      	ldr	r3, [pc, #456]	; (800224c <calibrateMachine+0x1d0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	f200 80df 	bhi.w	8002248 <calibrateMachine+0x1cc>
 800208a:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <calibrateMachine+0x14>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	080020a1 	.word	0x080020a1
 8002094:	0800214b 	.word	0x0800214b
 8002098:	08002199 	.word	0x08002199
 800209c:	080021e7 	.word	0x080021e7
	case CENTER:
		intUartSend(Sensors[1] - Sensors[3]);
 80020a0:	4b6b      	ldr	r3, [pc, #428]	; (8002250 <calibrateMachine+0x1d4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <calibrateMachine+0x1d4>)
 80020a6:	68d2      	ldr	r2, [r2, #12]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fd60 	bl	8000b70 <__aeabi_fsub>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fcac 	bl	8001a10 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020b8:	2201      	movs	r2, #1
 80020ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020be:	4865      	ldr	r0, [pc, #404]	; (8002254 <calibrateMachine+0x1d8>)
 80020c0:	f004 f833 	bl	800612a <HAL_GPIO_WritePin>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80020c4:	4b62      	ldr	r3, [pc, #392]	; (8002250 <calibrateMachine+0x1d4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a61      	ldr	r2, [pc, #388]	; (8002250 <calibrateMachine+0x1d4>)
 80020ca:	68d2      	ldr	r2, [r2, #12]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fd4e 	bl	8000b70 <__aeabi_fsub>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fff0 	bl	80010c0 <__aeabi_fcmplt>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d100      	bne.n	80020e8 <calibrateMachine+0x6c>
			}
		}
		/*runMotor(ADELANTE, MOTOR_A);
		runMotor(ADELANTE, MOTOR_B);
		StraightFlag = 1;*/
		break;
 80020e6:	e0a8      	b.n	800223a <calibrateMachine+0x1be>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <calibrateMachine+0x1d4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <calibrateMachine+0x1d4>)
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fd3c 	bl	8000b70 <__aeabi_fsub>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fffc 	bl	80010fc <__aeabi_fcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d100      	bne.n	800210c <calibrateMachine+0x90>
		break;
 800210a:	e096      	b.n	800223a <calibrateMachine+0x1be>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	4850      	ldr	r0, [pc, #320]	; (8002254 <calibrateMachine+0x1d8>)
 8002114:	f004 f809 	bl	800612a <HAL_GPIO_WritePin>
			if (btns[0].flag == 1) {
 8002118:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <calibrateMachine+0x1dc>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 808c 	bne.w	800223a <calibrateMachine+0x1be>
				CenterDistanceRight = Sensors[3];
 8002122:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <calibrateMachine+0x1d4>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fff2 	bl	8001110 <__aeabi_f2iz>
 800212c:	4603      	mov	r3, r0
 800212e:	4a4b      	ldr	r2, [pc, #300]	; (800225c <calibrateMachine+0x1e0>)
 8002130:	6013      	str	r3, [r2, #0]
				CenterDistanceLeft = Sensors[1];
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <calibrateMachine+0x1d4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ffea 	bl	8001110 <__aeabi_f2iz>
 800213c:	4603      	mov	r3, r0
 800213e:	4a48      	ldr	r2, [pc, #288]	; (8002260 <calibrateMachine+0x1e4>)
 8002140:	6013      	str	r3, [r2, #0]
				calState = LEFT;
 8002142:	4b42      	ldr	r3, [pc, #264]	; (800224c <calibrateMachine+0x1d0>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
		break;
 8002148:	e077      	b.n	800223a <calibrateMachine+0x1be>
	case LEFT:
		intUartSend((Sensors[3]));
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <calibrateMachine+0x1d4>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fc5e 	bl	8001a10 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215a:	483e      	ldr	r0, [pc, #248]	; (8002254 <calibrateMachine+0x1d8>)
 800215c:	f003 ffe5 	bl	800612a <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <calibrateMachine+0x1dc>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d16a      	bne.n	800223e <calibrateMachine+0x1c2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216e:	4839      	ldr	r0, [pc, #228]	; (8002254 <calibrateMachine+0x1d8>)
 8002170:	f003 ffdb 	bl	800612a <HAL_GPIO_WritePin>
			MaxLeftDistance = Sensors[3] + 2;
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <calibrateMachine+0x1d4>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fcf9 	bl	8000b74 <__addsf3>
 8002182:	4603      	mov	r3, r0
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe ffc3 	bl	8001110 <__aeabi_f2iz>
 800218a:	4603      	mov	r3, r0
 800218c:	4a35      	ldr	r2, [pc, #212]	; (8002264 <calibrateMachine+0x1e8>)
 800218e:	6013      	str	r3, [r2, #0]
			calState = RIGHT;
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <calibrateMachine+0x1d0>)
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
		}
		break;
 8002196:	e052      	b.n	800223e <calibrateMachine+0x1c2>
	case RIGHT:
		intUartSend((Sensors[1]));
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <calibrateMachine+0x1d4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fc37 	bl	8001a10 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a8:	482a      	ldr	r0, [pc, #168]	; (8002254 <calibrateMachine+0x1d8>)
 80021aa:	f003 ffbe 	bl	800612a <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <calibrateMachine+0x1dc>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d145      	bne.n	8002242 <calibrateMachine+0x1c6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021bc:	4825      	ldr	r0, [pc, #148]	; (8002254 <calibrateMachine+0x1d8>)
 80021be:	f003 ffb4 	bl	800612a <HAL_GPIO_WritePin>
			MaxRightDistance = Sensors[1] + 2;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <calibrateMachine+0x1d4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fcd2 	bl	8000b74 <__addsf3>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe ff9c 	bl	8001110 <__aeabi_f2iz>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <calibrateMachine+0x1ec>)
 80021dc:	6013      	str	r3, [r2, #0]
			calState = FORWARD;
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <calibrateMachine+0x1d0>)
 80021e0:	2203      	movs	r2, #3
 80021e2:	601a      	str	r2, [r3, #0]
		}
		break;
 80021e4:	e02d      	b.n	8002242 <calibrateMachine+0x1c6>
	case FORWARD:
		intUartSend((Sensors[2]));
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <calibrateMachine+0x1d4>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fc10 	bl	8001a10 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f6:	4817      	ldr	r0, [pc, #92]	; (8002254 <calibrateMachine+0x1d8>)
 80021f8:	f003 ff97 	bl	800612a <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <calibrateMachine+0x1dc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d120      	bne.n	8002246 <calibrateMachine+0x1ca>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220a:	4812      	ldr	r0, [pc, #72]	; (8002254 <calibrateMachine+0x1d8>)
 800220c:	f003 ff8d 	bl	800612a <HAL_GPIO_WritePin>
			MaxCenterDistance = Sensors[2] + 2;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <calibrateMachine+0x1d4>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fcab 	bl	8000b74 <__addsf3>
 800221e:	4603      	mov	r3, r0
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe ff75 	bl	8001110 <__aeabi_f2iz>
 8002226:	4603      	mov	r3, r0
 8002228:	4a10      	ldr	r2, [pc, #64]	; (800226c <calibrateMachine+0x1f0>)
 800222a:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <calibrateMachine+0x1f4>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <calibrateMachine+0x1d0>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
		}
		break;
 8002238:	e005      	b.n	8002246 <calibrateMachine+0x1ca>
		break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <calibrateMachine+0x1cc>
		break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <calibrateMachine+0x1cc>
		break;
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <calibrateMachine+0x1cc>
		break;
 8002246:	bf00      	nop
	}
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200022e0 	.word	0x200022e0
 8002250:	200022c0 	.word	0x200022c0
 8002254:	40011000 	.word	0x40011000
 8002258:	2000233c 	.word	0x2000233c
 800225c:	200022e4 	.word	0x200022e4
 8002260:	200022e8 	.word	0x200022e8
 8002264:	200022f0 	.word	0x200022f0
 8002268:	200022ec 	.word	0x200022ec
 800226c:	200022f4 	.word	0x200022f4
 8002270:	2000236c 	.word	0x2000236c

08002274 <robotMachine>:

void robotMachine() {
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	af00      	add	r7, sp, #0
	switch (robotState) {
 8002278:	4bae      	ldr	r3, [pc, #696]	; (8002534 <robotMachine+0x2c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b02      	cmp	r3, #2
 800227e:	f000 8143 	beq.w	8002508 <robotMachine+0x294>
 8002282:	2b02      	cmp	r3, #2
 8002284:	f300 8153 	bgt.w	800252e <robotMachine+0x2ba>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <robotMachine+0x20>
 800228c:	2b01      	cmp	r3, #1
 800228e:	f000 8101 	beq.w	8002494 <robotMachine+0x220>
		if (movimientoFlag == 1) {
			robotState = READING;
		}
		break;
	}
}
 8002292:	e14c      	b.n	800252e <robotMachine+0x2ba>
		HAL_Delay(10);
 8002294:	200a      	movs	r0, #10
 8002296:	f002 fcc1 	bl	8004c1c <HAL_Delay>
		TX_BUFFER[0] = 'X';
 800229a:	4ba7      	ldr	r3, [pc, #668]	; (8002538 <robotMachine+0x2c4>)
 800229c:	2258      	movs	r2, #88	; 0x58
 800229e:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 80022a0:	4ba6      	ldr	r3, [pc, #664]	; (800253c <robotMachine+0x2c8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3330      	adds	r3, #48	; 0x30
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4ba3      	ldr	r3, [pc, #652]	; (8002538 <robotMachine+0x2c4>)
 80022ac:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80022ae:	4ba2      	ldr	r3, [pc, #648]	; (8002538 <robotMachine+0x2c4>)
 80022b0:	220a      	movs	r2, #10
 80022b2:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 80022b4:	4ba0      	ldr	r3, [pc, #640]	; (8002538 <robotMachine+0x2c4>)
 80022b6:	2259      	movs	r2, #89	; 0x59
 80022b8:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 80022ba:	4ba0      	ldr	r3, [pc, #640]	; (800253c <robotMachine+0x2c8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3330      	adds	r3, #48	; 0x30
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b9c      	ldr	r3, [pc, #624]	; (8002538 <robotMachine+0x2c4>)
 80022c6:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 80022c8:	4b9b      	ldr	r3, [pc, #620]	; (8002538 <robotMachine+0x2c4>)
 80022ca:	220a      	movs	r2, #10
 80022cc:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 6, 100);
 80022ce:	2364      	movs	r3, #100	; 0x64
 80022d0:	2206      	movs	r2, #6
 80022d2:	4999      	ldr	r1, [pc, #612]	; (8002538 <robotMachine+0x2c4>)
 80022d4:	489a      	ldr	r0, [pc, #616]	; (8002540 <robotMachine+0x2cc>)
 80022d6:	f005 faee 	bl	80078b6 <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 80022da:	4b98      	ldr	r3, [pc, #608]	; (800253c <robotMachine+0x2c8>)
 80022dc:	6819      	ldr	r1, [r3, #0]
 80022de:	4b97      	ldr	r3, [pc, #604]	; (800253c <robotMachine+0x2c8>)
 80022e0:	6858      	ldr	r0, [r3, #4]
 80022e2:	4c98      	ldr	r4, [pc, #608]	; (8002544 <robotMachine+0x2d0>)
 80022e4:	4602      	mov	r2, r0
 80022e6:	0052      	lsls	r2, r2, #1
 80022e8:	4402      	add	r2, r0
 80022ea:	00d3      	lsls	r3, r2, #3
 80022ec:	461a      	mov	r2, r3
 80022ee:	460b      	mov	r3, r1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	440b      	add	r3, r1
 80022f4:	01db      	lsls	r3, r3, #7
 80022f6:	4413      	add	r3, r2
 80022f8:	4423      	add	r3, r4
 80022fa:	3310      	adds	r3, #16
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1c5c      	adds	r4, r3, #1
 8002300:	4d90      	ldr	r5, [pc, #576]	; (8002544 <robotMachine+0x2d0>)
 8002302:	4602      	mov	r2, r0
 8002304:	0052      	lsls	r2, r2, #1
 8002306:	4402      	add	r2, r0
 8002308:	00d3      	lsls	r3, r2, #3
 800230a:	461a      	mov	r2, r3
 800230c:	460b      	mov	r3, r1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	440b      	add	r3, r1
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4413      	add	r3, r2
 8002316:	442b      	add	r3, r5
 8002318:	3310      	adds	r3, #16
 800231a:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 800231c:	4b87      	ldr	r3, [pc, #540]	; (800253c <robotMachine+0x2c8>)
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	4b86      	ldr	r3, [pc, #536]	; (800253c <robotMachine+0x2c8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4887      	ldr	r0, [pc, #540]	; (8002544 <robotMachine+0x2d0>)
 8002326:	461a      	mov	r2, r3
 8002328:	0052      	lsls	r2, r2, #1
 800232a:	441a      	add	r2, r3
 800232c:	00d3      	lsls	r3, r2, #3
 800232e:	461a      	mov	r2, r3
 8002330:	460b      	mov	r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	440b      	add	r3, r1
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	4413      	add	r3, r2
 800233a:	4403      	add	r3, r0
 800233c:	3310      	adds	r3, #16
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10f      	bne.n	8002364 <robotMachine+0xf0>
			runMotor(OFF, MOTOR_A);
 8002344:	2100      	movs	r1, #0
 8002346:	2005      	movs	r0, #5
 8002348:	f002 f864 	bl	8004414 <runMotor>
			runMotor(OFF, MOTOR_B);
 800234c:	2101      	movs	r1, #1
 800234e:	2005      	movs	r0, #5
 8002350:	f002 f860 	bl	8004414 <runMotor>
			CreateNode(actual.x, actual.y);
 8002354:	4b79      	ldr	r3, [pc, #484]	; (800253c <robotMachine+0x2c8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a78      	ldr	r2, [pc, #480]	; (800253c <robotMachine+0x2c8>)
 800235a:	6852      	ldr	r2, [r2, #4]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fc36 	bl	8003bd0 <CreateNode>
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002364:	4b75      	ldr	r3, [pc, #468]	; (800253c <robotMachine+0x2c8>)
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	4b74      	ldr	r3, [pc, #464]	; (800253c <robotMachine+0x2c8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4875      	ldr	r0, [pc, #468]	; (8002544 <robotMachine+0x2d0>)
 800236e:	461a      	mov	r2, r3
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	441a      	add	r2, r3
 8002374:	00d3      	lsls	r3, r2, #3
 8002376:	461a      	mov	r2, r3
 8002378:	460b      	mov	r3, r1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	01db      	lsls	r3, r3, #7
 8002380:	4413      	add	r3, r2
 8002382:	4403      	add	r3, r0
 8002384:	330c      	adds	r3, #12
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fca7 	bl	8000cdc <__aeabi_i2f>
 800238e:	4603      	mov	r3, r0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb3d 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002396:	4b69      	ldr	r3, [pc, #420]	; (800253c <robotMachine+0x2c8>)
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	4b68      	ldr	r3, [pc, #416]	; (800253c <robotMachine+0x2c8>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4869      	ldr	r0, [pc, #420]	; (8002544 <robotMachine+0x2d0>)
 80023a0:	461a      	mov	r2, r3
 80023a2:	0052      	lsls	r2, r2, #1
 80023a4:	441a      	add	r2, r3
 80023a6:	00d3      	lsls	r3, r2, #3
 80023a8:	461a      	mov	r2, r3
 80023aa:	460b      	mov	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	440b      	add	r3, r1
 80023b0:	01db      	lsls	r3, r3, #7
 80023b2:	4413      	add	r3, r2
 80023b4:	4403      	add	r3, r0
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fc8f 	bl	8000cdc <__aeabi_i2f>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fb25 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <robotMachine+0x2c8>)
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <robotMachine+0x2c8>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	485d      	ldr	r0, [pc, #372]	; (8002544 <robotMachine+0x2d0>)
 80023d0:	461a      	mov	r2, r3
 80023d2:	0052      	lsls	r2, r2, #1
 80023d4:	441a      	add	r2, r3
 80023d6:	00d3      	lsls	r3, r2, #3
 80023d8:	461a      	mov	r2, r3
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	01db      	lsls	r3, r3, #7
 80023e2:	4413      	add	r3, r2
 80023e4:	4403      	add	r3, r0
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fc76 	bl	8000cdc <__aeabi_i2f>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fb0c 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <robotMachine+0x2c8>)
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	4b4f      	ldr	r3, [pc, #316]	; (800253c <robotMachine+0x2c8>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4850      	ldr	r0, [pc, #320]	; (8002544 <robotMachine+0x2d0>)
 8002402:	461a      	mov	r2, r3
 8002404:	0052      	lsls	r2, r2, #1
 8002406:	441a      	add	r2, r3
 8002408:	00d3      	lsls	r3, r2, #3
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	440b      	add	r3, r1
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	4413      	add	r3, r2
 8002416:	4403      	add	r3, r0
 8002418:	3308      	adds	r3, #8
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fc5d 	bl	8000cdc <__aeabi_i2f>
 8002422:	4603      	mov	r3, r0
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff faf3 	bl	8001a10 <intUartSend>
		valueCNY = NEGRO;			//Sensors[0];
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <robotMachine+0x2d4>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]
		if (valueCNY == BLANCO) {
 8002430:	4b45      	ldr	r3, [pc, #276]	; (8002548 <robotMachine+0x2d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <robotMachine+0x1f2>
			Map[actual.x][actual.y].final = 1;
 8002438:	4b40      	ldr	r3, [pc, #256]	; (800253c <robotMachine+0x2c8>)
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <robotMachine+0x2c8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4840      	ldr	r0, [pc, #256]	; (8002544 <robotMachine+0x2d0>)
 8002442:	461a      	mov	r2, r3
 8002444:	0052      	lsls	r2, r2, #1
 8002446:	441a      	add	r2, r3
 8002448:	00d3      	lsls	r3, r2, #3
 800244a:	461a      	mov	r2, r3
 800244c:	460b      	mov	r3, r1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	440b      	add	r3, r1
 8002452:	01db      	lsls	r3, r3, #7
 8002454:	4413      	add	r3, r2
 8002456:	4403      	add	r3, r0
 8002458:	3314      	adds	r3, #20
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <robotMachine+0x2d8>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
		break;
 8002464:	e063      	b.n	800252e <robotMachine+0x2ba>
			Map[actual.x][actual.y].final = 0;
 8002466:	4b35      	ldr	r3, [pc, #212]	; (800253c <robotMachine+0x2c8>)
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	4b34      	ldr	r3, [pc, #208]	; (800253c <robotMachine+0x2c8>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4835      	ldr	r0, [pc, #212]	; (8002544 <robotMachine+0x2d0>)
 8002470:	461a      	mov	r2, r3
 8002472:	0052      	lsls	r2, r2, #1
 8002474:	441a      	add	r2, r3
 8002476:	00d3      	lsls	r3, r2, #3
 8002478:	461a      	mov	r2, r3
 800247a:	460b      	mov	r3, r1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	440b      	add	r3, r1
 8002480:	01db      	lsls	r3, r3, #7
 8002482:	4413      	add	r3, r2
 8002484:	4403      	add	r3, r0
 8002486:	3314      	adds	r3, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <robotMachine+0x2c0>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]
		break;
 8002492:	e04c      	b.n	800252e <robotMachine+0x2ba>
		movimiento = ChooseNextNode(actual.x, actual.y);
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <robotMachine+0x2c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <robotMachine+0x2c8>)
 800249a:	6852      	ldr	r2, [r2, #4]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f996 	bl	80027d0 <ChooseNextNode>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <robotMachine+0x2dc>)
 80024a8:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <robotMachine+0x2c4>)
 80024ac:	224d      	movs	r2, #77	; 0x4d
 80024ae:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <robotMachine+0x2dc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3330      	adds	r3, #48	; 0x30
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <robotMachine+0x2c4>)
 80024bc:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <robotMachine+0x2c4>)
 80024c0:	220a      	movs	r2, #10
 80024c2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	2203      	movs	r2, #3
 80024c8:	491b      	ldr	r1, [pc, #108]	; (8002538 <robotMachine+0x2c4>)
 80024ca:	481d      	ldr	r0, [pc, #116]	; (8002540 <robotMachine+0x2cc>)
 80024cc:	f005 f9f3 	bl	80078b6 <HAL_UART_Transmit>
		TX_BUFFER[0] = '*';
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <robotMachine+0x2c4>)
 80024d2:	222a      	movs	r2, #42	; 0x2a
 80024d4:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <robotMachine+0x2c4>)
 80024d8:	222a      	movs	r2, #42	; 0x2a
 80024da:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <robotMachine+0x2c4>)
 80024de:	220a      	movs	r2, #10
 80024e0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	2203      	movs	r2, #3
 80024e6:	4914      	ldr	r1, [pc, #80]	; (8002538 <robotMachine+0x2c4>)
 80024e8:	4815      	ldr	r0, [pc, #84]	; (8002540 <robotMachine+0x2cc>)
 80024ea:	f005 f9e4 	bl	80078b6 <HAL_UART_Transmit>
		movimientoFlag = 0;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <robotMachine+0x2e0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 80024f4:	f002 fb88 	bl	8004c08 <HAL_GetTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <robotMachine+0x2e4>)
 80024fe:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <robotMachine+0x2c0>)
 8002502:	2202      	movs	r2, #2
 8002504:	601a      	str	r2, [r3, #0]
		break;
 8002506:	e012      	b.n	800252e <robotMachine+0x2ba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002508:	2200      	movs	r2, #0
 800250a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800250e:	4813      	ldr	r0, [pc, #76]	; (800255c <robotMachine+0x2e8>)
 8002510:	f003 fe0b 	bl	800612a <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <robotMachine+0x2dc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 ff61 	bl	80033e0 <movementMachine>
		if (movimientoFlag == 1) {
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <robotMachine+0x2e0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d102      	bne.n	800252c <robotMachine+0x2b8>
			robotState = READING;
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <robotMachine+0x2c0>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
		break;
 800252c:	bf00      	nop
}
 800252e:	bf00      	nop
 8002530:	bdb0      	pop	{r4, r5, r7, pc}
 8002532:	bf00      	nop
 8002534:	20002370 	.word	0x20002370
 8002538:	20002300 	.word	0x20002300
 800253c:	2000245c 	.word	0x2000245c
 8002540:	2000027c 	.word	0x2000027c
 8002544:	2000246c 	.word	0x2000246c
 8002548:	20002334 	.word	0x20002334
 800254c:	2000232c 	.word	0x2000232c
 8002550:	20002328 	.word	0x20002328
 8002554:	20002330 	.word	0x20002330
 8002558:	20002318 	.word	0x20002318
 800255c:	40011000 	.word	0x40011000

08002560 <runDirections>:

void runDirections(char moves[100]) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <runDirections+0xac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b61      	cmp	r3, #97	; 0x61
 8002576:	d103      	bne.n	8002580 <runDirections+0x20>
		movementMachine(ADELANTE);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 ff31 	bl	80033e0 <movementMachine>
 800257e:	e026      	b.n	80025ce <runDirections+0x6e>
	} else if (moves[m] == 'd') {
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <runDirections+0xac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d103      	bne.n	8002598 <runDirections+0x38>
		movementMachine(DERECHA);
 8002590:	2003      	movs	r0, #3
 8002592:	f000 ff25 	bl	80033e0 <movementMachine>
 8002596:	e01a      	b.n	80025ce <runDirections+0x6e>
	} else if (moves[m] == 'i') {
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <runDirections+0xac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b69      	cmp	r3, #105	; 0x69
 80025a6:	d103      	bne.n	80025b0 <runDirections+0x50>
		movementMachine(IZQUIERDA);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 ff19 	bl	80033e0 <movementMachine>
 80025ae:	e00e      	b.n	80025ce <runDirections+0x6e>
	} else if (moves[m] == 'o') {
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <runDirections+0xac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b6f      	cmp	r3, #111	; 0x6f
 80025be:	d103      	bne.n	80025c8 <runDirections+0x68>
		movementMachine(OFF);
 80025c0:	2005      	movs	r0, #5
 80025c2:	f000 ff0d 	bl	80033e0 <movementMachine>
 80025c6:	e002      	b.n	80025ce <runDirections+0x6e>
	} else {
		movementMachine(SUPER);
 80025c8:	2004      	movs	r0, #4
 80025ca:	f000 ff09 	bl	80033e0 <movementMachine>
	}
	TX_BUFFER[0] = moves[m];
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <runDirections+0xac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <runDirections+0xb0>)
 80025dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 80025de:	2364      	movs	r3, #100	; 0x64
 80025e0:	2201      	movs	r2, #1
 80025e2:	490b      	ldr	r1, [pc, #44]	; (8002610 <runDirections+0xb0>)
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <runDirections+0xb4>)
 80025e6:	f005 f966 	bl	80078b6 <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <runDirections+0xb8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <runDirections+0xa2>
		m++;
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <runDirections+0xac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <runDirections+0xac>)
 80025fa:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <runDirections+0xb8>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
	}
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20002320 	.word	0x20002320
 8002610:	20002300 	.word	0x20002300
 8002614:	2000027c 	.word	0x2000027c
 8002618:	20002330 	.word	0x20002330

0800261c <addDirection>:

void addDirection(int x, int y) {
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002626:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <addDirection+0x19c>)
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	4c64      	ldr	r4, [pc, #400]	; (80027bc <addDirection+0x1a0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	461a      	mov	r2, r3
 8002632:	0052      	lsls	r2, r2, #1
 8002634:	441a      	add	r2, r3
 8002636:	0053      	lsls	r3, r2, #1
 8002638:	461a      	mov	r2, r3
 800263a:	460b      	mov	r3, r1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	440b      	add	r3, r1
 8002640:	015b      	lsls	r3, r3, #5
 8002642:	4413      	add	r3, r2
 8002644:	4403      	add	r3, r0
 8002646:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d00a      	beq.n	8002664 <addDirection+0x48>
		//Map[x][y].Lados[direcciones[ADELANTE]] = 2;
		moveNode(direcciones[ADELANTE]);
 800264e:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <addDirection+0x19c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fe92 	bl	800337c <moveNode>
		directions[directionsSize] = 'a';
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <addDirection+0x1a4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <addDirection+0x1a8>)
 800265e:	2161      	movs	r1, #97	; 0x61
 8002660:	54d1      	strb	r1, [r2, r3]
 8002662:	e042      	b.n	80026ea <addDirection+0xce>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002664:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <addDirection+0x19c>)
 8002666:	6858      	ldr	r0, [r3, #4]
 8002668:	4c54      	ldr	r4, [pc, #336]	; (80027bc <addDirection+0x1a0>)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	0052      	lsls	r2, r2, #1
 8002672:	441a      	add	r2, r3
 8002674:	0053      	lsls	r3, r2, #1
 8002676:	461a      	mov	r2, r3
 8002678:	460b      	mov	r3, r1
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	440b      	add	r3, r1
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	4413      	add	r3, r2
 8002682:	4403      	add	r3, r0
 8002684:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d00d      	beq.n	80026a8 <addDirection+0x8c>
		//Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
		moveNode(direcciones[IZQUIERDA]);
 800268c:	4b4a      	ldr	r3, [pc, #296]	; (80027b8 <addDirection+0x19c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fe73 	bl	800337c <moveNode>
		rotateAxis(IZQUIERDA);
 8002696:	2001      	movs	r0, #1
 8002698:	f001 fb12 	bl	8003cc0 <rotateAxis>
		directions[directionsSize] = 'i';
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <addDirection+0x1a4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <addDirection+0x1a8>)
 80026a2:	2169      	movs	r1, #105	; 0x69
 80026a4:	54d1      	strb	r1, [r2, r3]
 80026a6:	e020      	b.n	80026ea <addDirection+0xce>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <addDirection+0x19c>)
 80026aa:	68d8      	ldr	r0, [r3, #12]
 80026ac:	4c43      	ldr	r4, [pc, #268]	; (80027bc <addDirection+0x1a0>)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	461a      	mov	r2, r3
 80026b4:	0052      	lsls	r2, r2, #1
 80026b6:	441a      	add	r2, r3
 80026b8:	0053      	lsls	r3, r2, #1
 80026ba:	461a      	mov	r2, r3
 80026bc:	460b      	mov	r3, r1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	015b      	lsls	r3, r3, #5
 80026c4:	4413      	add	r3, r2
 80026c6:	4403      	add	r3, r0
 80026c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d00c      	beq.n	80026ea <addDirection+0xce>
		//Map[x][y].Lados[direcciones[DERECHA]] = 2;
		moveNode(direcciones[DERECHA]);
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <addDirection+0x19c>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fe51 	bl	800337c <moveNode>
		rotateAxis(DERECHA);
 80026da:	2003      	movs	r0, #3
 80026dc:	f001 faf0 	bl	8003cc0 <rotateAxis>
		directions[directionsSize] = 'd';
 80026e0:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <addDirection+0x1a4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a37      	ldr	r2, [pc, #220]	; (80027c4 <addDirection+0x1a8>)
 80026e6:	2164      	movs	r1, #100	; 0x64
 80026e8:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <addDirection+0x19c>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	4c33      	ldr	r4, [pc, #204]	; (80027bc <addDirection+0x1a0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	461a      	mov	r2, r3
 80026f6:	0052      	lsls	r2, r2, #1
 80026f8:	441a      	add	r2, r3
 80026fa:	0053      	lsls	r3, r2, #1
 80026fc:	461a      	mov	r2, r3
 80026fe:	460b      	mov	r3, r1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	440b      	add	r3, r1
 8002704:	015b      	lsls	r3, r3, #5
 8002706:	4413      	add	r3, r2
 8002708:	4403      	add	r3, r0
 800270a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fae4 	bl	8000cdc <__aeabi_i2f>
 8002714:	4603      	mov	r3, r0
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f97a 	bl	8001a10 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <addDirection+0x19c>)
 800271e:	6858      	ldr	r0, [r3, #4]
 8002720:	4c26      	ldr	r4, [pc, #152]	; (80027bc <addDirection+0x1a0>)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	0052      	lsls	r2, r2, #1
 800272a:	441a      	add	r2, r3
 800272c:	0053      	lsls	r3, r2, #1
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	440b      	add	r3, r1
 8002736:	015b      	lsls	r3, r3, #5
 8002738:	4413      	add	r3, r2
 800273a:	4403      	add	r3, r0
 800273c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe facb 	bl	8000cdc <__aeabi_i2f>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f961 	bl	8001a10 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <addDirection+0x19c>)
 8002750:	68d8      	ldr	r0, [r3, #12]
 8002752:	4c1a      	ldr	r4, [pc, #104]	; (80027bc <addDirection+0x1a0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	461a      	mov	r2, r3
 800275a:	0052      	lsls	r2, r2, #1
 800275c:	441a      	add	r2, r3
 800275e:	0053      	lsls	r3, r2, #1
 8002760:	461a      	mov	r2, r3
 8002762:	460b      	mov	r3, r1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	440b      	add	r3, r1
 8002768:	015b      	lsls	r3, r3, #5
 800276a:	4413      	add	r3, r2
 800276c:	4403      	add	r3, r0
 800276e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fab2 	bl	8000cdc <__aeabi_i2f>
 8002778:	4603      	mov	r3, r0
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f948 	bl	8001a10 <intUartSend>
	TX_BUFFER[0] = 'D';
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <addDirection+0x1ac>)
 8002782:	2244      	movs	r2, #68	; 0x44
 8002784:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <addDirection+0x1a4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <addDirection+0x1a8>)
 800278c:	5cd2      	ldrb	r2, [r2, r3]
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <addDirection+0x1ac>)
 8002790:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <addDirection+0x1ac>)
 8002794:	220a      	movs	r2, #10
 8002796:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 8002798:	2364      	movs	r3, #100	; 0x64
 800279a:	2203      	movs	r2, #3
 800279c:	490a      	ldr	r1, [pc, #40]	; (80027c8 <addDirection+0x1ac>)
 800279e:	480b      	ldr	r0, [pc, #44]	; (80027cc <addDirection+0x1b0>)
 80027a0:	f005 f889 	bl	80078b6 <HAL_UART_Transmit>
	directionsSize++;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <addDirection+0x1a4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <addDirection+0x1a4>)
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200022d0 	.word	0x200022d0
 80027bc:	2000246c 	.word	0x2000246c
 80027c0:	20002324 	.word	0x20002324
 80027c4:	20002374 	.word	0x20002374
 80027c8:	20002300 	.word	0x20002300
 80027cc:	2000027c 	.word	0x2000027c

080027d0 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 80027da:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <ChooseNextNode+0x1d8>)
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	4c73      	ldr	r4, [pc, #460]	; (80029ac <ChooseNextNode+0x1dc>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	461a      	mov	r2, r3
 80027e6:	0052      	lsls	r2, r2, #1
 80027e8:	441a      	add	r2, r3
 80027ea:	0053      	lsls	r3, r2, #1
 80027ec:	461a      	mov	r2, r3
 80027ee:	460b      	mov	r3, r1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	440b      	add	r3, r1
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	4413      	add	r3, r2
 80027f8:	4403      	add	r3, r0
 80027fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 80e0 	bne.w	80029c4 <ChooseNextNode+0x1f4>
		TX_BUFFER[0] = 'A';
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <ChooseNextNode+0x1e0>)
 8002806:	2241      	movs	r2, #65	; 0x41
 8002808:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800280a:	4b69      	ldr	r3, [pc, #420]	; (80029b0 <ChooseNextNode+0x1e0>)
 800280c:	220a      	movs	r2, #10
 800280e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002810:	2364      	movs	r3, #100	; 0x64
 8002812:	2202      	movs	r2, #2
 8002814:	4966      	ldr	r1, [pc, #408]	; (80029b0 <ChooseNextNode+0x1e0>)
 8002816:	4867      	ldr	r0, [pc, #412]	; (80029b4 <ChooseNextNode+0x1e4>)
 8002818:	f005 f84d 	bl	80078b6 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 800281c:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <ChooseNextNode+0x1d8>)
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	4c62      	ldr	r4, [pc, #392]	; (80029ac <ChooseNextNode+0x1dc>)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	0052      	lsls	r2, r2, #1
 800282a:	441a      	add	r2, r3
 800282c:	0053      	lsls	r3, r2, #1
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	440b      	add	r3, r1
 8002836:	015b      	lsls	r3, r3, #5
 8002838:	4413      	add	r3, r2
 800283a:	4403      	add	r3, r0
 800283c:	2202      	movs	r2, #2
 800283e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8002842:	485a      	ldr	r0, [pc, #360]	; (80029ac <ChooseNextNode+0x1dc>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	461a      	mov	r2, r3
 800284a:	0052      	lsls	r2, r2, #1
 800284c:	441a      	add	r2, r3
 800284e:	00d3      	lsls	r3, r2, #3
 8002850:	461a      	mov	r2, r3
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	01db      	lsls	r3, r3, #7
 800285a:	4413      	add	r3, r2
 800285c:	4403      	add	r3, r0
 800285e:	3310      	adds	r3, #16
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	dd06      	ble.n	8002874 <ChooseNextNode+0xa4>
			EliminateNode(x, y);
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fac1 	bl	8002df0 <EliminateNode>
			intUartSend(5000);
 800286e:	4852      	ldr	r0, [pc, #328]	; (80029b8 <ChooseNextNode+0x1e8>)
 8002870:	f7ff f8ce 	bl	8001a10 <intUartSend>
		}
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <ChooseNextNode+0x1d8>)
 8002876:	6898      	ldr	r0, [r3, #8]
 8002878:	4c4c      	ldr	r4, [pc, #304]	; (80029ac <ChooseNextNode+0x1dc>)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	0052      	lsls	r2, r2, #1
 8002882:	441a      	add	r2, r3
 8002884:	0053      	lsls	r3, r2, #1
 8002886:	461a      	mov	r2, r3
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4413      	add	r3, r2
 8002892:	4403      	add	r3, r0
 8002894:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d012      	beq.n	80028c2 <ChooseNextNode+0xf2>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <ChooseNextNode+0x1d8>)
 800289e:	6898      	ldr	r0, [r3, #8]
 80028a0:	4c42      	ldr	r4, [pc, #264]	; (80029ac <ChooseNextNode+0x1dc>)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	461a      	mov	r2, r3
 80028a8:	0052      	lsls	r2, r2, #1
 80028aa:	441a      	add	r2, r3
 80028ac:	0053      	lsls	r3, r2, #1
 80028ae:	461a      	mov	r2, r3
 80028b0:	460b      	mov	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	4413      	add	r3, r2
 80028ba:	4403      	add	r3, r0
 80028bc:	2202      	movs	r2, #2
 80028be:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		last.x = actual.x;
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <ChooseNextNode+0x1ec>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3e      	ldr	r2, [pc, #248]	; (80029c0 <ChooseNextNode+0x1f0>)
 80028c8:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <ChooseNextNode+0x1ec>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <ChooseNextNode+0x1f0>)
 80028d0:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <ChooseNextNode+0x1ec>)
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <ChooseNextNode+0x1ec>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4834      	ldr	r0, [pc, #208]	; (80029ac <ChooseNextNode+0x1dc>)
 80028dc:	461a      	mov	r2, r3
 80028de:	0052      	lsls	r2, r2, #1
 80028e0:	441a      	add	r2, r3
 80028e2:	00d3      	lsls	r3, r2, #3
 80028e4:	461a      	mov	r2, r3
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	01db      	lsls	r3, r3, #7
 80028ee:	4413      	add	r3, r2
 80028f0:	4403      	add	r3, r0
 80028f2:	330c      	adds	r3, #12
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe f9f0 	bl	8000cdc <__aeabi_i2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f886 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <ChooseNextNode+0x1ec>)
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <ChooseNextNode+0x1ec>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4827      	ldr	r0, [pc, #156]	; (80029ac <ChooseNextNode+0x1dc>)
 800290e:	461a      	mov	r2, r3
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	441a      	add	r2, r3
 8002914:	00d3      	lsls	r3, r2, #3
 8002916:	461a      	mov	r2, r3
 8002918:	460b      	mov	r3, r1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	440b      	add	r3, r1
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4413      	add	r3, r2
 8002922:	4403      	add	r3, r0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe f9d8 	bl	8000cdc <__aeabi_i2f>
 800292c:	4603      	mov	r3, r0
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f86e 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <ChooseNextNode+0x1ec>)
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <ChooseNextNode+0x1ec>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	481b      	ldr	r0, [pc, #108]	; (80029ac <ChooseNextNode+0x1dc>)
 800293e:	461a      	mov	r2, r3
 8002940:	0052      	lsls	r2, r2, #1
 8002942:	441a      	add	r2, r3
 8002944:	00d3      	lsls	r3, r2, #3
 8002946:	461a      	mov	r2, r3
 8002948:	460b      	mov	r3, r1
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	440b      	add	r3, r1
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	4413      	add	r3, r2
 8002952:	4403      	add	r3, r0
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f9bf 	bl	8000cdc <__aeabi_i2f>
 800295e:	4603      	mov	r3, r0
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f855 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <ChooseNextNode+0x1ec>)
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <ChooseNextNode+0x1ec>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	480f      	ldr	r0, [pc, #60]	; (80029ac <ChooseNextNode+0x1dc>)
 8002970:	461a      	mov	r2, r3
 8002972:	0052      	lsls	r2, r2, #1
 8002974:	441a      	add	r2, r3
 8002976:	00d3      	lsls	r3, r2, #3
 8002978:	461a      	mov	r2, r3
 800297a:	460b      	mov	r3, r1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	440b      	add	r3, r1
 8002980:	01db      	lsls	r3, r3, #7
 8002982:	4413      	add	r3, r2
 8002984:	4403      	add	r3, r0
 8002986:	3308      	adds	r3, #8
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe f9a6 	bl	8000cdc <__aeabi_i2f>
 8002990:	4603      	mov	r3, r0
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f83c 	bl	8001a10 <intUartSend>
		moveNode(direcciones[ADELANTE]);
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <ChooseNextNode+0x1d8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fced 	bl	800337c <moveNode>
		return ADELANTE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e211      	b.n	8002dca <ChooseNextNode+0x5fa>
 80029a6:	bf00      	nop
 80029a8:	200022d0 	.word	0x200022d0
 80029ac:	2000246c 	.word	0x2000246c
 80029b0:	20002300 	.word	0x20002300
 80029b4:	2000027c 	.word	0x2000027c
 80029b8:	459c4000 	.word	0x459c4000
 80029bc:	2000245c 	.word	0x2000245c
 80029c0:	20002464 	.word	0x20002464
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 80029c4:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <ChooseNextNode+0x3b8>)
 80029c6:	6858      	ldr	r0, [r3, #4]
 80029c8:	4c70      	ldr	r4, [pc, #448]	; (8002b8c <ChooseNextNode+0x3bc>)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	461a      	mov	r2, r3
 80029d0:	0052      	lsls	r2, r2, #1
 80029d2:	441a      	add	r2, r3
 80029d4:	0053      	lsls	r3, r2, #1
 80029d6:	461a      	mov	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	4413      	add	r3, r2
 80029e2:	4403      	add	r3, r0
 80029e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 80db 	bne.w	8002ba4 <ChooseNextNode+0x3d4>
		TX_BUFFER[0] = 'I';
 80029ee:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <ChooseNextNode+0x3c0>)
 80029f0:	2249      	movs	r2, #73	; 0x49
 80029f2:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 80029f4:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <ChooseNextNode+0x3c0>)
 80029f6:	220a      	movs	r2, #10
 80029f8:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 80029fa:	2364      	movs	r3, #100	; 0x64
 80029fc:	2202      	movs	r2, #2
 80029fe:	4964      	ldr	r1, [pc, #400]	; (8002b90 <ChooseNextNode+0x3c0>)
 8002a00:	4864      	ldr	r0, [pc, #400]	; (8002b94 <ChooseNextNode+0x3c4>)
 8002a02:	f004 ff58 	bl	80078b6 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002a06:	4b60      	ldr	r3, [pc, #384]	; (8002b88 <ChooseNextNode+0x3b8>)
 8002a08:	6858      	ldr	r0, [r3, #4]
 8002a0a:	4c60      	ldr	r4, [pc, #384]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	461a      	mov	r2, r3
 8002a12:	0052      	lsls	r2, r2, #1
 8002a14:	441a      	add	r2, r3
 8002a16:	0053      	lsls	r3, r2, #1
 8002a18:	461a      	mov	r2, r3
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	440b      	add	r3, r1
 8002a20:	015b      	lsls	r3, r3, #5
 8002a22:	4413      	add	r3, r2
 8002a24:	4403      	add	r3, r0
 8002a26:	2202      	movs	r2, #2
 8002a28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].visitado > 1) {
 8002a2c:	4857      	ldr	r0, [pc, #348]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	0052      	lsls	r2, r2, #1
 8002a36:	441a      	add	r2, r3
 8002a38:	00d3      	lsls	r3, r2, #3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	440b      	add	r3, r1
 8002a42:	01db      	lsls	r3, r3, #7
 8002a44:	4413      	add	r3, r2
 8002a46:	4403      	add	r3, r0
 8002a48:	3310      	adds	r3, #16
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	dd06      	ble.n	8002a5e <ChooseNextNode+0x28e>
			EliminateNode(x, y);
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9cc 	bl	8002df0 <EliminateNode>
			intUartSend(5000);
 8002a58:	484f      	ldr	r0, [pc, #316]	; (8002b98 <ChooseNextNode+0x3c8>)
 8002a5a:	f7fe ffd9 	bl	8001a10 <intUartSend>
		}
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002a5e:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <ChooseNextNode+0x3b8>)
 8002a60:	6898      	ldr	r0, [r3, #8]
 8002a62:	4c4a      	ldr	r4, [pc, #296]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	0052      	lsls	r2, r2, #1
 8002a6c:	441a      	add	r2, r3
 8002a6e:	0053      	lsls	r3, r2, #1
 8002a70:	461a      	mov	r2, r3
 8002a72:	460b      	mov	r3, r1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	015b      	lsls	r3, r3, #5
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d012      	beq.n	8002aac <ChooseNextNode+0x2dc>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8002a86:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <ChooseNextNode+0x3b8>)
 8002a88:	6898      	ldr	r0, [r3, #8]
 8002a8a:	4c40      	ldr	r4, [pc, #256]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	461a      	mov	r2, r3
 8002a92:	0052      	lsls	r2, r2, #1
 8002a94:	441a      	add	r2, r3
 8002a96:	0053      	lsls	r3, r2, #1
 8002a98:	461a      	mov	r2, r3
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	440b      	add	r3, r1
 8002aa0:	015b      	lsls	r3, r3, #5
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4403      	add	r3, r0
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		last.x = actual.x;
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <ChooseNextNode+0x3cc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	; (8002ba0 <ChooseNextNode+0x3d0>)
 8002ab2:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <ChooseNextNode+0x3cc>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a39      	ldr	r2, [pc, #228]	; (8002ba0 <ChooseNextNode+0x3d0>)
 8002aba:	6053      	str	r3, [r2, #4]
		intUartSend(Map[x][y].Lados[DERECHA]);
 8002abc:	4833      	ldr	r0, [pc, #204]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	0052      	lsls	r2, r2, #1
 8002ac6:	441a      	add	r2, r3
 8002ac8:	00d3      	lsls	r3, r2, #3
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	440b      	add	r3, r1
 8002ad2:	01db      	lsls	r3, r3, #7
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4403      	add	r3, r0
 8002ad8:	330c      	adds	r3, #12
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f8fd 	bl	8000cdc <__aeabi_i2f>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ff93 	bl	8001a10 <intUartSend>
		intUartSend(Map[x][y].Lados[ADELANTE]);
 8002aea:	4828      	ldr	r0, [pc, #160]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	461a      	mov	r2, r3
 8002af2:	0052      	lsls	r2, r2, #1
 8002af4:	441a      	add	r2, r3
 8002af6:	00d3      	lsls	r3, r2, #3
 8002af8:	461a      	mov	r2, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4413      	add	r3, r2
 8002b04:	4403      	add	r3, r0
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe f8e7 	bl	8000cdc <__aeabi_i2f>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe ff7d 	bl	8001a10 <intUartSend>
		intUartSend(Map[x][y].Lados[IZQUIERDA]);
 8002b16:	481d      	ldr	r0, [pc, #116]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	0052      	lsls	r2, r2, #1
 8002b20:	441a      	add	r2, r3
 8002b22:	00d3      	lsls	r3, r2, #3
 8002b24:	461a      	mov	r2, r3
 8002b26:	460b      	mov	r3, r1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	440b      	add	r3, r1
 8002b2c:	01db      	lsls	r3, r3, #7
 8002b2e:	4413      	add	r3, r2
 8002b30:	4403      	add	r3, r0
 8002b32:	3304      	adds	r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f8d0 	bl	8000cdc <__aeabi_i2f>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe ff66 	bl	8001a10 <intUartSend>
		intUartSend(Map[x][y].Lados[ATRAS]);
 8002b44:	4811      	ldr	r0, [pc, #68]	; (8002b8c <ChooseNextNode+0x3bc>)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	0052      	lsls	r2, r2, #1
 8002b4e:	441a      	add	r2, r3
 8002b50:	00d3      	lsls	r3, r2, #3
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	440b      	add	r3, r1
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4403      	add	r3, r0
 8002b60:	3308      	adds	r3, #8
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe f8b9 	bl	8000cdc <__aeabi_i2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe ff4f 	bl	8001a10 <intUartSend>
		moveNode(direcciones[IZQUIERDA]);
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <ChooseNextNode+0x3b8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fc00 	bl	800337c <moveNode>
		rotateAxis(IZQUIERDA);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f001 f89f 	bl	8003cc0 <rotateAxis>
		return IZQUIERDA;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e121      	b.n	8002dca <ChooseNextNode+0x5fa>
 8002b86:	bf00      	nop
 8002b88:	200022d0 	.word	0x200022d0
 8002b8c:	2000246c 	.word	0x2000246c
 8002b90:	20002300 	.word	0x20002300
 8002b94:	2000027c 	.word	0x2000027c
 8002b98:	459c4000 	.word	0x459c4000
 8002b9c:	2000245c 	.word	0x2000245c
 8002ba0:	20002464 	.word	0x20002464
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 8002ba4:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <ChooseNextNode+0x604>)
 8002ba6:	68d8      	ldr	r0, [r3, #12]
 8002ba8:	4c8b      	ldr	r4, [pc, #556]	; (8002dd8 <ChooseNextNode+0x608>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	0052      	lsls	r2, r2, #1
 8002bb2:	441a      	add	r2, r3
 8002bb4:	0053      	lsls	r3, r2, #1
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	440b      	add	r3, r1
 8002bbe:	015b      	lsls	r3, r3, #5
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4403      	add	r3, r0
 8002bc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 80ed 	bne.w	8002da8 <ChooseNextNode+0x5d8>
		TX_BUFFER[0] = 'D';
 8002bce:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <ChooseNextNode+0x60c>)
 8002bd0:	2244      	movs	r2, #68	; 0x44
 8002bd2:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002bd4:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <ChooseNextNode+0x60c>)
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002bda:	2364      	movs	r3, #100	; 0x64
 8002bdc:	2202      	movs	r2, #2
 8002bde:	497f      	ldr	r1, [pc, #508]	; (8002ddc <ChooseNextNode+0x60c>)
 8002be0:	487f      	ldr	r0, [pc, #508]	; (8002de0 <ChooseNextNode+0x610>)
 8002be2:	f004 fe68 	bl	80078b6 <HAL_UART_Transmit>

		if (Map[x][y].visitado > 1) {
 8002be6:	487c      	ldr	r0, [pc, #496]	; (8002dd8 <ChooseNextNode+0x608>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	461a      	mov	r2, r3
 8002bee:	0052      	lsls	r2, r2, #1
 8002bf0:	441a      	add	r2, r3
 8002bf2:	00d3      	lsls	r3, r2, #3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	440b      	add	r3, r1
 8002bfc:	01db      	lsls	r3, r3, #7
 8002bfe:	4413      	add	r3, r2
 8002c00:	4403      	add	r3, r0
 8002c02:	3310      	adds	r3, #16
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	dd06      	ble.n	8002c18 <ChooseNextNode+0x448>
			EliminateNode(x, y);
 8002c0a:	6839      	ldr	r1, [r7, #0]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f8ef 	bl	8002df0 <EliminateNode>
			intUartSend(5000);
 8002c12:	4874      	ldr	r0, [pc, #464]	; (8002de4 <ChooseNextNode+0x614>)
 8002c14:	f7fe fefc 	bl	8001a10 <intUartSend>
		}
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002c18:	4b6e      	ldr	r3, [pc, #440]	; (8002dd4 <ChooseNextNode+0x604>)
 8002c1a:	68d8      	ldr	r0, [r3, #12]
 8002c1c:	4c6e      	ldr	r4, [pc, #440]	; (8002dd8 <ChooseNextNode+0x608>)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	461a      	mov	r2, r3
 8002c24:	0052      	lsls	r2, r2, #1
 8002c26:	441a      	add	r2, r3
 8002c28:	0053      	lsls	r3, r2, #1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	440b      	add	r3, r1
 8002c32:	015b      	lsls	r3, r3, #5
 8002c34:	4413      	add	r3, r2
 8002c36:	4403      	add	r3, r0
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <ChooseNextNode+0x604>)
 8002c40:	6898      	ldr	r0, [r3, #8]
 8002c42:	4c65      	ldr	r4, [pc, #404]	; (8002dd8 <ChooseNextNode+0x608>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	0052      	lsls	r2, r2, #1
 8002c4c:	441a      	add	r2, r3
 8002c4e:	0053      	lsls	r3, r2, #1
 8002c50:	461a      	mov	r2, r3
 8002c52:	460b      	mov	r3, r1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	440b      	add	r3, r1
 8002c58:	015b      	lsls	r3, r3, #5
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4403      	add	r3, r0
 8002c5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d02b      	beq.n	8002cbe <ChooseNextNode+0x4ee>
			intUartSend(Map[x][y].Lados[direcciones[ATRAS]]);
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <ChooseNextNode+0x604>)
 8002c68:	6898      	ldr	r0, [r3, #8]
 8002c6a:	4c5b      	ldr	r4, [pc, #364]	; (8002dd8 <ChooseNextNode+0x608>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	461a      	mov	r2, r3
 8002c72:	0052      	lsls	r2, r2, #1
 8002c74:	441a      	add	r2, r3
 8002c76:	0053      	lsls	r3, r2, #1
 8002c78:	461a      	mov	r2, r3
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	440b      	add	r3, r1
 8002c80:	015b      	lsls	r3, r3, #5
 8002c82:	4413      	add	r3, r2
 8002c84:	4403      	add	r3, r0
 8002c86:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f826 	bl	8000cdc <__aeabi_i2f>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe febc 	bl	8001a10 <intUartSend>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <ChooseNextNode+0x604>)
 8002c9a:	6898      	ldr	r0, [r3, #8]
 8002c9c:	4c4e      	ldr	r4, [pc, #312]	; (8002dd8 <ChooseNextNode+0x608>)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	0052      	lsls	r2, r2, #1
 8002ca6:	441a      	add	r2, r3
 8002ca8:	0053      	lsls	r3, r2, #1
 8002caa:	461a      	mov	r2, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	440b      	add	r3, r1
 8002cb2:	015b      	lsls	r3, r3, #5
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4403      	add	r3, r0
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		last.x = actual.x;
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <ChooseNextNode+0x618>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <ChooseNextNode+0x61c>)
 8002cc4:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <ChooseNextNode+0x618>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a48      	ldr	r2, [pc, #288]	; (8002dec <ChooseNextNode+0x61c>)
 8002ccc:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002cce:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <ChooseNextNode+0x618>)
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <ChooseNextNode+0x618>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4840      	ldr	r0, [pc, #256]	; (8002dd8 <ChooseNextNode+0x608>)
 8002cd8:	461a      	mov	r2, r3
 8002cda:	0052      	lsls	r2, r2, #1
 8002cdc:	441a      	add	r2, r3
 8002cde:	00d3      	lsls	r3, r2, #3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	440b      	add	r3, r1
 8002ce8:	01db      	lsls	r3, r3, #7
 8002cea:	4413      	add	r3, r2
 8002cec:	4403      	add	r3, r0
 8002cee:	330c      	adds	r3, #12
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fff2 	bl	8000cdc <__aeabi_i2f>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fe88 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <ChooseNextNode+0x618>)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <ChooseNextNode+0x618>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4833      	ldr	r0, [pc, #204]	; (8002dd8 <ChooseNextNode+0x608>)
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	441a      	add	r2, r3
 8002d10:	00d3      	lsls	r3, r2, #3
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	01db      	lsls	r3, r3, #7
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4403      	add	r3, r0
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ffda 	bl	8000cdc <__aeabi_i2f>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fe70 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <ChooseNextNode+0x618>)
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <ChooseNextNode+0x618>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4827      	ldr	r0, [pc, #156]	; (8002dd8 <ChooseNextNode+0x608>)
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	0052      	lsls	r2, r2, #1
 8002d3e:	441a      	add	r2, r3
 8002d40:	00d3      	lsls	r3, r2, #3
 8002d42:	461a      	mov	r2, r3
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	01db      	lsls	r3, r3, #7
 8002d4c:	4413      	add	r3, r2
 8002d4e:	4403      	add	r3, r0
 8002d50:	3304      	adds	r3, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd ffc1 	bl	8000cdc <__aeabi_i2f>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fe57 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <ChooseNextNode+0x618>)
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <ChooseNextNode+0x618>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	481b      	ldr	r0, [pc, #108]	; (8002dd8 <ChooseNextNode+0x608>)
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	0052      	lsls	r2, r2, #1
 8002d70:	441a      	add	r2, r3
 8002d72:	00d3      	lsls	r3, r2, #3
 8002d74:	461a      	mov	r2, r3
 8002d76:	460b      	mov	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	01db      	lsls	r3, r3, #7
 8002d7e:	4413      	add	r3, r2
 8002d80:	4403      	add	r3, r0
 8002d82:	3308      	adds	r3, #8
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd ffa8 	bl	8000cdc <__aeabi_i2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fe3e 	bl	8001a10 <intUartSend>
		moveNode(direcciones[DERECHA]);
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <ChooseNextNode+0x604>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 faef 	bl	800337c <moveNode>
		rotateAxis(DERECHA);
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f000 ff8e 	bl	8003cc0 <rotateAxis>
		return DERECHA;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e010      	b.n	8002dca <ChooseNextNode+0x5fa>
	} else {
		TX_BUFFER[0] = 'O';
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <ChooseNextNode+0x60c>)
 8002daa:	224f      	movs	r2, #79	; 0x4f
 8002dac:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <ChooseNextNode+0x60c>)
 8002db0:	220a      	movs	r2, #10
 8002db2:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002db4:	2364      	movs	r3, #100	; 0x64
 8002db6:	2202      	movs	r2, #2
 8002db8:	4908      	ldr	r1, [pc, #32]	; (8002ddc <ChooseNextNode+0x60c>)
 8002dba:	4809      	ldr	r0, [pc, #36]	; (8002de0 <ChooseNextNode+0x610>)
 8002dbc:	f004 fd7b 	bl	80078b6 <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f84a 	bl	8002e5c <SearchAvailableNode>
 8002dc8:	4603      	mov	r3, r0
	}

}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200022d0 	.word	0x200022d0
 8002dd8:	2000246c 	.word	0x2000246c
 8002ddc:	20002300 	.word	0x20002300
 8002de0:	2000027c 	.word	0x2000027c
 8002de4:	459c4000 	.word	0x459c4000
 8002de8:	2000245c 	.word	0x2000245c
 8002dec:	20002464 	.word	0x20002464

08002df0 <EliminateNode>:
void EliminateNode(int x, int y) {
 8002df0:	b490      	push	{r4, r7}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
//Serial.println("Borro");
	Map[x][y].Lados[direcciones[ATRAS]] = 1;
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <EliminateNode+0x60>)
 8002dfc:	6898      	ldr	r0, [r3, #8]
 8002dfe:	4c15      	ldr	r4, [pc, #84]	; (8002e54 <EliminateNode+0x64>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	461a      	mov	r2, r3
 8002e06:	0052      	lsls	r2, r2, #1
 8002e08:	441a      	add	r2, r3
 8002e0a:	0053      	lsls	r3, r2, #1
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	460b      	mov	r3, r1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	440b      	add	r3, r1
 8002e14:	015b      	lsls	r3, r3, #5
 8002e16:	4413      	add	r3, r2
 8002e18:	4403      	add	r3, r0
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	Map[last.x][last.y].visitado = 0;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <EliminateNode+0x68>)
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <EliminateNode+0x68>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	480a      	ldr	r0, [pc, #40]	; (8002e54 <EliminateNode+0x64>)
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	441a      	add	r2, r3
 8002e30:	00d3      	lsls	r3, r2, #3
 8002e32:	461a      	mov	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	440b      	add	r3, r1
 8002e3a:	01db      	lsls	r3, r3, #7
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4403      	add	r3, r0
 8002e40:	3310      	adds	r3, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc90      	pop	{r4, r7}
 8002e4e:	4770      	bx	lr
 8002e50:	200022d0 	.word	0x200022d0
 8002e54:	2000246c 	.word	0x2000246c
 8002e58:	20002464 	.word	0x20002464

08002e5c <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002e66:	4ba1      	ldr	r3, [pc, #644]	; (80030ec <SearchAvailableNode+0x290>)
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	4ca1      	ldr	r4, [pc, #644]	; (80030f0 <SearchAvailableNode+0x294>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	0052      	lsls	r2, r2, #1
 8002e74:	441a      	add	r2, r3
 8002e76:	0053      	lsls	r3, r2, #1
 8002e78:	461a      	mov	r2, r3
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	440b      	add	r3, r1
 8002e80:	015b      	lsls	r3, r3, #5
 8002e82:	4413      	add	r3, r2
 8002e84:	4403      	add	r3, r0
 8002e86:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	f000 808b 	beq.w	8002fa6 <SearchAvailableNode+0x14a>
		//Serial.println("Adelante1");

		if (Map[x][y].visitado > 1) {
 8002e90:	4897      	ldr	r0, [pc, #604]	; (80030f0 <SearchAvailableNode+0x294>)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	0052      	lsls	r2, r2, #1
 8002e9a:	441a      	add	r2, r3
 8002e9c:	00d3      	lsls	r3, r2, #3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	440b      	add	r3, r1
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4403      	add	r3, r0
 8002eac:	3310      	adds	r3, #16
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	dd06      	ble.n	8002ec2 <SearchAvailableNode+0x66>
			EliminateNode(x, y);
 8002eb4:	6839      	ldr	r1, [r7, #0]
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff9a 	bl	8002df0 <EliminateNode>
			intUartSend(4000);
 8002ebc:	488d      	ldr	r0, [pc, #564]	; (80030f4 <SearchAvailableNode+0x298>)
 8002ebe:	f7fe fda7 	bl	8001a10 <intUartSend>
		}
		last.x = actual.x;
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a8d      	ldr	r2, [pc, #564]	; (80030fc <SearchAvailableNode+0x2a0>)
 8002ec8:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002eca:	4b8b      	ldr	r3, [pc, #556]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a8b      	ldr	r2, [pc, #556]	; (80030fc <SearchAvailableNode+0x2a0>)
 8002ed0:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002ed2:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4885      	ldr	r0, [pc, #532]	; (80030f0 <SearchAvailableNode+0x294>)
 8002edc:	461a      	mov	r2, r3
 8002ede:	0052      	lsls	r2, r2, #1
 8002ee0:	441a      	add	r2, r3
 8002ee2:	00d3      	lsls	r3, r2, #3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	4413      	add	r3, r2
 8002ef0:	4403      	add	r3, r0
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fef0 	bl	8000cdc <__aeabi_i2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fd86 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002f04:	4b7c      	ldr	r3, [pc, #496]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	4b7b      	ldr	r3, [pc, #492]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4878      	ldr	r0, [pc, #480]	; (80030f0 <SearchAvailableNode+0x294>)
 8002f0e:	461a      	mov	r2, r3
 8002f10:	0052      	lsls	r2, r2, #1
 8002f12:	441a      	add	r2, r3
 8002f14:	00d3      	lsls	r3, r2, #3
 8002f16:	461a      	mov	r2, r3
 8002f18:	460b      	mov	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	01db      	lsls	r3, r3, #7
 8002f20:	4413      	add	r3, r2
 8002f22:	4403      	add	r3, r0
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fed8 	bl	8000cdc <__aeabi_i2f>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fd6e 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002f34:	4b70      	ldr	r3, [pc, #448]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	486c      	ldr	r0, [pc, #432]	; (80030f0 <SearchAvailableNode+0x294>)
 8002f3e:	461a      	mov	r2, r3
 8002f40:	0052      	lsls	r2, r2, #1
 8002f42:	441a      	add	r2, r3
 8002f44:	00d3      	lsls	r3, r2, #3
 8002f46:	461a      	mov	r2, r3
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	01db      	lsls	r3, r3, #7
 8002f50:	4413      	add	r3, r2
 8002f52:	4403      	add	r3, r0
 8002f54:	3304      	adds	r3, #4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd febf 	bl	8000cdc <__aeabi_i2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fd55 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002f66:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <SearchAvailableNode+0x29c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4860      	ldr	r0, [pc, #384]	; (80030f0 <SearchAvailableNode+0x294>)
 8002f70:	461a      	mov	r2, r3
 8002f72:	0052      	lsls	r2, r2, #1
 8002f74:	441a      	add	r2, r3
 8002f76:	00d3      	lsls	r3, r2, #3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	440b      	add	r3, r1
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	4413      	add	r3, r2
 8002f84:	4403      	add	r3, r0
 8002f86:	3308      	adds	r3, #8
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fea6 	bl	8000cdc <__aeabi_i2f>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fd3c 	bl	8001a10 <intUartSend>
		moveNode(direcciones[ADELANTE]);
 8002f98:	4b54      	ldr	r3, [pc, #336]	; (80030ec <SearchAvailableNode+0x290>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f9ed 	bl	800337c <moveNode>

		return ADELANTE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e1dc      	b.n	8003360 <SearchAvailableNode+0x504>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <SearchAvailableNode+0x290>)
 8002fa8:	6858      	ldr	r0, [r3, #4]
 8002faa:	4c51      	ldr	r4, [pc, #324]	; (80030f0 <SearchAvailableNode+0x294>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	0052      	lsls	r2, r2, #1
 8002fb4:	441a      	add	r2, r3
 8002fb6:	0053      	lsls	r3, r2, #1
 8002fb8:	461a      	mov	r2, r3
 8002fba:	460b      	mov	r3, r1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	015b      	lsls	r3, r3, #5
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f000 8098 	beq.w	8003100 <SearchAvailableNode+0x2a4>
		//Serial.println("IZQUIERDA1");l
		//moveNode(IZQUIERDA);
		//rotateAxis(IZQUIERDA);
		if (Map[x][y].visitado > 1) {
 8002fd0:	4847      	ldr	r0, [pc, #284]	; (80030f0 <SearchAvailableNode+0x294>)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	0052      	lsls	r2, r2, #1
 8002fda:	441a      	add	r2, r3
 8002fdc:	00d3      	lsls	r3, r2, #3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	440b      	add	r3, r1
 8002fe6:	01db      	lsls	r3, r3, #7
 8002fe8:	4413      	add	r3, r2
 8002fea:	4403      	add	r3, r0
 8002fec:	3310      	adds	r3, #16
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	dd06      	ble.n	8003002 <SearchAvailableNode+0x1a6>
			EliminateNode(x, y);
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fefa 	bl	8002df0 <EliminateNode>
			intUartSend(4000);
 8002ffc:	483d      	ldr	r0, [pc, #244]	; (80030f4 <SearchAvailableNode+0x298>)
 8002ffe:	f7fe fd07 	bl	8001a10 <intUartSend>
		}
		last.x = actual.x;
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <SearchAvailableNode+0x29c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <SearchAvailableNode+0x2a0>)
 8003008:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <SearchAvailableNode+0x29c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a3b      	ldr	r2, [pc, #236]	; (80030fc <SearchAvailableNode+0x2a0>)
 8003010:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <SearchAvailableNode+0x29c>)
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <SearchAvailableNode+0x29c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4835      	ldr	r0, [pc, #212]	; (80030f0 <SearchAvailableNode+0x294>)
 800301c:	461a      	mov	r2, r3
 800301e:	0052      	lsls	r2, r2, #1
 8003020:	441a      	add	r2, r3
 8003022:	00d3      	lsls	r3, r2, #3
 8003024:	461a      	mov	r2, r3
 8003026:	460b      	mov	r3, r1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	440b      	add	r3, r1
 800302c:	01db      	lsls	r3, r3, #7
 800302e:	4413      	add	r3, r2
 8003030:	4403      	add	r3, r0
 8003032:	330c      	adds	r3, #12
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fe50 	bl	8000cdc <__aeabi_i2f>
 800303c:	4603      	mov	r3, r0
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fce6 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <SearchAvailableNode+0x29c>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <SearchAvailableNode+0x29c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4828      	ldr	r0, [pc, #160]	; (80030f0 <SearchAvailableNode+0x294>)
 800304e:	461a      	mov	r2, r3
 8003050:	0052      	lsls	r2, r2, #1
 8003052:	441a      	add	r2, r3
 8003054:	00d3      	lsls	r3, r2, #3
 8003056:	461a      	mov	r2, r3
 8003058:	460b      	mov	r3, r1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	01db      	lsls	r3, r3, #7
 8003060:	4413      	add	r3, r2
 8003062:	4403      	add	r3, r0
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fe38 	bl	8000cdc <__aeabi_i2f>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fcce 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <SearchAvailableNode+0x29c>)
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <SearchAvailableNode+0x29c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	481c      	ldr	r0, [pc, #112]	; (80030f0 <SearchAvailableNode+0x294>)
 800307e:	461a      	mov	r2, r3
 8003080:	0052      	lsls	r2, r2, #1
 8003082:	441a      	add	r2, r3
 8003084:	00d3      	lsls	r3, r2, #3
 8003086:	461a      	mov	r2, r3
 8003088:	460b      	mov	r3, r1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	440b      	add	r3, r1
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	4413      	add	r3, r2
 8003092:	4403      	add	r3, r0
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fe1f 	bl	8000cdc <__aeabi_i2f>
 800309e:	4603      	mov	r3, r0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fcb5 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <SearchAvailableNode+0x29c>)
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <SearchAvailableNode+0x29c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4810      	ldr	r0, [pc, #64]	; (80030f0 <SearchAvailableNode+0x294>)
 80030b0:	461a      	mov	r2, r3
 80030b2:	0052      	lsls	r2, r2, #1
 80030b4:	441a      	add	r2, r3
 80030b6:	00d3      	lsls	r3, r2, #3
 80030b8:	461a      	mov	r2, r3
 80030ba:	460b      	mov	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	440b      	add	r3, r1
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	4413      	add	r3, r2
 80030c4:	4403      	add	r3, r0
 80030c6:	3308      	adds	r3, #8
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fe06 	bl	8000cdc <__aeabi_i2f>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fc9c 	bl	8001a10 <intUartSend>
		moveNode(direcciones[IZQUIERDA]);
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <SearchAvailableNode+0x290>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f94d 	bl	800337c <moveNode>

		rotateAxis(IZQUIERDA);
 80030e2:	2001      	movs	r0, #1
 80030e4:	f000 fdec 	bl	8003cc0 <rotateAxis>
		return IZQUIERDA;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e139      	b.n	8003360 <SearchAvailableNode+0x504>
 80030ec:	200022d0 	.word	0x200022d0
 80030f0:	2000246c 	.word	0x2000246c
 80030f4:	457a0000 	.word	0x457a0000
 80030f8:	2000245c 	.word	0x2000245c
 80030fc:	20002464 	.word	0x20002464
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8003100:	4b99      	ldr	r3, [pc, #612]	; (8003368 <SearchAvailableNode+0x50c>)
 8003102:	68d8      	ldr	r0, [r3, #12]
 8003104:	4c99      	ldr	r4, [pc, #612]	; (800336c <SearchAvailableNode+0x510>)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	461a      	mov	r2, r3
 800310c:	0052      	lsls	r2, r2, #1
 800310e:	441a      	add	r2, r3
 8003110:	0053      	lsls	r3, r2, #1
 8003112:	461a      	mov	r2, r3
 8003114:	460b      	mov	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	015b      	lsls	r3, r3, #5
 800311c:	4413      	add	r3, r2
 800311e:	4403      	add	r3, r0
 8003120:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	f000 808e 	beq.w	8003246 <SearchAvailableNode+0x3ea>
		//Serial.println("DERECHA1");
		if (Map[x][y].visitado > 1) {
 800312a:	4890      	ldr	r0, [pc, #576]	; (800336c <SearchAvailableNode+0x510>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	461a      	mov	r2, r3
 8003132:	0052      	lsls	r2, r2, #1
 8003134:	441a      	add	r2, r3
 8003136:	00d3      	lsls	r3, r2, #3
 8003138:	461a      	mov	r2, r3
 800313a:	460b      	mov	r3, r1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	440b      	add	r3, r1
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	4413      	add	r3, r2
 8003144:	4403      	add	r3, r0
 8003146:	3310      	adds	r3, #16
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	dd06      	ble.n	800315c <SearchAvailableNode+0x300>
			EliminateNode(x, y);
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fe4d 	bl	8002df0 <EliminateNode>
			intUartSend(4000);
 8003156:	4886      	ldr	r0, [pc, #536]	; (8003370 <SearchAvailableNode+0x514>)
 8003158:	f7fe fc5a 	bl	8001a10 <intUartSend>
		}
		last.x = actual.x;
 800315c:	4b85      	ldr	r3, [pc, #532]	; (8003374 <SearchAvailableNode+0x518>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a85      	ldr	r2, [pc, #532]	; (8003378 <SearchAvailableNode+0x51c>)
 8003162:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8003164:	4b83      	ldr	r3, [pc, #524]	; (8003374 <SearchAvailableNode+0x518>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a83      	ldr	r2, [pc, #524]	; (8003378 <SearchAvailableNode+0x51c>)
 800316a:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <SearchAvailableNode+0x518>)
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <SearchAvailableNode+0x518>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	487d      	ldr	r0, [pc, #500]	; (800336c <SearchAvailableNode+0x510>)
 8003176:	461a      	mov	r2, r3
 8003178:	0052      	lsls	r2, r2, #1
 800317a:	441a      	add	r2, r3
 800317c:	00d3      	lsls	r3, r2, #3
 800317e:	461a      	mov	r2, r3
 8003180:	460b      	mov	r3, r1
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	440b      	add	r3, r1
 8003186:	01db      	lsls	r3, r3, #7
 8003188:	4413      	add	r3, r2
 800318a:	4403      	add	r3, r0
 800318c:	330c      	adds	r3, #12
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fda3 	bl	8000cdc <__aeabi_i2f>
 8003196:	4603      	mov	r3, r0
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fc39 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 800319e:	4b75      	ldr	r3, [pc, #468]	; (8003374 <SearchAvailableNode+0x518>)
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	4b74      	ldr	r3, [pc, #464]	; (8003374 <SearchAvailableNode+0x518>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4871      	ldr	r0, [pc, #452]	; (800336c <SearchAvailableNode+0x510>)
 80031a8:	461a      	mov	r2, r3
 80031aa:	0052      	lsls	r2, r2, #1
 80031ac:	441a      	add	r2, r3
 80031ae:	00d3      	lsls	r3, r2, #3
 80031b0:	461a      	mov	r2, r3
 80031b2:	460b      	mov	r3, r1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	440b      	add	r3, r1
 80031b8:	01db      	lsls	r3, r3, #7
 80031ba:	4413      	add	r3, r2
 80031bc:	4403      	add	r3, r0
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd fd8b 	bl	8000cdc <__aeabi_i2f>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe fc21 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80031ce:	4b69      	ldr	r3, [pc, #420]	; (8003374 <SearchAvailableNode+0x518>)
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	4b68      	ldr	r3, [pc, #416]	; (8003374 <SearchAvailableNode+0x518>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4865      	ldr	r0, [pc, #404]	; (800336c <SearchAvailableNode+0x510>)
 80031d8:	461a      	mov	r2, r3
 80031da:	0052      	lsls	r2, r2, #1
 80031dc:	441a      	add	r2, r3
 80031de:	00d3      	lsls	r3, r2, #3
 80031e0:	461a      	mov	r2, r3
 80031e2:	460b      	mov	r3, r1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	4403      	add	r3, r0
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd fd72 	bl	8000cdc <__aeabi_i2f>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fc08 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8003200:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <SearchAvailableNode+0x518>)
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <SearchAvailableNode+0x518>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4858      	ldr	r0, [pc, #352]	; (800336c <SearchAvailableNode+0x510>)
 800320a:	461a      	mov	r2, r3
 800320c:	0052      	lsls	r2, r2, #1
 800320e:	441a      	add	r2, r3
 8003210:	00d3      	lsls	r3, r2, #3
 8003212:	461a      	mov	r2, r3
 8003214:	460b      	mov	r3, r1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	440b      	add	r3, r1
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4413      	add	r3, r2
 800321e:	4403      	add	r3, r0
 8003220:	3308      	adds	r3, #8
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fd59 	bl	8000cdc <__aeabi_i2f>
 800322a:	4603      	mov	r3, r0
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fbef 	bl	8001a10 <intUartSend>
		moveNode(direcciones[DERECHA]);
 8003232:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <SearchAvailableNode+0x50c>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f8a0 	bl	800337c <moveNode>
		rotateAxis(DERECHA);
 800323c:	2003      	movs	r0, #3
 800323e:	f000 fd3f 	bl	8003cc0 <rotateAxis>
		return DERECHA;
 8003242:	2303      	movs	r3, #3
 8003244:	e08c      	b.n	8003360 <SearchAvailableNode+0x504>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 8003246:	4b48      	ldr	r3, [pc, #288]	; (8003368 <SearchAvailableNode+0x50c>)
 8003248:	6898      	ldr	r0, [r3, #8]
 800324a:	4c48      	ldr	r4, [pc, #288]	; (800336c <SearchAvailableNode+0x510>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	461a      	mov	r2, r3
 8003252:	0052      	lsls	r2, r2, #1
 8003254:	441a      	add	r2, r3
 8003256:	0053      	lsls	r3, r2, #1
 8003258:	461a      	mov	r2, r3
 800325a:	460b      	mov	r3, r1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	440b      	add	r3, r1
 8003260:	015b      	lsls	r3, r3, #5
 8003262:	4413      	add	r3, r2
 8003264:	4403      	add	r3, r0
 8003266:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d077      	beq.n	800335e <SearchAvailableNode+0x502>
		last.x = actual.x;
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <SearchAvailableNode+0x518>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a41      	ldr	r2, [pc, #260]	; (8003378 <SearchAvailableNode+0x51c>)
 8003274:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8003276:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <SearchAvailableNode+0x518>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a3f      	ldr	r2, [pc, #252]	; (8003378 <SearchAvailableNode+0x51c>)
 800327c:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <SearchAvailableNode+0x518>)
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <SearchAvailableNode+0x518>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4839      	ldr	r0, [pc, #228]	; (800336c <SearchAvailableNode+0x510>)
 8003288:	461a      	mov	r2, r3
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	441a      	add	r2, r3
 800328e:	00d3      	lsls	r3, r2, #3
 8003290:	461a      	mov	r2, r3
 8003292:	460b      	mov	r3, r1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	440b      	add	r3, r1
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	4413      	add	r3, r2
 800329c:	4403      	add	r3, r0
 800329e:	330c      	adds	r3, #12
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fd1a 	bl	8000cdc <__aeabi_i2f>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fbb0 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <SearchAvailableNode+0x518>)
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <SearchAvailableNode+0x518>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	482c      	ldr	r0, [pc, #176]	; (800336c <SearchAvailableNode+0x510>)
 80032ba:	461a      	mov	r2, r3
 80032bc:	0052      	lsls	r2, r2, #1
 80032be:	441a      	add	r2, r3
 80032c0:	00d3      	lsls	r3, r2, #3
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	440b      	add	r3, r1
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	4413      	add	r3, r2
 80032ce:	4403      	add	r3, r0
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fd02 	bl	8000cdc <__aeabi_i2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fb98 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80032e0:	4b24      	ldr	r3, [pc, #144]	; (8003374 <SearchAvailableNode+0x518>)
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <SearchAvailableNode+0x518>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4820      	ldr	r0, [pc, #128]	; (800336c <SearchAvailableNode+0x510>)
 80032ea:	461a      	mov	r2, r3
 80032ec:	0052      	lsls	r2, r2, #1
 80032ee:	441a      	add	r2, r3
 80032f0:	00d3      	lsls	r3, r2, #3
 80032f2:	461a      	mov	r2, r3
 80032f4:	460b      	mov	r3, r1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	4413      	add	r3, r2
 80032fe:	4403      	add	r3, r0
 8003300:	3304      	adds	r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fce9 	bl	8000cdc <__aeabi_i2f>
 800330a:	4603      	mov	r3, r0
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fb7f 	bl	8001a10 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <SearchAvailableNode+0x518>)
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <SearchAvailableNode+0x518>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4814      	ldr	r0, [pc, #80]	; (800336c <SearchAvailableNode+0x510>)
 800331c:	461a      	mov	r2, r3
 800331e:	0052      	lsls	r2, r2, #1
 8003320:	441a      	add	r2, r3
 8003322:	00d3      	lsls	r3, r2, #3
 8003324:	461a      	mov	r2, r3
 8003326:	460b      	mov	r3, r1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	01db      	lsls	r3, r3, #7
 800332e:	4413      	add	r3, r2
 8003330:	4403      	add	r3, r0
 8003332:	3308      	adds	r3, #8
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fcd0 	bl	8000cdc <__aeabi_i2f>
 800333c:	4603      	mov	r3, r0
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fb66 	bl	8001a10 <intUartSend>
		moveNode(direcciones[ATRAS]);
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <SearchAvailableNode+0x50c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f817 	bl	800337c <moveNode>

		rotateAxis(DERECHA);
 800334e:	2003      	movs	r0, #3
 8003350:	f000 fcb6 	bl	8003cc0 <rotateAxis>
		rotateAxis(DERECHA);
 8003354:	2003      	movs	r0, #3
 8003356:	f000 fcb3 	bl	8003cc0 <rotateAxis>
		return ATRAS;
 800335a:	2302      	movs	r3, #2
 800335c:	e000      	b.n	8003360 <SearchAvailableNode+0x504>
	}
	return 0;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}
 8003368:	200022d0 	.word	0x200022d0
 800336c:	2000246c 	.word	0x2000246c
 8003370:	457a0000 	.word	0x457a0000
 8003374:	2000245c 	.word	0x2000245c
 8003378:	20002464 	.word	0x20002464

0800337c <moveNode>:
void moveNode(int lado) {
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	switch (lado) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d822      	bhi.n	80033d0 <moveNode+0x54>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <moveNode+0x14>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033ad 	.word	0x080033ad
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033b9 	.word	0x080033b9
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		actual.y++;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <moveNode+0x60>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <moveNode+0x60>)
 80033a8:	6053      	str	r3, [r2, #4]
		//visual.y++;
		//}
		break;
 80033aa:	e011      	b.n	80033d0 <moveNode+0x54>
	case IZQUIERDA:
		//if (visual.x != 0) {
		actual.x--;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <moveNode+0x60>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <moveNode+0x60>)
 80033b4:	6013      	str	r3, [r2, #0]
		//visual.x--;
		//}
		break;
 80033b6:	e00b      	b.n	80033d0 <moveNode+0x54>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		actual.x++;
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <moveNode+0x60>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a07      	ldr	r2, [pc, #28]	; (80033dc <moveNode+0x60>)
 80033c0:	6013      	str	r3, [r2, #0]
		// visual.x++;
		// }
		break;
 80033c2:	e005      	b.n	80033d0 <moveNode+0x54>
	case ATRAS:
		// if (visual.y != 0) {
		actual.y--;
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <moveNode+0x60>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	4a04      	ldr	r2, [pc, #16]	; (80033dc <moveNode+0x60>)
 80033cc:	6053      	str	r3, [r2, #4]
		// visual.y--;
		// }

		break;
 80033ce:	bf00      	nop
	}
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000245c 	.word	0x2000245c

080033e0 <movementMachine>:
 offset = 30;
 }
 break;
 }
 }*/
void movementMachine(int move) {
 80033e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 80033ea:	4b89      	ldr	r3, [pc, #548]	; (8003610 <movementMachine+0x230>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	f200 83d5 	bhi.w	8003b9e <movementMachine+0x7be>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <movementMachine+0x1c>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003449 	.word	0x08003449
 8003400:	080037a7 	.word	0x080037a7
 8003404:	08003b17 	.word	0x08003b17
 8003408:	0800397f 	.word	0x0800397f
 800340c:	08003b9f 	.word	0x08003b9f
 8003410:	08003415 	.word	0x08003415
	case OFF:
		runMotor(OFF, MOTOR_A);
 8003414:	2100      	movs	r1, #0
 8003416:	2005      	movs	r0, #5
 8003418:	f000 fffc 	bl	8004414 <runMotor>
		runMotor(OFF, MOTOR_B);
 800341c:	2101      	movs	r1, #1
 800341e:	2005      	movs	r0, #5
 8003420:	f000 fff8 	bl	8004414 <runMotor>
		if (move != OFF) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b05      	cmp	r3, #5
 8003428:	f000 83b8 	beq.w	8003b9c <movementMachine+0x7bc>
			movementState = move;
 800342c:	4a78      	ldr	r2, [pc, #480]	; (8003610 <movementMachine+0x230>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6013      	str	r3, [r2, #0]
			if (move != ADELANTE) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 83b1 	beq.w	8003b9c <movementMachine+0x7bc>
				TIM3->CNT = 0;
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <movementMachine+0x234>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 0;
 8003440:	4b75      	ldr	r3, [pc, #468]	; (8003618 <movementMachine+0x238>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
			}
		//intUartSend(TIM3->CNT);
	}
	break;
 8003446:	e3a9      	b.n	8003b9c <movementMachine+0x7bc>
case ADELANTE:
	//TIM4->CCR3 = xSpeed;
	//TIM4->CCR4 = xSpeed;
	//intUartSend(calcularDistancia((TIM1->CNT)));
	intUartSend(TIM3->CNT);
 8003448:	4b72      	ldr	r3, [pc, #456]	; (8003614 <movementMachine+0x234>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fc41 	bl	8000cd4 <__aeabi_ui2f>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fadb 	bl	8001a10 <intUartSend>
	if ((calcularDistancia((TIM3->CNT)) < forwardChoice[choice] / 5 + offset)
 800345a:	4b6e      	ldr	r3, [pc, #440]	; (8003614 <movementMachine+0x234>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	4618      	mov	r0, r3
 8003460:	f000 ffb2 	bl	80043c8 <calcularDistancia>
 8003464:	4604      	mov	r4, r0
 8003466:	4b6d      	ldr	r3, [pc, #436]	; (800361c <movementMachine+0x23c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6d      	ldr	r2, [pc, #436]	; (8003620 <movementMachine+0x240>)
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <movementMachine+0x244>)
 8003472:	fb82 1203 	smull	r1, r2, r2, r3
 8003476:	1052      	asrs	r2, r2, #1
 8003478:	17db      	asrs	r3, r3, #31
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <movementMachine+0x248>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4413      	add	r3, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc2a 	bl	8000cdc <__aeabi_i2f>
 8003488:	4603      	mov	r3, r0
 800348a:	4619      	mov	r1, r3
 800348c:	4620      	mov	r0, r4
 800348e:	f7fd fe17 	bl	80010c0 <__aeabi_fcmplt>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d11e      	bne.n	80034d6 <movementMachine+0xf6>
			|| (calcularDistancia((TIM1->CNT))
 8003498:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <movementMachine+0x238>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ff93 	bl	80043c8 <calcularDistancia>
 80034a2:	4604      	mov	r4, r0
					< forwardChoice[choice] / 5 + offset) /*&& Sensors[2] > 5*/) {
 80034a4:	4b5d      	ldr	r3, [pc, #372]	; (800361c <movementMachine+0x23c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5d      	ldr	r2, [pc, #372]	; (8003620 <movementMachine+0x240>)
 80034aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ae:	4a5d      	ldr	r2, [pc, #372]	; (8003624 <movementMachine+0x244>)
 80034b0:	fb82 1203 	smull	r1, r2, r2, r3
 80034b4:	1052      	asrs	r2, r2, #1
 80034b6:	17db      	asrs	r3, r3, #31
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <movementMachine+0x248>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd fc0b 	bl	8000cdc <__aeabi_i2f>
 80034c6:	4603      	mov	r3, r0
			|| (calcularDistancia((TIM1->CNT))
 80034c8:	4619      	mov	r1, r3
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7fd fdf8 	bl	80010c0 <__aeabi_fcmplt>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d061      	beq.n	800359a <movementMachine+0x1ba>
		//moveStraight();
		StraightFlag = 1;
 80034d6:	4b55      	ldr	r3, [pc, #340]	; (800362c <movementMachine+0x24c>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]
		intUartSend(1);
 80034dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80034e0:	f7fe fa96 	bl	8001a10 <intUartSend>
		xSpeed = (calcularDistancia(TIM3->CNT) - offset)
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <movementMachine+0x234>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 ff6d 	bl	80043c8 <calcularDistancia>
 80034ee:	4604      	mov	r4, r0
 80034f0:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <movementMachine+0x248>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd fbf1 	bl	8000cdc <__aeabi_i2f>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4619      	mov	r1, r3
 80034fe:	4620      	mov	r0, r4
 8003500:	f7fd fb36 	bl	8000b70 <__aeabi_fsub>
 8003504:	4603      	mov	r3, r0
 8003506:	461c      	mov	r4, r3
				* (((baseChoice[choice])- ((baseChoice[choice]) / 3))
 8003508:	4b44      	ldr	r3, [pc, #272]	; (800361c <movementMachine+0x23c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a48      	ldr	r2, [pc, #288]	; (8003630 <movementMachine+0x250>)
 800350e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <movementMachine+0x23c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4946      	ldr	r1, [pc, #280]	; (8003630 <movementMachine+0x250>)
 8003518:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800351c:	4945      	ldr	r1, [pc, #276]	; (8003634 <movementMachine+0x254>)
 800351e:	fb81 0103 	smull	r0, r1, r1, r3
 8003522:	17db      	asrs	r3, r3, #31
 8003524:	1a5b      	subs	r3, r3, r1
 8003526:	441a      	add	r2, r3
						/ (forwardChoice[choice] / 5)) + (baseChoice[choice]) / 3;
 8003528:	4b3c      	ldr	r3, [pc, #240]	; (800361c <movementMachine+0x23c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	493c      	ldr	r1, [pc, #240]	; (8003620 <movementMachine+0x240>)
 800352e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003532:	493c      	ldr	r1, [pc, #240]	; (8003624 <movementMachine+0x244>)
 8003534:	fb81 0103 	smull	r0, r1, r1, r3
 8003538:	1049      	asrs	r1, r1, #1
 800353a:	17db      	asrs	r3, r3, #31
 800353c:	1acb      	subs	r3, r1, r3
 800353e:	fb92 f3f3 	sdiv	r3, r2, r3
				* (((baseChoice[choice])- ((baseChoice[choice]) / 3))
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fbca 	bl	8000cdc <__aeabi_i2f>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f7fd fc19 	bl	8000d84 <__aeabi_fmul>
 8003552:	4603      	mov	r3, r0
 8003554:	461c      	mov	r4, r3
						/ (forwardChoice[choice] / 5)) + (baseChoice[choice]) / 3;
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <movementMachine+0x23c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a35      	ldr	r2, [pc, #212]	; (8003630 <movementMachine+0x250>)
 800355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003560:	4a34      	ldr	r2, [pc, #208]	; (8003634 <movementMachine+0x254>)
 8003562:	fb82 1203 	smull	r1, r2, r2, r3
 8003566:	17db      	asrs	r3, r3, #31
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fbb6 	bl	8000cdc <__aeabi_i2f>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	4620      	mov	r0, r4
 8003576:	f7fd fafd 	bl	8000b74 <__addsf3>
 800357a:	4603      	mov	r3, r0
		xSpeed = (calcularDistancia(TIM3->CNT) - offset)
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fdc7 	bl	8001110 <__aeabi_f2iz>
 8003582:	4603      	mov	r3, r0
 8003584:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <movementMachine+0x258>)
 8003586:	6013      	str	r3, [r2, #0]
		runMotor(ADELANTE, MOTOR_A);
 8003588:	2100      	movs	r1, #0
 800358a:	2000      	movs	r0, #0
 800358c:	f000 ff42 	bl	8004414 <runMotor>
		runMotor(ADELANTE, MOTOR_B);
 8003590:	2101      	movs	r1, #1
 8003592:	2000      	movs	r0, #0
 8003594:	f000 ff3e 	bl	8004414 <runMotor>
 8003598:	e104      	b.n	80037a4 <movementMachine+0x3c4>
	} else if ((calcularDistancia((TIM3->CNT))
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <movementMachine+0x234>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ff12 	bl	80043c8 <calcularDistancia>
 80035a4:	4604      	mov	r4, r0
			< forwardChoice[choice] * (4 / 5) + offset)
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <movementMachine+0x248>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd fb96 	bl	8000cdc <__aeabi_i2f>
 80035b0:	4603      	mov	r3, r0
	} else if ((calcularDistancia((TIM3->CNT))
 80035b2:	4619      	mov	r1, r3
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7fd fd83 	bl	80010c0 <__aeabi_fcmplt>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d112      	bne.n	80035e6 <movementMachine+0x206>
			|| (calcularDistancia((TIM1->CNT))
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <movementMachine+0x238>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 feff 	bl	80043c8 <calcularDistancia>
 80035ca:	4604      	mov	r4, r0
					< forwardChoice[choice] * (4 / 5) + offset)) {
 80035cc:	4b16      	ldr	r3, [pc, #88]	; (8003628 <movementMachine+0x248>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fb83 	bl	8000cdc <__aeabi_i2f>
 80035d6:	4603      	mov	r3, r0
			|| (calcularDistancia((TIM1->CNT))
 80035d8:	4619      	mov	r1, r3
 80035da:	4620      	mov	r0, r4
 80035dc:	f7fd fd70 	bl	80010c0 <__aeabi_fcmplt>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02a      	beq.n	800363c <movementMachine+0x25c>
		xSpeed = baseChoice[choice];
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <movementMachine+0x23c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <movementMachine+0x250>)
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	4a11      	ldr	r2, [pc, #68]	; (8003638 <movementMachine+0x258>)
 80035f2:	6013      	str	r3, [r2, #0]
		runMotor(ADELANTE, MOTOR_A);
 80035f4:	2100      	movs	r1, #0
 80035f6:	2000      	movs	r0, #0
 80035f8:	f000 ff0c 	bl	8004414 <runMotor>
		runMotor(ADELANTE, MOTOR_B);
 80035fc:	2101      	movs	r1, #1
 80035fe:	2000      	movs	r0, #0
 8003600:	f000 ff08 	bl	8004414 <runMotor>
		intUartSend(2);
 8003604:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003608:	f7fe fa02 	bl	8001a10 <intUartSend>
 800360c:	e0ca      	b.n	80037a4 <movementMachine+0x3c4>
 800360e:	bf00      	nop
 8003610:	20000038 	.word	0x20000038
 8003614:	40000400 	.word	0x40000400
 8003618:	40012c00 	.word	0x40012c00
 800361c:	2000231c 	.word	0x2000231c
 8003620:	20000020 	.word	0x20000020
 8003624:	66666667 	.word	0x66666667
 8003628:	20002338 	.word	0x20002338
 800362c:	20003c98 	.word	0x20003c98
 8003630:	20000018 	.word	0x20000018
 8003634:	55555556 	.word	0x55555556
 8003638:	20003c9c 	.word	0x20003c9c
	} else if ((calcularDistancia((TIM3->CNT)) < forwardChoice[choice] + offset)
 800363c:	4bb8      	ldr	r3, [pc, #736]	; (8003920 <movementMachine+0x540>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fec1 	bl	80043c8 <calcularDistancia>
 8003646:	4604      	mov	r4, r0
 8003648:	4bb6      	ldr	r3, [pc, #728]	; (8003924 <movementMachine+0x544>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4ab6      	ldr	r2, [pc, #728]	; (8003928 <movementMachine+0x548>)
 800364e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003652:	4bb6      	ldr	r3, [pc, #728]	; (800392c <movementMachine+0x54c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fb3f 	bl	8000cdc <__aeabi_i2f>
 800365e:	4603      	mov	r3, r0
 8003660:	4619      	mov	r1, r3
 8003662:	4620      	mov	r0, r4
 8003664:	f7fd fd2c 	bl	80010c0 <__aeabi_fcmplt>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <movementMachine+0x2c0>
			|| (calcularDistancia((TIM1->CNT)) < forwardChoice[choice] + offset)) {
 800366e:	4bb0      	ldr	r3, [pc, #704]	; (8003930 <movementMachine+0x550>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fea8 	bl	80043c8 <calcularDistancia>
 8003678:	4604      	mov	r4, r0
 800367a:	4baa      	ldr	r3, [pc, #680]	; (8003924 <movementMachine+0x544>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4aaa      	ldr	r2, [pc, #680]	; (8003928 <movementMachine+0x548>)
 8003680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003684:	4ba9      	ldr	r3, [pc, #676]	; (800392c <movementMachine+0x54c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4413      	add	r3, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fb26 	bl	8000cdc <__aeabi_i2f>
 8003690:	4603      	mov	r3, r0
 8003692:	4619      	mov	r1, r3
 8003694:	4620      	mov	r0, r4
 8003696:	f7fd fd13 	bl	80010c0 <__aeabi_fcmplt>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d063      	beq.n	8003768 <movementMachine+0x388>
		xSpeed = baseChoice[choice]
 80036a0:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <movementMachine+0x544>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4aa3      	ldr	r2, [pc, #652]	; (8003934 <movementMachine+0x554>)
 80036a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- ((calcularDistancia((TIM1->CNT)) - offset)
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc feaa 	bl	8000404 <__aeabi_i2d>
 80036b0:	4604      	mov	r4, r0
 80036b2:	460d      	mov	r5, r1
 80036b4:	4b9e      	ldr	r3, [pc, #632]	; (8003930 <movementMachine+0x550>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fe85 	bl	80043c8 <calcularDistancia>
 80036be:	4606      	mov	r6, r0
 80036c0:	4b9a      	ldr	r3, [pc, #616]	; (800392c <movementMachine+0x54c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fb09 	bl	8000cdc <__aeabi_i2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4619      	mov	r1, r3
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7fd fa4e 	bl	8000b70 <__aeabi_fsub>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461e      	mov	r6, r3
						* (baseChoice[choice] / forwardChoice[choice])
 80036d8:	4b92      	ldr	r3, [pc, #584]	; (8003924 <movementMachine+0x544>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a95      	ldr	r2, [pc, #596]	; (8003934 <movementMachine+0x554>)
 80036de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036e2:	4b90      	ldr	r3, [pc, #576]	; (8003924 <movementMachine+0x544>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4990      	ldr	r1, [pc, #576]	; (8003928 <movementMachine+0x548>)
 80036e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd faf3 	bl	8000cdc <__aeabi_i2f>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4619      	mov	r1, r3
 80036fa:	4630      	mov	r0, r6
 80036fc:	f7fd fb42 	bl	8000d84 <__aeabi_fmul>
 8003700:	4603      	mov	r3, r0
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc fe90 	bl	8000428 <__aeabi_f2d>
 8003708:	4680      	mov	r8, r0
 800370a:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 800370c:	4b85      	ldr	r3, [pc, #532]	; (8003924 <movementMachine+0x544>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a88      	ldr	r2, [pc, #544]	; (8003934 <movementMachine+0x554>)
 8003712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fc fe74 	bl	8000404 <__aeabi_i2d>
 800371c:	a37e      	add	r3, pc, #504	; (adr r3, 8003918 <movementMachine+0x538>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fd f803 	bl	800072c <__aeabi_ddiv>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4640      	mov	r0, r8
 800372c:	4649      	mov	r1, r9
 800372e:	f7fc fd1b 	bl	8000168 <__aeabi_dsub>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
				- ((calcularDistancia((TIM1->CNT)) - offset)
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f7fc fd15 	bl	8000168 <__aeabi_dsub>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
		xSpeed = baseChoice[choice]
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f7fd f977 	bl	8000a38 <__aeabi_d2iz>
 800374a:	4603      	mov	r3, r0
 800374c:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <movementMachine+0x558>)
 800374e:	6013      	str	r3, [r2, #0]
		runMotor(ADELANTE, MOTOR_A);
 8003750:	2100      	movs	r1, #0
 8003752:	2000      	movs	r0, #0
 8003754:	f000 fe5e 	bl	8004414 <runMotor>
		runMotor(ADELANTE, MOTOR_B);
 8003758:	2101      	movs	r1, #1
 800375a:	2000      	movs	r0, #0
 800375c:	f000 fe5a 	bl	8004414 <runMotor>
		intUartSend(3);
 8003760:	4876      	ldr	r0, [pc, #472]	; (800393c <movementMachine+0x55c>)
 8003762:	f7fe f955 	bl	8001a10 <intUartSend>
 8003766:	e01d      	b.n	80037a4 <movementMachine+0x3c4>
	} else {
		StraightFlag = 0;
 8003768:	4b75      	ldr	r3, [pc, #468]	; (8003940 <movementMachine+0x560>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
		movimientoFlag = 1;
 800376e:	4b75      	ldr	r3, [pc, #468]	; (8003944 <movementMachine+0x564>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
		movementState = OFF;
 8003774:	4b74      	ldr	r3, [pc, #464]	; (8003948 <movementMachine+0x568>)
 8003776:	2205      	movs	r2, #5
 8003778:	601a      	str	r2, [r3, #0]
		runMotor(OFF, MOTOR_A);
 800377a:	2100      	movs	r1, #0
 800377c:	2005      	movs	r0, #5
 800377e:	f000 fe49 	bl	8004414 <runMotor>
		runMotor(OFF, MOTOR_B);
 8003782:	2101      	movs	r1, #1
 8003784:	2005      	movs	r0, #5
 8003786:	f000 fe45 	bl	8004414 <runMotor>
		/*TIM3->CNT = 0;
		 TIM1->CNT = 0;*/
		offset = calcularDistancia((TIM3->CNT));
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <movementMachine+0x540>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fe1a 	bl	80043c8 <calcularDistancia>
 8003794:	4603      	mov	r3, r0
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd fcba 	bl	8001110 <__aeabi_f2iz>
 800379c:	4603      	mov	r3, r0
 800379e:	4a63      	ldr	r2, [pc, #396]	; (800392c <movementMachine+0x54c>)
 80037a0:	6013      	str	r3, [r2, #0]
		//intUartSend(10);
	}
	break;
 80037a2:	e1fc      	b.n	8003b9e <movementMachine+0x7be>
 80037a4:	e1fb      	b.n	8003b9e <movementMachine+0x7be>
case IZQUIERDA:
	TIM4->CCR3 = baseChoice[choice]
 80037a6:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <movementMachine+0x544>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a62      	ldr	r2, [pc, #392]	; (8003934 <movementMachine+0x554>)
 80037ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			- (calcularDistancia((TIM3->CNT))
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fe27 	bl	8000404 <__aeabi_i2d>
 80037b6:	4604      	mov	r4, r0
 80037b8:	460d      	mov	r5, r1
 80037ba:	4b59      	ldr	r3, [pc, #356]	; (8003920 <movementMachine+0x540>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fe02 	bl	80043c8 <calcularDistancia>
 80037c4:	4606      	mov	r6, r0
					* (baseChoice[choice] / LeftChoice[choice])
 80037c6:	4b57      	ldr	r3, [pc, #348]	; (8003924 <movementMachine+0x544>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a5a      	ldr	r2, [pc, #360]	; (8003934 <movementMachine+0x554>)
 80037cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037d0:	4b54      	ldr	r3, [pc, #336]	; (8003924 <movementMachine+0x544>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	495d      	ldr	r1, [pc, #372]	; (800394c <movementMachine+0x56c>)
 80037d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037da:	fb92 f3f3 	sdiv	r3, r2, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fa7c 	bl	8000cdc <__aeabi_i2f>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4619      	mov	r1, r3
 80037e8:	4630      	mov	r0, r6
 80037ea:	f7fd facb 	bl	8000d84 <__aeabi_fmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fe19 	bl	8000428 <__aeabi_f2d>
 80037f6:	4680      	mov	r8, r0
 80037f8:	4689      	mov	r9, r1
					- baseChoice[choice] / 1.8);
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <movementMachine+0x544>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a4d      	ldr	r2, [pc, #308]	; (8003934 <movementMachine+0x554>)
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fdfd 	bl	8000404 <__aeabi_i2d>
 800380a:	a343      	add	r3, pc, #268	; (adr r3, 8003918 <movementMachine+0x538>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc ff8c 	bl	800072c <__aeabi_ddiv>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4640      	mov	r0, r8
 800381a:	4649      	mov	r1, r9
 800381c:	f7fc fca4 	bl	8000168 <__aeabi_dsub>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
			- (calcularDistancia((TIM3->CNT))
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	f7fc fc9e 	bl	8000168 <__aeabi_dsub>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
	TIM4->CCR3 = baseChoice[choice]
 8003830:	4c47      	ldr	r4, [pc, #284]	; (8003950 <movementMachine+0x570>)
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f927 	bl	8000a88 <__aeabi_d2uiz>
 800383a:	4603      	mov	r3, r0
 800383c:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM4->CCR4 = baseChoice[choice]
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <movementMachine+0x544>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <movementMachine+0x554>)
 8003844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			- (calcularDistancia((TIM3->CNT))
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fddb 	bl	8000404 <__aeabi_i2d>
 800384e:	4604      	mov	r4, r0
 8003850:	460d      	mov	r5, r1
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <movementMachine+0x540>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fdb6 	bl	80043c8 <calcularDistancia>
 800385c:	4606      	mov	r6, r0
					* (baseChoice[choice] / LeftChoice[choice])
 800385e:	4b31      	ldr	r3, [pc, #196]	; (8003924 <movementMachine+0x544>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <movementMachine+0x554>)
 8003864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <movementMachine+0x544>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <movementMachine+0x56c>)
 800386e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003872:	fb92 f3f3 	sdiv	r3, r2, r3
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fa30 	bl	8000cdc <__aeabi_i2f>
 800387c:	4603      	mov	r3, r0
 800387e:	4619      	mov	r1, r3
 8003880:	4630      	mov	r0, r6
 8003882:	f7fd fa7f 	bl	8000d84 <__aeabi_fmul>
 8003886:	4603      	mov	r3, r0
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fdcd 	bl	8000428 <__aeabi_f2d>
 800388e:	4680      	mov	r8, r0
 8003890:	4689      	mov	r9, r1
					- baseChoice[choice] / 1.8);
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <movementMachine+0x544>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a27      	ldr	r2, [pc, #156]	; (8003934 <movementMachine+0x554>)
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fdb1 	bl	8000404 <__aeabi_i2d>
 80038a2:	a31d      	add	r3, pc, #116	; (adr r3, 8003918 <movementMachine+0x538>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc ff40 	bl	800072c <__aeabi_ddiv>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4640      	mov	r0, r8
 80038b2:	4649      	mov	r1, r9
 80038b4:	f7fc fc58 	bl	8000168 <__aeabi_dsub>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
			- (calcularDistancia((TIM3->CNT))
 80038bc:	4620      	mov	r0, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	f7fc fc52 	bl	8000168 <__aeabi_dsub>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
	TIM4->CCR4 = baseChoice[choice]
 80038c8:	4c21      	ldr	r4, [pc, #132]	; (8003950 <movementMachine+0x570>)
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	f7fd f8db 	bl	8000a88 <__aeabi_d2uiz>
 80038d2:	4603      	mov	r3, r0
 80038d4:	6423      	str	r3, [r4, #64]	; 0x40
	//intUartSend((TIM3->CNT));
	if (calcularDistancia((TIM3->CNT)) < LeftChoice[choice]) {
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <movementMachine+0x540>)
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fd74 	bl	80043c8 <calcularDistancia>
 80038e0:	4604      	mov	r4, r0
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <movementMachine+0x544>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a19      	ldr	r2, [pc, #100]	; (800394c <movementMachine+0x56c>)
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd f9f5 	bl	8000cdc <__aeabi_i2f>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4619      	mov	r1, r3
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fd fbe2 	bl	80010c0 <__aeabi_fcmplt>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d028      	beq.n	8003954 <movementMachine+0x574>
		runMotor(ADELANTE, MOTOR_A);
 8003902:	2100      	movs	r1, #0
 8003904:	2000      	movs	r0, #0
 8003906:	f000 fd85 	bl	8004414 <runMotor>
		runMotor(ATRAS, MOTOR_B);
 800390a:	2101      	movs	r1, #1
 800390c:	2002      	movs	r0, #2
 800390e:	f000 fd81 	bl	8004414 <runMotor>
		TIM3->CNT = 0;
		TIM1->CNT = 0;
		offset = 0;
		//intUartSend(9);
	}
	break;
 8003912:	e144      	b.n	8003b9e <movementMachine+0x7be>
 8003914:	f3af 8000 	nop.w
 8003918:	cccccccd 	.word	0xcccccccd
 800391c:	3ffccccc 	.word	0x3ffccccc
 8003920:	40000400 	.word	0x40000400
 8003924:	2000231c 	.word	0x2000231c
 8003928:	20000020 	.word	0x20000020
 800392c:	20002338 	.word	0x20002338
 8003930:	40012c00 	.word	0x40012c00
 8003934:	20000018 	.word	0x20000018
 8003938:	20003c9c 	.word	0x20003c9c
 800393c:	40400000 	.word	0x40400000
 8003940:	20003c98 	.word	0x20003c98
 8003944:	20002330 	.word	0x20002330
 8003948:	20000038 	.word	0x20000038
 800394c:	20000030 	.word	0x20000030
 8003950:	40000800 	.word	0x40000800
		movementState = ADELANTE;
 8003954:	4b96      	ldr	r3, [pc, #600]	; (8003bb0 <movementMachine+0x7d0>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
		runMotor(OFF, MOTOR_A);
 800395a:	2100      	movs	r1, #0
 800395c:	2005      	movs	r0, #5
 800395e:	f000 fd59 	bl	8004414 <runMotor>
		runMotor(OFF, MOTOR_B);
 8003962:	2101      	movs	r1, #1
 8003964:	2005      	movs	r0, #5
 8003966:	f000 fd55 	bl	8004414 <runMotor>
		TIM3->CNT = 0;
 800396a:	4b92      	ldr	r3, [pc, #584]	; (8003bb4 <movementMachine+0x7d4>)
 800396c:	2200      	movs	r2, #0
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = 0;
 8003970:	4b91      	ldr	r3, [pc, #580]	; (8003bb8 <movementMachine+0x7d8>)
 8003972:	2200      	movs	r2, #0
 8003974:	625a      	str	r2, [r3, #36]	; 0x24
		offset = 0;
 8003976:	4b91      	ldr	r3, [pc, #580]	; (8003bbc <movementMachine+0x7dc>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
	break;
 800397c:	e10f      	b.n	8003b9e <movementMachine+0x7be>
case DERECHA:
	TIM4->CCR3 = baseChoice[choice]
 800397e:	4b90      	ldr	r3, [pc, #576]	; (8003bc0 <movementMachine+0x7e0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <movementMachine+0x7e4>)
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			- (calcularDistancia((TIM1->CNT))
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fd3b 	bl	8000404 <__aeabi_i2d>
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	4b89      	ldr	r3, [pc, #548]	; (8003bb8 <movementMachine+0x7d8>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fd16 	bl	80043c8 <calcularDistancia>
 800399c:	4606      	mov	r6, r0
					* (baseChoice[choice] / RightChoice[choice])
 800399e:	4b88      	ldr	r3, [pc, #544]	; (8003bc0 <movementMachine+0x7e0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a88      	ldr	r2, [pc, #544]	; (8003bc4 <movementMachine+0x7e4>)
 80039a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039a8:	4b85      	ldr	r3, [pc, #532]	; (8003bc0 <movementMachine+0x7e0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4986      	ldr	r1, [pc, #536]	; (8003bc8 <movementMachine+0x7e8>)
 80039ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f990 	bl	8000cdc <__aeabi_i2f>
 80039bc:	4603      	mov	r3, r0
 80039be:	4619      	mov	r1, r3
 80039c0:	4630      	mov	r0, r6
 80039c2:	f7fd f9df 	bl	8000d84 <__aeabi_fmul>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fd2d 	bl	8000428 <__aeabi_f2d>
 80039ce:	4680      	mov	r8, r0
 80039d0:	4689      	mov	r9, r1
					- baseChoice[choice] / 1.8);
 80039d2:	4b7b      	ldr	r3, [pc, #492]	; (8003bc0 <movementMachine+0x7e0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7b      	ldr	r2, [pc, #492]	; (8003bc4 <movementMachine+0x7e4>)
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fd11 	bl	8000404 <__aeabi_i2d>
 80039e2:	a371      	add	r3, pc, #452	; (adr r3, 8003ba8 <movementMachine+0x7c8>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fea0 	bl	800072c <__aeabi_ddiv>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4640      	mov	r0, r8
 80039f2:	4649      	mov	r1, r9
 80039f4:	f7fc fbb8 	bl	8000168 <__aeabi_dsub>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
			- (calcularDistancia((TIM1->CNT))
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc fbb2 	bl	8000168 <__aeabi_dsub>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
	TIM4->CCR3 = baseChoice[choice]
 8003a08:	4c70      	ldr	r4, [pc, #448]	; (8003bcc <movementMachine+0x7ec>)
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7fd f83b 	bl	8000a88 <__aeabi_d2uiz>
 8003a12:	4603      	mov	r3, r0
 8003a14:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM4->CCR4 = baseChoice[choice]
 8003a16:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <movementMachine+0x7e0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <movementMachine+0x7e4>)
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			- (calcularDistancia((TIM1->CNT))
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fcef 	bl	8000404 <__aeabi_i2d>
 8003a26:	4604      	mov	r4, r0
 8003a28:	460d      	mov	r5, r1
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <movementMachine+0x7d8>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fcca 	bl	80043c8 <calcularDistancia>
 8003a34:	4606      	mov	r6, r0
					* (baseChoice[choice] / RightChoice[choice])
 8003a36:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <movementMachine+0x7e0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a62      	ldr	r2, [pc, #392]	; (8003bc4 <movementMachine+0x7e4>)
 8003a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a40:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <movementMachine+0x7e0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4960      	ldr	r1, [pc, #384]	; (8003bc8 <movementMachine+0x7e8>)
 8003a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd f944 	bl	8000cdc <__aeabi_i2f>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f7fd f993 	bl	8000d84 <__aeabi_fmul>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc fce1 	bl	8000428 <__aeabi_f2d>
 8003a66:	4680      	mov	r8, r0
 8003a68:	4689      	mov	r9, r1
					- baseChoice[choice] / 1.8);
 8003a6a:	4b55      	ldr	r3, [pc, #340]	; (8003bc0 <movementMachine+0x7e0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a55      	ldr	r2, [pc, #340]	; (8003bc4 <movementMachine+0x7e4>)
 8003a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fcc5 	bl	8000404 <__aeabi_i2d>
 8003a7a:	a34b      	add	r3, pc, #300	; (adr r3, 8003ba8 <movementMachine+0x7c8>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fe54 	bl	800072c <__aeabi_ddiv>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4640      	mov	r0, r8
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	f7fc fb6c 	bl	8000168 <__aeabi_dsub>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
			- (calcularDistancia((TIM1->CNT))
 8003a94:	4620      	mov	r0, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	f7fc fb66 	bl	8000168 <__aeabi_dsub>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
	TIM4->CCR4 = baseChoice[choice]
 8003aa0:	4c4a      	ldr	r4, [pc, #296]	; (8003bcc <movementMachine+0x7ec>)
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f7fc ffef 	bl	8000a88 <__aeabi_d2uiz>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6423      	str	r3, [r4, #64]	; 0x40
	if (calcularDistancia((TIM1->CNT)) < RightChoice[choice]) {
 8003aae:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <movementMachine+0x7d8>)
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fc88 	bl	80043c8 <calcularDistancia>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <movementMachine+0x7e0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <movementMachine+0x7e8>)
 8003ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd f909 	bl	8000cdc <__aeabi_i2f>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4619      	mov	r1, r3
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fd faf6 	bl	80010c0 <__aeabi_fcmplt>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <movementMachine+0x70c>
		runMotor(ATRAS, MOTOR_A);
 8003ada:	2100      	movs	r1, #0
 8003adc:	2002      	movs	r0, #2
 8003ade:	f000 fc99 	bl	8004414 <runMotor>
		runMotor(ADELANTE, MOTOR_B);
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f000 fc95 	bl	8004414 <runMotor>
		TIM3->CNT = 0;
		TIM1->CNT = 0;
		offset = 0;
		//intUartSend(8);
	}
	break;
 8003aea:	e058      	b.n	8003b9e <movementMachine+0x7be>
		movementState = ADELANTE;
 8003aec:	4b30      	ldr	r3, [pc, #192]	; (8003bb0 <movementMachine+0x7d0>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
		runMotor(OFF, MOTOR_A);
 8003af2:	2100      	movs	r1, #0
 8003af4:	2005      	movs	r0, #5
 8003af6:	f000 fc8d 	bl	8004414 <runMotor>
		runMotor(OFF, MOTOR_B);
 8003afa:	2101      	movs	r1, #1
 8003afc:	2005      	movs	r0, #5
 8003afe:	f000 fc89 	bl	8004414 <runMotor>
		TIM3->CNT = 0;
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <movementMachine+0x7d4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = 0;
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <movementMachine+0x7d8>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
		offset = 0;
 8003b0e:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <movementMachine+0x7dc>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
	break;
 8003b14:	e043      	b.n	8003b9e <movementMachine+0x7be>
case ATRAS:
	TIM4->CCR3 = baseChoice[choice];
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <movementMachine+0x7e0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <movementMachine+0x7e4>)
 8003b1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b20:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <movementMachine+0x7ec>)
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = baseChoice[choice];
 8003b24:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <movementMachine+0x7e0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <movementMachine+0x7e4>)
 8003b2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b2e:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <movementMachine+0x7ec>)
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
	if (calcularDistancia((TIM1->CNT)) < RightChoice[choice] * 2) {
 8003b32:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <movementMachine+0x7d8>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fc46 	bl	80043c8 <calcularDistancia>
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <movementMachine+0x7e0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <movementMachine+0x7e8>)
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd f8c6 	bl	8000cdc <__aeabi_i2f>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4619      	mov	r1, r3
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7fd fab3 	bl	80010c0 <__aeabi_fcmplt>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <movementMachine+0x792>
		runMotor(ATRAS, MOTOR_A);
 8003b60:	2100      	movs	r1, #0
 8003b62:	2002      	movs	r0, #2
 8003b64:	f000 fc56 	bl	8004414 <runMotor>
		runMotor(ADELANTE, MOTOR_B);
 8003b68:	2101      	movs	r1, #1
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f000 fc52 	bl	8004414 <runMotor>
		TIM3->CNT = 0;
		TIM1->CNT = 0;
		offset = 0;
		//intUartSend(7);
	}
	break;
 8003b70:	e015      	b.n	8003b9e <movementMachine+0x7be>
		movementState = ADELANTE;
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <movementMachine+0x7d0>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
		runMotor(OFF, MOTOR_A);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	2005      	movs	r0, #5
 8003b7c:	f000 fc4a 	bl	8004414 <runMotor>
		runMotor(OFF, MOTOR_B);
 8003b80:	2101      	movs	r1, #1
 8003b82:	2005      	movs	r0, #5
 8003b84:	f000 fc46 	bl	8004414 <runMotor>
		TIM3->CNT = 0;
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <movementMachine+0x7d4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = 0;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <movementMachine+0x7d8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
		offset = 0;
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <movementMachine+0x7dc>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
	break;
 8003b9a:	e000      	b.n	8003b9e <movementMachine+0x7be>
	break;
 8003b9c:	bf00      	nop

	}
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ba8:	cccccccd 	.word	0xcccccccd
 8003bac:	3ffccccc 	.word	0x3ffccccc
 8003bb0:	20000038 	.word	0x20000038
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	20002338 	.word	0x20002338
 8003bc0:	2000231c 	.word	0x2000231c
 8003bc4:	20000018 	.word	0x20000018
 8003bc8:	20000028 	.word	0x20000028
 8003bcc:	40000800 	.word	0x40000800

08003bd0 <CreateNode>:

void CreateNode(int x, int y) {
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	Map[x][y].Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors);
 8003bda:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <CreateNode+0xe4>)
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f000 fc85 	bl	80044ec <lecturaSensor>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <CreateNode+0xe8>)
 8003be6:	6814      	ldr	r4, [r2, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fa91 	bl	8001110 <__aeabi_f2iz>
 8003bee:	4d33      	ldr	r5, [pc, #204]	; (8003cbc <CreateNode+0xec>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	0052      	lsls	r2, r2, #1
 8003bf8:	441a      	add	r2, r3
 8003bfa:	0053      	lsls	r3, r2, #1
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	460b      	mov	r3, r1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	440b      	add	r3, r1
 8003c04:	015b      	lsls	r3, r3, #5
 8003c06:	4413      	add	r3, r2
 8003c08:	4423      	add	r3, r4
 8003c0a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors);
 8003c0e:	4929      	ldr	r1, [pc, #164]	; (8003cb4 <CreateNode+0xe4>)
 8003c10:	2001      	movs	r0, #1
 8003c12:	f000 fc6b 	bl	80044ec <lecturaSensor>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <CreateNode+0xe8>)
 8003c1a:	6854      	ldr	r4, [r2, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd fa77 	bl	8001110 <__aeabi_f2iz>
 8003c22:	4d26      	ldr	r5, [pc, #152]	; (8003cbc <CreateNode+0xec>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	0052      	lsls	r2, r2, #1
 8003c2c:	441a      	add	r2, r3
 8003c2e:	0053      	lsls	r3, r2, #1
 8003c30:	461a      	mov	r2, r3
 8003c32:	460b      	mov	r3, r1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4423      	add	r3, r4
 8003c3e:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors);
 8003c42:	491c      	ldr	r1, [pc, #112]	; (8003cb4 <CreateNode+0xe4>)
 8003c44:	2003      	movs	r0, #3
 8003c46:	f000 fc51 	bl	80044ec <lecturaSensor>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <CreateNode+0xe8>)
 8003c4e:	68d4      	ldr	r4, [r2, #12]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fa5d 	bl	8001110 <__aeabi_f2iz>
 8003c56:	4d19      	ldr	r5, [pc, #100]	; (8003cbc <CreateNode+0xec>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	0052      	lsls	r2, r2, #1
 8003c60:	441a      	add	r2, r3
 8003c62:	0053      	lsls	r3, r2, #1
 8003c64:	461a      	mov	r2, r3
 8003c66:	460b      	mov	r3, r1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	440b      	add	r3, r1
 8003c6c:	015b      	lsls	r3, r3, #5
 8003c6e:	4413      	add	r3, r2
 8003c70:	4423      	add	r3, r4
 8003c72:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	Map[x][y].Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors);
 8003c76:	490f      	ldr	r1, [pc, #60]	; (8003cb4 <CreateNode+0xe4>)
 8003c78:	2002      	movs	r0, #2
 8003c7a:	f000 fc37 	bl	80044ec <lecturaSensor>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a0d      	ldr	r2, [pc, #52]	; (8003cb8 <CreateNode+0xe8>)
 8003c82:	6894      	ldr	r4, [r2, #8]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd fa43 	bl	8001110 <__aeabi_f2iz>
 8003c8a:	4d0c      	ldr	r5, [pc, #48]	; (8003cbc <CreateNode+0xec>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	461a      	mov	r2, r3
 8003c92:	0052      	lsls	r2, r2, #1
 8003c94:	441a      	add	r2, r3
 8003c96:	0053      	lsls	r3, r2, #1
 8003c98:	461a      	mov	r2, r3
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	440b      	add	r3, r1
 8003ca0:	015b      	lsls	r3, r3, #5
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4423      	add	r3, r4
 8003ca6:	f845 0023 	str.w	r0, [r5, r3, lsl #2]

}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200022c0 	.word	0x200022c0
 8003cb8:	200022d0 	.word	0x200022d0
 8003cbc:	2000246c 	.word	0x2000246c

08003cc0 <rotateAxis>:

void rotateAxis(int direccion) {
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	switch (direccion) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d021      	beq.n	8003d12 <rotateAxis+0x52>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d13c      	bne.n	8003d4e <rotateAxis+0x8e>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	e017      	b.n	8003d0a <rotateAxis+0x4a>
			direcciones[i] = direcciones[i] - 1;
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <rotateAxis+0x98>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	1e5a      	subs	r2, r3, #1
 8003ce4:	491c      	ldr	r1, [pc, #112]	; (8003d58 <rotateAxis+0x98>)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[i] == -1) {
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <rotateAxis+0x98>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d104      	bne.n	8003d04 <rotateAxis+0x44>
				direcciones[i] = 3;
 8003cfa:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <rotateAxis+0x98>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2103      	movs	r1, #3
 8003d00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	dde4      	ble.n	8003cda <rotateAxis+0x1a>
			}
		}
		break;
 8003d10:	e01d      	b.n	8003d4e <rotateAxis+0x8e>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	e016      	b.n	8003d46 <rotateAxis+0x86>
			direcciones[j] = direcciones[j] + 1;
 8003d18:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <rotateAxis+0x98>)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	490d      	ldr	r1, [pc, #52]	; (8003d58 <rotateAxis+0x98>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (direcciones[j] == 4) {
 8003d2a:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <rotateAxis+0x98>)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d104      	bne.n	8003d40 <rotateAxis+0x80>
				direcciones[j] = 0;
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <rotateAxis+0x98>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 4; j++) {
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	dde5      	ble.n	8003d18 <rotateAxis+0x58>
			}
		}
		break;
 8003d4c:	bf00      	nop
	}
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	200022d0 	.word	0x200022d0

08003d5c <resetAxis>:

void resetAxis() {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	e007      	b.n	8003d78 <resetAxis+0x1c>
		direcciones[i] = i;
 8003d68:	4908      	ldr	r1, [pc, #32]	; (8003d8c <resetAxis+0x30>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3301      	adds	r3, #1
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	ddf4      	ble.n	8003d68 <resetAxis+0xc>
	}
}
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200022d0 	.word	0x200022d0

08003d90 <PrintMap>:

void PrintMap() {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	e032      	b.n	8003e02 <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	e020      	b.n	8003de4 <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 8003da2:	481c      	ldr	r0, [pc, #112]	; (8003e14 <PrintMap+0x84>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	461a      	mov	r2, r3
 8003daa:	0052      	lsls	r2, r2, #1
 8003dac:	441a      	add	r2, r3
 8003dae:	00d3      	lsls	r3, r2, #3
 8003db0:	461a      	mov	r2, r3
 8003db2:	460b      	mov	r3, r1
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	440b      	add	r3, r1
 8003db8:	01db      	lsls	r3, r3, #7
 8003dba:	4413      	add	r3, r2
 8003dbc:	4403      	add	r3, r0
 8003dbe:	3310      	adds	r3, #16
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3330      	adds	r3, #48	; 0x30
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <PrintMap+0x88>)
 8003dca:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <PrintMap+0x88>)
 8003dce:	2220      	movs	r2, #32
 8003dd0:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8003dd2:	2364      	movs	r3, #100	; 0x64
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	4910      	ldr	r1, [pc, #64]	; (8003e18 <PrintMap+0x88>)
 8003dd8:	4810      	ldr	r0, [pc, #64]	; (8003e1c <PrintMap+0x8c>)
 8003dda:	f003 fd6c 	bl	80078b6 <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	dddb      	ble.n	8003da2 <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <PrintMap+0x88>)
 8003dec:	220a      	movs	r2, #10
 8003dee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8003df0:	2364      	movs	r3, #100	; 0x64
 8003df2:	2201      	movs	r2, #1
 8003df4:	4908      	ldr	r1, [pc, #32]	; (8003e18 <PrintMap+0x88>)
 8003df6:	4809      	ldr	r0, [pc, #36]	; (8003e1c <PrintMap+0x8c>)
 8003df8:	f003 fd5d 	bl	80078b6 <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	ddc9      	ble.n	8003d9c <PrintMap+0xc>
	}
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000246c 	.word	0x2000246c
 8003e18:	20002300 	.word	0x20002300
 8003e1c:	2000027c 	.word	0x2000027c

08003e20 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 100; i++) {
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e029      	b.n	8003e82 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003e34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e38:	4926      	ldr	r1, [pc, #152]	; (8003ed4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3301      	adds	r3, #1
 8003e46:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003e48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e4c:	4922      	ldr	r1, [pc, #136]	; (8003ed8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003e5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e60:	491e      	ldr	r1, [pc, #120]	; (8003edc <HAL_ADC_ConvCpltCallback+0xbc>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	3303      	adds	r3, #3
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e74:	491a      	ldr	r1, [pc, #104]	; (8003ee0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b63      	cmp	r3, #99	; 0x63
 8003e86:	ddd2      	ble.n	8003e2e <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(100, CNY70);
 8003e88:	4912      	ldr	r1, [pc, #72]	; (8003ed4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003e8a:	2064      	movs	r0, #100	; 0x64
 8003e8c:	f000 fc00 	bl	8004690 <lecturaCNY70>
 8003e90:	4603      	mov	r3, r0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc ff22 	bl	8000cdc <__aeabi_i2f>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003e9c:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(100, SHARP_1);
 8003e9e:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003ea0:	2064      	movs	r0, #100	; 0x64
 8003ea2:	f000 fb75 	bl	8004590 <lecSensor>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003eaa:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(100, SHARP_2);
 8003eac:	490b      	ldr	r1, [pc, #44]	; (8003edc <HAL_ADC_ConvCpltCallback+0xbc>)
 8003eae:	2064      	movs	r0, #100	; 0x64
 8003eb0:	f000 fb6e 	bl	8004590 <lecSensor>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003eb8:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(100, SHARP_3);
 8003eba:	4909      	ldr	r1, [pc, #36]	; (8003ee0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	f000 fb67 	bl	8004590 <lecSensor>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003ec6:	60d3      	str	r3, [r2, #12]

}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200002c0 	.word	0x200002c0
 8003ed4:	200012c0 	.word	0x200012c0
 8003ed8:	200016c0 	.word	0x200016c0
 8003edc:	20001ac0 	.word	0x20001ac0
 8003ee0:	20001ec0 	.word	0x20001ec0
 8003ee4:	200022c0 	.word	0x200022c0

08003ee8 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	69b9      	ldr	r1, [r7, #24]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	1a8a      	subs	r2, r1, r2
 8003f02:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	4413      	add	r3, r2
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <constrain>:

int constrain(int x, int a, int b) {
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
	if (x < a) {
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	da01      	bge.n	8003f36 <constrain+0x18>
		return a;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	e006      	b.n	8003f44 <constrain+0x26>
	} else if (b < x) {
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	da01      	bge.n	8003f42 <constrain+0x24>
		return b;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	e000      	b.n	8003f44 <constrain+0x26>
	} else
		return x;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
	...

08003f50 <wallDetector>:

int wallDetector(int n, int d) {
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	switch (d) {
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d01b      	beq.n	8003f98 <wallDetector+0x48>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	dc21      	bgt.n	8003faa <wallDetector+0x5a>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <wallDetector+0x24>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d009      	beq.n	8003f86 <wallDetector+0x36>
 8003f72:	e01a      	b.n	8003faa <wallDetector+0x5a>
	case ADELANTE:
		if (n < MaxCenterDistance) {
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <wallDetector+0x68>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	da01      	bge.n	8003f82 <wallDetector+0x32>
			return 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e014      	b.n	8003fac <wallDetector+0x5c>
		} else {
			return 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e012      	b.n	8003fac <wallDetector+0x5c>
		}
		break;

	case IZQUIERDA:
		if (n < MaxLeftDistance) {
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <wallDetector+0x6c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	da01      	bge.n	8003f94 <wallDetector+0x44>
			return 1;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e00b      	b.n	8003fac <wallDetector+0x5c>
		} else {
			return 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e009      	b.n	8003fac <wallDetector+0x5c>
		}
		break;
	case DERECHA:
		if (n < MaxRightDistance) {
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <wallDetector+0x70>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	da01      	bge.n	8003fa6 <wallDetector+0x56>
			return 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e002      	b.n	8003fac <wallDetector+0x5c>
		} else {
			return 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <wallDetector+0x5c>
		}
		break;
	default:
		return 0;
 8003faa:	2300      	movs	r3, #0
		break;
	}
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	200022f4 	.word	0x200022f4
 8003fbc:	200022f0 	.word	0x200022f0
 8003fc0:	200022ec 	.word	0x200022ec

08003fc4 <moveStraight>:

void moveStraight() {
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af02      	add	r7, sp, #8
	 error = Sensors[1] - CenterDistanceRight;
	 } else {
	 //intUartSend(3);
	 error = 0;
	 }*/
	error = calcularDistancia(TIM1->CNT) - calcularDistancia(TIM3->CNT);
 8003fca:	4b8a      	ldr	r3, [pc, #552]	; (80041f4 <moveStraight+0x230>)
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9fa 	bl	80043c8 <calcularDistancia>
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <moveStraight+0x234>)
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f9f4 	bl	80043c8 <calcularDistancia>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7fc fdc3 	bl	8000b70 <__aeabi_fsub>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b83      	ldr	r3, [pc, #524]	; (80041fc <moveStraight+0x238>)
 8003ff0:	601a      	str	r2, [r3, #0]
	timePrev = timeNow;
 8003ff2:	4b83      	ldr	r3, [pc, #524]	; (8004200 <moveStraight+0x23c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a83      	ldr	r2, [pc, #524]	; (8004204 <moveStraight+0x240>)
 8003ff8:	6013      	str	r3, [r2, #0]
	timeNow = HAL_GetTick();
 8003ffa:	f000 fe05 	bl	8004c08 <HAL_GetTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fe67 	bl	8000cd4 <__aeabi_ui2f>
 8004006:	4603      	mov	r3, r0
 8004008:	4a7d      	ldr	r2, [pc, #500]	; (8004200 <moveStraight+0x23c>)
 800400a:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNow - timePrev) / 1000;
 800400c:	4b7c      	ldr	r3, [pc, #496]	; (8004200 <moveStraight+0x23c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7c      	ldr	r2, [pc, #496]	; (8004204 <moveStraight+0x240>)
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fdaa 	bl	8000b70 <__aeabi_fsub>
 800401c:	4603      	mov	r3, r0
 800401e:	497a      	ldr	r1, [pc, #488]	; (8004208 <moveStraight+0x244>)
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc ff63 	bl	8000eec <__aeabi_fdiv>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	4b78      	ldr	r3, [pc, #480]	; (800420c <moveStraight+0x248>)
 800402c:	601a      	str	r2, [r3, #0]
	pidD = KD * ((error - previousError) / elapsedTime);
 800402e:	4b73      	ldr	r3, [pc, #460]	; (80041fc <moveStraight+0x238>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a77      	ldr	r2, [pc, #476]	; (8004210 <moveStraight+0x24c>)
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc fd99 	bl	8000b70 <__aeabi_fsub>
 800403e:	4603      	mov	r3, r0
 8004040:	461a      	mov	r2, r3
 8004042:	4b72      	ldr	r3, [pc, #456]	; (800420c <moveStraight+0x248>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f7fc ff4f 	bl	8000eec <__aeabi_fdiv>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	4b70      	ldr	r3, [pc, #448]	; (8004214 <moveStraight+0x250>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7fc fe93 	bl	8000d84 <__aeabi_fmul>
 800405e:	4603      	mov	r3, r0
 8004060:	461a      	mov	r2, r3
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <moveStraight+0x254>)
 8004064:	601a      	str	r2, [r3, #0]
	pidP = KP * error;
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <moveStraight+0x258>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a64      	ldr	r2, [pc, #400]	; (80041fc <moveStraight+0x238>)
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc fe87 	bl	8000d84 <__aeabi_fmul>
 8004076:	4603      	mov	r3, r0
 8004078:	461a      	mov	r2, r3
 800407a:	4b69      	ldr	r3, [pc, #420]	; (8004220 <moveStraight+0x25c>)
 800407c:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 800407e:	4b68      	ldr	r3, [pc, #416]	; (8004220 <moveStraight+0x25c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a65      	ldr	r2, [pc, #404]	; (8004218 <moveStraight+0x254>)
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fd73 	bl	8000b74 <__addsf3>
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	4b64      	ldr	r3, [pc, #400]	; (8004224 <moveStraight+0x260>)
 8004094:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <moveStraight+0x260>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a63      	ldr	r2, [pc, #396]	; (8004228 <moveStraight+0x264>)
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f82b 	bl	80010fc <__aeabi_fcmpgt>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <moveStraight+0xf0>
		//intUartSend(1);
		pid = velocity;
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <moveStraight+0x264>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5c      	ldr	r2, [pc, #368]	; (8004224 <moveStraight+0x260>)
 80040b2:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 80040b4:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <moveStraight+0x264>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80040bc:	4a59      	ldr	r2, [pc, #356]	; (8004224 <moveStraight+0x260>)
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd f81a 	bl	80010fc <__aeabi_fcmpgt>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <moveStraight+0x116>
		//intUartSend(0);
		pid = -velocity;
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <moveStraight+0x264>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	4a53      	ldr	r2, [pc, #332]	; (8004224 <moveStraight+0x260>)
 80040d8:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(pid);
	//HAL_Delay(10);
	if (pid < 0) {
 80040da:	4b52      	ldr	r3, [pc, #328]	; (8004224 <moveStraight+0x260>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc ffec 	bl	80010c0 <__aeabi_fcmplt>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <moveStraight+0x138>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80040ee:	2201      	movs	r2, #1
 80040f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040f4:	484d      	ldr	r0, [pc, #308]	; (800422c <moveStraight+0x268>)
 80040f6:	f002 f818 	bl	800612a <HAL_GPIO_WritePin>
 80040fa:	e005      	b.n	8004108 <moveStraight+0x144>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004102:	484a      	ldr	r0, [pc, #296]	; (800422c <moveStraight+0x268>)
 8004104:	f002 f811 	bl	800612a <HAL_GPIO_WritePin>
	}
	motLeft = velocity - pid;
 8004108:	4b47      	ldr	r3, [pc, #284]	; (8004228 <moveStraight+0x264>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a45      	ldr	r2, [pc, #276]	; (8004224 <moveStraight+0x260>)
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc fd2c 	bl	8000b70 <__aeabi_fsub>
 8004118:	4603      	mov	r3, r0
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fff8 	bl	8001110 <__aeabi_f2iz>
 8004120:	4603      	mov	r3, r0
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <moveStraight+0x26c>)
 8004124:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8004126:	4b40      	ldr	r3, [pc, #256]	; (8004228 <moveStraight+0x264>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a3e      	ldr	r2, [pc, #248]	; (8004224 <moveStraight+0x260>)
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fd1f 	bl	8000b74 <__addsf3>
 8004136:	4603      	mov	r3, r0
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc ffe9 	bl	8001110 <__aeabi_f2iz>
 800413e:	4603      	mov	r3, r0
 8004140:	4a3c      	ldr	r2, [pc, #240]	; (8004234 <moveStraight+0x270>)
 8004142:	6013      	str	r3, [r2, #0]
	if (motLeft < -1000) {
 8004144:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <moveStraight+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800414c:	da02      	bge.n	8004154 <moveStraight+0x190>
		motLeft = -1000;
 800414e:	4b38      	ldr	r3, [pc, #224]	; (8004230 <moveStraight+0x26c>)
 8004150:	4a39      	ldr	r2, [pc, #228]	; (8004238 <moveStraight+0x274>)
 8004152:	601a      	str	r2, [r3, #0]
	}
	if (motRight < -1000) {
 8004154:	4b37      	ldr	r3, [pc, #220]	; (8004234 <moveStraight+0x270>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800415c:	da02      	bge.n	8004164 <moveStraight+0x1a0>
		motRight = -1000;
 800415e:	4b35      	ldr	r3, [pc, #212]	; (8004234 <moveStraight+0x270>)
 8004160:	4a35      	ldr	r2, [pc, #212]	; (8004238 <moveStraight+0x274>)
 8004162:	601a      	str	r2, [r3, #0]
	}

	previousError = error;
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <moveStraight+0x238>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <moveStraight+0x24c>)
 800416a:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 800416c:	4b31      	ldr	r3, [pc, #196]	; (8004234 <moveStraight+0x270>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004174:	4930      	ldr	r1, [pc, #192]	; (8004238 <moveStraight+0x274>)
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fed1 	bl	8003f1e <constrain>
 800417c:	4603      	mov	r3, r0
 800417e:	4a2d      	ldr	r2, [pc, #180]	; (8004234 <moveStraight+0x270>)
 8004180:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <moveStraight+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800418a:	492b      	ldr	r1, [pc, #172]	; (8004238 <moveStraight+0x274>)
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fec6 	bl	8003f1e <constrain>
 8004192:	4603      	mov	r3, r0
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <moveStraight+0x26c>)
 8004196:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, xSpeed * 2);
 8004198:	4b26      	ldr	r3, [pc, #152]	; (8004234 <moveStraight+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	4b27      	ldr	r3, [pc, #156]	; (800423c <moveStraight+0x278>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041ac:	4922      	ldr	r1, [pc, #136]	; (8004238 <moveStraight+0x274>)
 80041ae:	f7ff fe9b 	bl	8003ee8 <MAP>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <moveStraight+0x270>)
 80041b8:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, xSpeed * 2);
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <moveStraight+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <moveStraight+0x278>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041ce:	491a      	ldr	r1, [pc, #104]	; (8004238 <moveStraight+0x274>)
 80041d0:	f7ff fe8a 	bl	8003ee8 <MAP>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <moveStraight+0x26c>)
 80041da:	601a      	str	r2, [r3, #0]
	TIM4->CCR4 = motLeft;
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <moveStraight+0x26c>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <moveStraight+0x27c>)
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR3 = motRight;
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <moveStraight+0x270>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <moveStraight+0x27c>)
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80041ec:	bf00      	nop
 80041ee:	3704      	adds	r7, #4
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd90      	pop	{r4, r7, pc}
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	20003c6c 	.word	0x20003c6c
 8004200:	20003c7c 	.word	0x20003c7c
 8004204:	20003c80 	.word	0x20003c80
 8004208:	447a0000 	.word	0x447a0000
 800420c:	20003c78 	.word	0x20003c78
 8004210:	20003c74 	.word	0x20003c74
 8004214:	20002310 	.word	0x20002310
 8004218:	20003c88 	.word	0x20003c88
 800421c:	2000230c 	.word	0x2000230c
 8004220:	20003c84 	.word	0x20003c84
 8004224:	20003c70 	.word	0x20003c70
 8004228:	20002314 	.word	0x20002314
 800422c:	40010c00 	.word	0x40010c00
 8004230:	20003c8c 	.word	0x20003c8c
 8004234:	20003c90 	.word	0x20003c90
 8004238:	fffffc18 	.word	0xfffffc18
 800423c:	20003c9c 	.word	0x20003c9c
 8004240:	40000800 	.word	0x40000800

08004244 <btnMachine>:
void runForward() {
	runMotor(ADELANTE, MOTOR_A);
	runMotor(ADELANTE, MOTOR_B);
}

void btnMachine(int index) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 800424c:	4a50      	ldr	r2, [pc, #320]	; (8004390 <btnMachine+0x14c>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	3308      	adds	r3, #8
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d069      	beq.n	8004330 <btnMachine+0xec>
 800425c:	2b02      	cmp	r3, #2
 800425e:	f300 8092 	bgt.w	8004386 <btnMachine+0x142>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <btnMachine+0x28>
 8004266:	2b01      	cmp	r3, #1
 8004268:	d02c      	beq.n	80042c4 <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 800426a:	e08c      	b.n	8004386 <btnMachine+0x142>
		btns[index].flag = 0;
 800426c:	4a48      	ldr	r2, [pc, #288]	; (8004390 <btnMachine+0x14c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	4413      	add	r3, r2
 8004274:	330c      	adds	r3, #12
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 800427a:	4a45      	ldr	r2, [pc, #276]	; (8004390 <btnMachine+0x14c>)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	4413      	add	r3, r2
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4942      	ldr	r1, [pc, #264]	; (8004390 <btnMachine+0x14c>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	440b      	add	r3, r1
 800428c:	3304      	adds	r3, #4
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f001 ff32 	bl	80060fc <HAL_GPIO_ReadPin>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <btnMachine+0x150>)
 800429e:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 80042a0:	4b3c      	ldr	r3, [pc, #240]	; (8004394 <btnMachine+0x150>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d169      	bne.n	800437c <btnMachine+0x138>
			ticks = HAL_GetTick();
 80042a8:	f000 fcae 	bl	8004c08 <HAL_GetTick>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <btnMachine+0x154>)
 80042b2:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 80042b4:	4a36      	ldr	r2, [pc, #216]	; (8004390 <btnMachine+0x14c>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	4413      	add	r3, r2
 80042bc:	3308      	adds	r3, #8
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
		break;
 80042c2:	e05b      	b.n	800437c <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80042c4:	4a32      	ldr	r2, [pc, #200]	; (8004390 <btnMachine+0x14c>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4930      	ldr	r1, [pc, #192]	; (8004390 <btnMachine+0x14c>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	440b      	add	r3, r1
 80042d6:	3304      	adds	r3, #4
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f001 ff0d 	bl	80060fc <HAL_GPIO_ReadPin>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <btnMachine+0x150>)
 80042e8:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <btnMachine+0x150>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <btnMachine+0xcc>
 80042f2:	f000 fc89 	bl	8004c08 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <btnMachine+0x154>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3319      	adds	r3, #25
 80042fe:	429a      	cmp	r2, r3
 8004300:	d306      	bcc.n	8004310 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <btnMachine+0x14c>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	4413      	add	r3, r2
 800430a:	3308      	adds	r3, #8
 800430c:	2202      	movs	r2, #2
 800430e:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <btnMachine+0x150>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d133      	bne.n	8004380 <btnMachine+0x13c>
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <btnMachine+0x154>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b18      	cmp	r3, #24
 800431e:	dc2f      	bgt.n	8004380 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <btnMachine+0x14c>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4413      	add	r3, r2
 8004328:	3308      	adds	r3, #8
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
		break;
 800432e:	e027      	b.n	8004380 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8004330:	4a17      	ldr	r2, [pc, #92]	; (8004390 <btnMachine+0x14c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4413      	add	r3, r2
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4915      	ldr	r1, [pc, #84]	; (8004390 <btnMachine+0x14c>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	440b      	add	r3, r1
 8004342:	3304      	adds	r3, #4
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f001 fed7 	bl	80060fc <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <btnMachine+0x150>)
 8004354:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <btnMachine+0x150>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d112      	bne.n	8004384 <btnMachine+0x140>
			btns[index].flag = 1;
 800435e:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <btnMachine+0x14c>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	4413      	add	r3, r2
 8004366:	330c      	adds	r3, #12
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <btnMachine+0x14c>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	4413      	add	r3, r2
 8004374:	3308      	adds	r3, #8
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
		break;
 800437a:	e003      	b.n	8004384 <btnMachine+0x140>
		break;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <btnMachine+0x142>
		break;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <btnMachine+0x142>
		break;
 8004384:	bf00      	nop
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000233c 	.word	0x2000233c
 8004394:	200022fc 	.word	0x200022fc
 8004398:	200022f8 	.word	0x200022f8

0800439c <SysTick_Handler>:

void SysTick_Handler(void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	if (StraightFlag == 1) {
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <SysTick_Handler+0x18>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <SysTick_Handler+0x10>
		moveStraight();
 80043a8:	f7ff fe0c 	bl	8003fc4 <moveStraight>
	}
	//moveStraight();
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80043ac:	f000 fc1a 	bl	8004be4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20003c98 	.word	0x20003c98

080043b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043bc:	b672      	cpsid	i
}
 80043be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80043c0:	e7fe      	b.n	80043c0 <Error_Handler+0x8>
 80043c2:	0000      	movs	r0, r0
 80043c4:	0000      	movs	r0, r0
	...

080043c8 <calcularDistancia>:
#include "motors.h"


int counterD, counterI;

float calcularDistancia(int counter) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fc f817 	bl	8000404 <__aeabi_i2d>
 80043d6:	a30c      	add	r3, pc, #48	; (adr r3, 8004408 <calcularDistancia+0x40>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f7fc f87c 	bl	80004d8 <__aeabi_dmul>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <calcularDistancia+0x48>)
 80043ee:	f7fc f99d 	bl	800072c <__aeabi_ddiv>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7fc fb65 	bl	8000ac8 <__aeabi_d2f>
 80043fe:	4603      	mov	r3, r0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e147ae14 	.word	0xe147ae14
 800440c:	4004147a 	.word	0x4004147a
 8004410:	40240000 	.word	0x40240000

08004414 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	switch (dir) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b05      	cmp	r3, #5
 8004422:	d03f      	beq.n	80044a4 <runMotor+0x90>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b05      	cmp	r3, #5
 8004428:	dc57      	bgt.n	80044da <runMotor+0xc6>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <runMotor+0x24>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d01b      	beq.n	800446e <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 8004436:	e050      	b.n	80044da <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 800443e:	2201      	movs	r2, #1
 8004440:	2110      	movs	r1, #16
 8004442:	4828      	ldr	r0, [pc, #160]	; (80044e4 <runMotor+0xd0>)
 8004444:	f001 fe71 	bl	800612a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8004448:	2200      	movs	r2, #0
 800444a:	2120      	movs	r1, #32
 800444c:	4825      	ldr	r0, [pc, #148]	; (80044e4 <runMotor+0xd0>)
 800444e:	f001 fe6c 	bl	800612a <HAL_GPIO_WritePin>
		break;
 8004452:	e042      	b.n	80044da <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 8004454:	2201      	movs	r2, #1
 8004456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800445a:	4823      	ldr	r0, [pc, #140]	; (80044e8 <runMotor+0xd4>)
 800445c:	f001 fe65 	bl	800612a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 8004460:	2200      	movs	r2, #0
 8004462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004466:	4820      	ldr	r0, [pc, #128]	; (80044e8 <runMotor+0xd4>)
 8004468:	f001 fe5f 	bl	800612a <HAL_GPIO_WritePin>
		break;
 800446c:	e035      	b.n	80044da <runMotor+0xc6>
		if (motor == MOTOR_A) {
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 8004474:	2200      	movs	r2, #0
 8004476:	2110      	movs	r1, #16
 8004478:	481a      	ldr	r0, [pc, #104]	; (80044e4 <runMotor+0xd0>)
 800447a:	f001 fe56 	bl	800612a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 800447e:	2201      	movs	r2, #1
 8004480:	2120      	movs	r1, #32
 8004482:	4818      	ldr	r0, [pc, #96]	; (80044e4 <runMotor+0xd0>)
 8004484:	f001 fe51 	bl	800612a <HAL_GPIO_WritePin>
		break;
 8004488:	e027      	b.n	80044da <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 800448a:	2200      	movs	r2, #0
 800448c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004490:	4815      	ldr	r0, [pc, #84]	; (80044e8 <runMotor+0xd4>)
 8004492:	f001 fe4a 	bl	800612a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 8004496:	2201      	movs	r2, #1
 8004498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800449c:	4812      	ldr	r0, [pc, #72]	; (80044e8 <runMotor+0xd4>)
 800449e:	f001 fe44 	bl	800612a <HAL_GPIO_WritePin>
		break;
 80044a2:	e01a      	b.n	80044da <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2110      	movs	r1, #16
 80044ae:	480d      	ldr	r0, [pc, #52]	; (80044e4 <runMotor+0xd0>)
 80044b0:	f001 fe3b 	bl	800612a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80044b4:	2200      	movs	r2, #0
 80044b6:	2120      	movs	r1, #32
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <runMotor+0xd0>)
 80044ba:	f001 fe36 	bl	800612a <HAL_GPIO_WritePin>
		break;
 80044be:	e00b      	b.n	80044d8 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80044c0:	2200      	movs	r2, #0
 80044c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044c6:	4808      	ldr	r0, [pc, #32]	; (80044e8 <runMotor+0xd4>)
 80044c8:	f001 fe2f 	bl	800612a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <runMotor+0xd4>)
 80044d4:	f001 fe29 	bl	800612a <HAL_GPIO_WritePin>
		break;
 80044d8:	bf00      	nop
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40010c00 	.word	0x40010c00
 80044e8:	40010800 	.word	0x40010800

080044ec <lecturaSensor>:

#include <math.h>



float lecturaSensor(int direccion, float values[4]) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d841      	bhi.n	8004580 <lecturaSensor+0x94>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <lecturaSensor+0x18>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004515 	.word	0x08004515
 8004508:	08004559 	.word	0x08004559
 800450c:	0800457b 	.word	0x0800457b
 8004510:	08004537 	.word	0x08004537
	case ADELANTE:
		return wallDetector(values[2], direccion);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc fdf8 	bl	8001110 <__aeabi_f2iz>
 8004520:	4603      	mov	r3, r0
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fd13 	bl	8003f50 <wallDetector>
 800452a:	4603      	mov	r3, r0
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc fbd5 	bl	8000cdc <__aeabi_i2f>
 8004532:	4603      	mov	r3, r0
 8004534:	e025      	b.n	8004582 <lecturaSensor+0x96>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fc fde7 	bl	8001110 <__aeabi_f2iz>
 8004542:	4603      	mov	r3, r0
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fd02 	bl	8003f50 <wallDetector>
 800454c:	4603      	mov	r3, r0
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc fbc4 	bl	8000cdc <__aeabi_i2f>
 8004554:	4603      	mov	r3, r0
 8004556:	e014      	b.n	8004582 <lecturaSensor+0x96>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fdd6 	bl	8001110 <__aeabi_f2iz>
 8004564:	4603      	mov	r3, r0
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fcf1 	bl	8003f50 <wallDetector>
 800456e:	4603      	mov	r3, r0
 8004570:	4618      	mov	r0, r3
 8004572:	f7fc fbb3 	bl	8000cdc <__aeabi_i2f>
 8004576:	4603      	mov	r3, r0
 8004578:	e003      	b.n	8004582 <lecturaSensor+0x96>
		break;
	case ATRAS:
		return 0;
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e000      	b.n	8004582 <lecturaSensor+0x96>
		break;
	}
	return 15;
 8004580:	4b02      	ldr	r3, [pc, #8]	; (800458c <lecturaSensor+0xa0>)
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	41700000 	.word	0x41700000

08004590 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	long suma = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e00a      	b.n	80045ba <lecSensor+0x2a>
		suma = suma + values[i];
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	4413      	add	r3, r2
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	3301      	adds	r3, #1
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	dbf0      	blt.n	80045a4 <lecSensor+0x14>
	}
	float adc = suma / n;
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc fb86 	bl	8000cdc <__aeabi_i2f>
 80045d0:	4603      	mov	r3, r0
 80045d2:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 80045d4:	68b8      	ldr	r0, [r7, #8]
 80045d6:	f7fb ff27 	bl	8000428 <__aeabi_f2d>
 80045da:	a323      	add	r3, pc, #140	; (adr r3, 8004668 <lecSensor+0xd8>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f7fb ff7a 	bl	80004d8 <__aeabi_dmul>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f7fc fa6c 	bl	8000ac8 <__aeabi_d2f>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7fb ff17 	bl	8000428 <__aeabi_f2d>
 80045fa:	a31d      	add	r3, pc, #116	; (adr r3, 8004670 <lecSensor+0xe0>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fc f9e6 	bl	80009d0 <__aeabi_dcmple>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <lecSensor+0x7e>
		volts = 0.35;
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <lecSensor+0xf0>)
 800460c:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7fb ff0a 	bl	8000428 <__aeabi_f2d>
 8004614:	a318      	add	r3, pc, #96	; (adr r3, 8004678 <lecSensor+0xe8>)
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f7fb fda5 	bl	8000168 <__aeabi_dsub>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <lecSensor+0xf4>)
 800462c:	f003 fae0 	bl	8007bf0 <pow>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f7fc fa46 	bl	8000ac8 <__aeabi_d2f>
 800463c:	4603      	mov	r3, r0
 800463e:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	4811      	ldr	r0, [pc, #68]	; (8004688 <lecSensor+0xf8>)
 8004644:	f7fc fc52 	bl	8000eec <__aeabi_fdiv>
 8004648:	4603      	mov	r3, r0
 800464a:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 800464c:	490f      	ldr	r1, [pc, #60]	; (800468c <lecSensor+0xfc>)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7fc fa8e 	bl	8000b70 <__aeabi_fsub>
 8004654:	4603      	mov	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
	return volts;
 8004658:	68fb      	ldr	r3, [r7, #12]

}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	f3af 8000 	nop.w
 8004668:	440a4e96 	.word	0x440a4e96
 800466c:	3f4a6666 	.word	0x3f4a6666
 8004670:	66666666 	.word	0x66666666
 8004674:	3fd66666 	.word	0x3fd66666
 8004678:	33333333 	.word	0x33333333
 800467c:	3fd33333 	.word	0x3fd33333
 8004680:	3eb33333 	.word	0x3eb33333
 8004684:	3fd00000 	.word	0x3fd00000
 8004688:	41dc0000 	.word	0x41dc0000
 800468c:	41900000 	.word	0x41900000

08004690 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
	long suma = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e00a      	b.n	80046ba <lecturaCNY70+0x2a>
		suma = suma + values[i];
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4413      	add	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3301      	adds	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	dbf0      	blt.n	80046a4 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80046ca:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d2:	da01      	bge.n	80046d8 <lecturaCNY70+0x48>
		return BLANCO;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 80046d8:	2301      	movs	r3, #1
	}
}
 80046da:	4618      	mov	r0, r3
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_MspInit+0x5c>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	4a14      	ldr	r2, [pc, #80]	; (8004740 <HAL_MspInit+0x5c>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6193      	str	r3, [r2, #24]
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_MspInit+0x5c>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_MspInit+0x5c>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_MspInit+0x5c>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470c:	61d3      	str	r3, [r2, #28]
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_MspInit+0x5c>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_MspInit+0x60>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	4a04      	ldr	r2, [pc, #16]	; (8004744 <HAL_MspInit+0x60>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40021000 	.word	0x40021000
 8004744:	40010000 	.word	0x40010000

08004748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a28      	ldr	r2, [pc, #160]	; (8004804 <HAL_ADC_MspInit+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d149      	bne.n	80047fc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_ADC_MspInit+0xc0>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4a26      	ldr	r2, [pc, #152]	; (8004808 <HAL_ADC_MspInit+0xc0>)
 800476e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004772:	6193      	str	r3, [r2, #24]
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_ADC_MspInit+0xc0>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <HAL_ADC_MspInit+0xc0>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <HAL_ADC_MspInit+0xc0>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	6193      	str	r3, [r2, #24]
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_ADC_MspInit+0xc0>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 8004798:	230f      	movs	r3, #15
 800479a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479c:	2303      	movs	r3, #3
 800479e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	4619      	mov	r1, r3
 80047a6:	4819      	ldr	r0, [pc, #100]	; (800480c <HAL_ADC_MspInit+0xc4>)
 80047a8:	f001 fb24 	bl	8005df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047ae:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_ADC_MspInit+0xcc>)
 80047b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047d4:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047d6:	2220      	movs	r2, #32
 80047d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047dc:	2200      	movs	r2, #0
 80047de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047e0:	480b      	ldr	r0, [pc, #44]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047e2:	f000 ff0f 	bl	8005604 <HAL_DMA_Init>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80047ec:	f7ff fde4 	bl	80043b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a07      	ldr	r2, [pc, #28]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047f4:	621a      	str	r2, [r3, #32]
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <HAL_ADC_MspInit+0xc8>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40012400 	.word	0x40012400
 8004808:	40021000 	.word	0x40021000
 800480c:	40010800 	.word	0x40010800
 8004810:	2000010c 	.word	0x2000010c
 8004814:	40020008 	.word	0x40020008

08004818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <HAL_I2C_MspInit+0x70>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d123      	bne.n	8004880 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004838:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_I2C_MspInit+0x74>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4a13      	ldr	r2, [pc, #76]	; (800488c <HAL_I2C_MspInit+0x74>)
 800483e:	f043 0308 	orr.w	r3, r3, #8
 8004842:	6193      	str	r3, [r2, #24]
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_I2C_MspInit+0x74>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004854:	2312      	movs	r3, #18
 8004856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4619      	mov	r1, r3
 8004862:	480b      	ldr	r0, [pc, #44]	; (8004890 <HAL_I2C_MspInit+0x78>)
 8004864:	f001 fac6 	bl	8005df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <HAL_I2C_MspInit+0x74>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	4a07      	ldr	r2, [pc, #28]	; (800488c <HAL_I2C_MspInit+0x74>)
 800486e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004872:	61d3      	str	r3, [r2, #28]
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_I2C_MspInit+0x74>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40005400 	.word	0x40005400
 800488c:	40021000 	.word	0x40021000
 8004890:	40010c00 	.word	0x40010c00

08004894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	f107 0318 	add.w	r3, r7, #24
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2b      	ldr	r2, [pc, #172]	; (800495c <HAL_TIM_Encoder_MspInit+0xc8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d125      	bne.n	8004900 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 80048ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048be:	6193      	str	r3, [r2, #24]
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	6193      	str	r3, [r2, #24]
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f2:	f107 0318 	add.w	r3, r7, #24
 80048f6:	4619      	mov	r1, r3
 80048f8:	481a      	ldr	r0, [pc, #104]	; (8004964 <HAL_TIM_Encoder_MspInit+0xd0>)
 80048fa:	f001 fa7b 	bl	8005df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80048fe:	e028      	b.n	8004952 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM3)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIM_Encoder_MspInit+0xd4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d123      	bne.n	8004952 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4a14      	ldr	r2, [pc, #80]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004910:	f043 0302 	orr.w	r3, r3, #2
 8004914:	61d3      	str	r3, [r2, #28]
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6193      	str	r3, [r2, #24]
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800493a:	23c0      	movs	r3, #192	; 0xc0
 800493c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004946:	f107 0318 	add.w	r3, r7, #24
 800494a:	4619      	mov	r1, r3
 800494c:	4805      	ldr	r0, [pc, #20]	; (8004964 <HAL_TIM_Encoder_MspInit+0xd0>)
 800494e:	f001 fa51 	bl	8005df4 <HAL_GPIO_Init>
}
 8004952:	bf00      	nop
 8004954:	3728      	adds	r7, #40	; 0x28
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40021000 	.word	0x40021000
 8004964:	40010800 	.word	0x40010800
 8004968:	40000400 	.word	0x40000400

0800496c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <HAL_TIM_PWM_MspInit+0x34>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10b      	bne.n	8004996 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_TIM_PWM_MspInit+0x38>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_TIM_PWM_MspInit+0x38>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	61d3      	str	r3, [r2, #28]
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_TIM_PWM_MspInit+0x38>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	40000800 	.word	0x40000800
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <HAL_TIM_MspPostInit+0x5c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d118      	bne.n	80049fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_TIM_MspPostInit+0x60>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4a0e      	ldr	r2, [pc, #56]	; (8004a08 <HAL_TIM_MspPostInit+0x60>)
 80049ce:	f043 0308 	orr.w	r3, r3, #8
 80049d2:	6193      	str	r3, [r2, #24]
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_TIM_MspPostInit+0x60>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80049e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ea:	2302      	movs	r3, #2
 80049ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ee:	f107 0310 	add.w	r3, r7, #16
 80049f2:	4619      	mov	r1, r3
 80049f4:	4805      	ldr	r0, [pc, #20]	; (8004a0c <HAL_TIM_MspPostInit+0x64>)
 80049f6:	f001 f9fd 	bl	8005df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80049fa:	bf00      	nop
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40010c00 	.word	0x40010c00

08004a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <HAL_UART_MspInit+0x8c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d131      	bne.n	8004a94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_UART_MspInit+0x90>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <HAL_UART_MspInit+0x90>)
 8004a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3a:	61d3      	str	r3, [r2, #28]
 8004a3c:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_UART_MspInit+0x90>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_UART_MspInit+0x90>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <HAL_UART_MspInit+0x90>)
 8004a4e:	f043 0308 	orr.w	r3, r3, #8
 8004a52:	6193      	str	r3, [r2, #24]
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_UART_MspInit+0x90>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a66:	2302      	movs	r3, #2
 8004a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6e:	f107 0310 	add.w	r3, r7, #16
 8004a72:	4619      	mov	r1, r3
 8004a74:	480b      	ldr	r0, [pc, #44]	; (8004aa4 <HAL_UART_MspInit+0x94>)
 8004a76:	f001 f9bd 	bl	8005df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a88:	f107 0310 	add.w	r3, r7, #16
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <HAL_UART_MspInit+0x94>)
 8004a90:	f001 f9b0 	bl	8005df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40004800 	.word	0x40004800
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40010c00 	.word	0x40010c00

08004aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004aac:	e7fe      	b.n	8004aac <NMI_Handler+0x4>

08004aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ab2:	e7fe      	b.n	8004ab2 <HardFault_Handler+0x4>

08004ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ab8:	e7fe      	b.n	8004ab8 <MemManage_Handler+0x4>

08004aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004abe:	e7fe      	b.n	8004abe <BusFault_Handler+0x4>

08004ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ac4:	e7fe      	b.n	8004ac4 <UsageFault_Handler+0x4>

08004ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
	...

08004aec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <DMA1_Channel1_IRQHandler+0x10>)
 8004af2:	f000 fe41 	bl	8005778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2000010c 	.word	0x2000010c

08004b00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b0c:	480c      	ldr	r0, [pc, #48]	; (8004b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b0e:	490d      	ldr	r1, [pc, #52]	; (8004b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b14:	e002      	b.n	8004b1c <LoopCopyDataInit>

08004b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b1a:	3304      	adds	r3, #4

08004b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b20:	d3f9      	bcc.n	8004b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b24:	4c0a      	ldr	r4, [pc, #40]	; (8004b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b28:	e001      	b.n	8004b2e <LoopFillZerobss>

08004b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b2c:	3204      	adds	r2, #4

08004b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b30:	d3fb      	bcc.n	8004b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b32:	f7ff ffe5 	bl	8004b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b36:	f003 f82f 	bl	8007b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b3a:	f7fc fbf1 	bl	8001320 <main>
  bx lr
 8004b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8004b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b44:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8004b48:	08008a30 	.word	0x08008a30
  ldr r2, =_sbss
 8004b4c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004b50:	20003cc8 	.word	0x20003cc8

08004b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b54:	e7fe      	b.n	8004b54 <ADC1_2_IRQHandler>
	...

08004b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <HAL_Init+0x28>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a07      	ldr	r2, [pc, #28]	; (8004b80 <HAL_Init+0x28>)
 8004b62:	f043 0310 	orr.w	r3, r3, #16
 8004b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b68:	2003      	movs	r0, #3
 8004b6a:	f000 fd09 	bl	8005580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b6e:	200f      	movs	r0, #15
 8004b70:	f000 f808 	bl	8004b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b74:	f7ff fdb6 	bl	80046e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000

08004b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_InitTick+0x54>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_InitTick+0x58>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	4619      	mov	r1, r3
 8004b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd21 	bl	80055ea <HAL_SYSTICK_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e00e      	b.n	8004bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d80a      	bhi.n	8004bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	f000 fce9 	bl	8005596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bc4:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <HAL_InitTick+0x5c>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	2000003c 	.word	0x2000003c
 8004bdc:	20000044 	.word	0x20000044
 8004be0:	20000040 	.word	0x20000040

08004be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_IncTick+0x1c>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_IncTick+0x20>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <HAL_IncTick+0x20>)
 8004bf6:	6013      	str	r3, [r2, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	20000044 	.word	0x20000044
 8004c04:	20003ca0 	.word	0x20003ca0

08004c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <HAL_GetTick+0x10>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	20003ca0 	.word	0x20003ca0

08004c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c24:	f7ff fff0 	bl	8004c08 <HAL_GetTick>
 8004c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d005      	beq.n	8004c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_Delay+0x44>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c42:	bf00      	nop
 8004c44:	f7ff ffe0 	bl	8004c08 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d8f7      	bhi.n	8004c44 <HAL_Delay+0x28>
  {
  }
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000044 	.word	0x20000044

08004c64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0be      	b.n	8004e04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fd50 	bl	8004748 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 faf5 	bl	8005298 <ADC_ConversionStop_Disable>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 8099 	bne.w	8004df2 <HAL_ADC_Init+0x18e>
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8095 	bne.w	8004df2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cd0:	f023 0302 	bic.w	r3, r3, #2
 8004cd4:	f043 0202 	orr.w	r2, r3, #2
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ce4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	7b1b      	ldrb	r3, [r3, #12]
 8004cea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004cec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfc:	d003      	beq.n	8004d06 <HAL_ADC_Init+0xa2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_ADC_Init+0xa8>
 8004d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d0a:	e000      	b.n	8004d0e <HAL_ADC_Init+0xaa>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7d1b      	ldrb	r3, [r3, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d119      	bne.n	8004d50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7b1b      	ldrb	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	035a      	lsls	r2, r3, #13
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e00b      	b.n	8004d50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_ADC_Init+0x1a8>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d80:	d003      	beq.n	8004d8a <HAL_ADC_Init+0x126>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d104      	bne.n	8004d94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	051b      	lsls	r3, r3, #20
 8004d92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_ADC_Init+0x1ac>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d10b      	bne.n	8004dd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0201 	orr.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004dce:	e018      	b.n	8004e02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f023 0312 	bic.w	r3, r3, #18
 8004dd8:	f043 0210 	orr.w	r2, r3, #16
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f043 0201 	orr.w	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004df0:	e007      	b.n	8004e02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	f043 0210 	orr.w	r2, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	ffe1f7fd 	.word	0xffe1f7fd
 8004e10:	ff1f0efe 	.word	0xff1f0efe

08004e14 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a64      	ldr	r2, [pc, #400]	; (8004fbc <HAL_ADC_Start_DMA+0x1a8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_ADC_Start_DMA+0x24>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a63      	ldr	r2, [pc, #396]	; (8004fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d106      	bne.n	8004e46 <HAL_ADC_Start_DMA+0x32>
 8004e38:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <HAL_ADC_Start_DMA+0x1a8>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 80b3 	bne.w	8004fac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_ADC_Start_DMA+0x40>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0ae      	b.n	8004fb2 <HAL_ADC_Start_DMA+0x19e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f9c1 	bl	80051e4 <ADC_Enable>
 8004e62:	4603      	mov	r3, r0
 8004e64:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f040 809a 	bne.w	8004fa2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4e      	ldr	r2, [pc, #312]	; (8004fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d105      	bne.n	8004e98 <HAL_ADC_Start_DMA+0x84>
 8004e8c:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <HAL_ADC_Start_DMA+0x1a8>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d115      	bne.n	8004ec4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d026      	beq.n	8004f00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ec2:	e01d      	b.n	8004f00 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a39      	ldr	r2, [pc, #228]	; (8004fbc <HAL_ADC_Start_DMA+0x1a8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_ADC_Start_DMA+0xd0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <HAL_ADC_Start_DMA+0x1ac>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10d      	bne.n	8004f00 <HAL_ADC_Start_DMA+0xec>
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <HAL_ADC_Start_DMA+0x1a8>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f023 0206 	bic.w	r2, r3, #6
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f18:	e002      	b.n	8004f20 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <HAL_ADC_Start_DMA+0x1b0>)
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <HAL_ADC_Start_DMA+0x1b4>)
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <HAL_ADC_Start_DMA+0x1b8>)
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0202 	mvn.w	r2, #2
 8004f48:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f58:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a18      	ldr	r0, [r3, #32]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	334c      	adds	r3, #76	; 0x4c
 8004f64:	4619      	mov	r1, r3
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f000 fba5 	bl	80056b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004f78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004f7c:	d108      	bne.n	8004f90 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004f8c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004f8e:	e00f      	b.n	8004fb0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f9e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004fa0:	e006      	b.n	8004fb0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004faa:	e001      	b.n	8004fb0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40012400 	.word	0x40012400
 8004fc0:	40012800 	.word	0x40012800
 8004fc4:	0800531b 	.word	0x0800531b
 8004fc8:	08005397 	.word	0x08005397
 8004fcc:	080053b3 	.word	0x080053b3

08004fd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x20>
 8005010:	2302      	movs	r3, #2
 8005012:	e0dc      	b.n	80051ce <HAL_ADC_ConfigChannel+0x1da>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b06      	cmp	r3, #6
 8005022:	d81c      	bhi.n	800505e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	3b05      	subs	r3, #5
 8005036:	221f      	movs	r2, #31
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	4019      	ands	r1, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b05      	subs	r3, #5
 8005050:	fa00 f203 	lsl.w	r2, r0, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	635a      	str	r2, [r3, #52]	; 0x34
 800505c:	e03c      	b.n	80050d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d81c      	bhi.n	80050a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	3b23      	subs	r3, #35	; 0x23
 8005078:	221f      	movs	r2, #31
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	4019      	ands	r1, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	3b23      	subs	r3, #35	; 0x23
 8005092:	fa00 f203 	lsl.w	r2, r0, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
 800509e:	e01b      	b.n	80050d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	3b41      	subs	r3, #65	; 0x41
 80050b2:	221f      	movs	r2, #31
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	4019      	ands	r1, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	3b41      	subs	r3, #65	; 0x41
 80050cc:	fa00 f203 	lsl.w	r2, r0, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b09      	cmp	r3, #9
 80050de:	d91c      	bls.n	800511a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68d9      	ldr	r1, [r3, #12]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	3b1e      	subs	r3, #30
 80050f2:	2207      	movs	r2, #7
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	4019      	ands	r1, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6898      	ldr	r0, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	3b1e      	subs	r3, #30
 800510c:	fa00 f203 	lsl.w	r2, r0, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]
 8005118:	e019      	b.n	800514e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6919      	ldr	r1, [r3, #16]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	2207      	movs	r2, #7
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	4019      	ands	r1, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6898      	ldr	r0, [r3, #8]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	fa00 f203 	lsl.w	r2, r0, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b10      	cmp	r3, #16
 8005154:	d003      	beq.n	800515e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800515a:	2b11      	cmp	r3, #17
 800515c:	d132      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d125      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d126      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005184:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b10      	cmp	r3, #16
 800518c:	d11a      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_ADC_ConfigChannel+0x1e8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	0c9a      	lsrs	r2, r3, #18
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051a4:	e002      	b.n	80051ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f9      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x1b2>
 80051b2:	e007      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	40012400 	.word	0x40012400
 80051dc:	2000003c 	.word	0x2000003c
 80051e0:	431bde83 	.word	0x431bde83

080051e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d040      	beq.n	8005284 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005212:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <ADC_Enable+0xac>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <ADC_Enable+0xb0>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	0c9b      	lsrs	r3, r3, #18
 800521e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005220:	e002      	b.n	8005228 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	3b01      	subs	r3, #1
 8005226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f9      	bne.n	8005222 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800522e:	f7ff fceb 	bl	8004c08 <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005234:	e01f      	b.n	8005276 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005236:	f7ff fce7 	bl	8004c08 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d918      	bls.n	8005276 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d011      	beq.n	8005276 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f043 0210 	orr.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	f043 0201 	orr.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e007      	b.n	8005286 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d1d8      	bne.n	8005236 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	2000003c 	.word	0x2000003c
 8005294:	431bde83 	.word	0x431bde83

08005298 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d12e      	bne.n	8005310 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052c2:	f7ff fca1 	bl	8004c08 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80052c8:	e01b      	b.n	8005302 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052ca:	f7ff fc9d 	bl	8004c08 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d914      	bls.n	8005302 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10d      	bne.n	8005302 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f043 0210 	orr.w	r2, r3, #16
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	f043 0201 	orr.w	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e007      	b.n	8005312 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b01      	cmp	r3, #1
 800530e:	d0dc      	beq.n	80052ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005330:	2b00      	cmp	r3, #0
 8005332:	d127      	bne.n	8005384 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800534a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800534e:	d115      	bne.n	800537c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005354:	2b00      	cmp	r3, #0
 8005356:	d111      	bne.n	800537c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7fe fd4f 	bl	8003e20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005382:	e004      	b.n	800538e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fe13 	bl	8004fd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	f043 0204 	orr.w	r2, r3, #4
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fe02 	bl	8004fe2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <__NVIC_SetPriorityGrouping+0x44>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005404:	4013      	ands	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800541a:	4a04      	ldr	r2, [pc, #16]	; (800542c <__NVIC_SetPriorityGrouping+0x44>)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	60d3      	str	r3, [r2, #12]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000ed00 	.word	0xe000ed00

08005430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <__NVIC_GetPriorityGrouping+0x18>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	f003 0307 	and.w	r3, r3, #7
}
 800543e:	4618      	mov	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	e000ed00 	.word	0xe000ed00

0800544c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	2b00      	cmp	r3, #0
 800545c:	db0b      	blt.n	8005476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	f003 021f 	and.w	r2, r3, #31
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <__NVIC_EnableIRQ+0x34>)
 8005466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2001      	movs	r0, #1
 800546e:	fa00 f202 	lsl.w	r2, r0, r2
 8005472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	e000e100 	.word	0xe000e100

08005484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005494:	2b00      	cmp	r3, #0
 8005496:	db0a      	blt.n	80054ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	490c      	ldr	r1, [pc, #48]	; (80054d0 <__NVIC_SetPriority+0x4c>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	440b      	add	r3, r1
 80054a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ac:	e00a      	b.n	80054c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <__NVIC_SetPriority+0x50>)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	3b04      	subs	r3, #4
 80054bc:	0112      	lsls	r2, r2, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	440b      	add	r3, r1
 80054c2:	761a      	strb	r2, [r3, #24]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e100 	.word	0xe000e100
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f1c3 0307 	rsb	r3, r3, #7
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf28      	it	cs
 80054f6:	2304      	movcs	r3, #4
 80054f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d902      	bls.n	8005508 <NVIC_EncodePriority+0x30>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3b03      	subs	r3, #3
 8005506:	e000      	b.n	800550a <NVIC_EncodePriority+0x32>
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	401a      	ands	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005520:	f04f 31ff 	mov.w	r1, #4294967295
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43d9      	mvns	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005530:	4313      	orrs	r3, r2
         );
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800554c:	d301      	bcc.n	8005552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800554e:	2301      	movs	r3, #1
 8005550:	e00f      	b.n	8005572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <SysTick_Config+0x40>)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555a:	210f      	movs	r1, #15
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	f7ff ff90 	bl	8005484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <SysTick_Config+0x40>)
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <SysTick_Config+0x40>)
 800556c:	2207      	movs	r2, #7
 800556e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	e000e010 	.word	0xe000e010

08005580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff2d 	bl	80053e8 <__NVIC_SetPriorityGrouping>
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055a8:	f7ff ff42 	bl	8005430 <__NVIC_GetPriorityGrouping>
 80055ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f7ff ff90 	bl	80054d8 <NVIC_EncodePriority>
 80055b8:	4602      	mov	r2, r0
 80055ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff5f 	bl	8005484 <__NVIC_SetPriority>
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ff35 	bl	800544c <__NVIC_EnableIRQ>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ffa2 	bl	800553c <SysTick_Config>
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e043      	b.n	80056a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	4b22      	ldr	r3, [pc, #136]	; (80056ac <HAL_DMA_Init+0xa8>)
 8005622:	4413      	add	r3, r2
 8005624:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_DMA_Init+0xac>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	009a      	lsls	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_DMA_Init+0xb0>)
 8005636:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800564e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800565c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	bffdfff8 	.word	0xbffdfff8
 80056b0:	cccccccd 	.word	0xcccccccd
 80056b4:	40020000 	.word	0x40020000

080056b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_DMA_Start_IT+0x20>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e04a      	b.n	800576e <HAL_DMA_Start_IT+0xb6>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d13a      	bne.n	8005760 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f938 	bl	8005984 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 020e 	orr.w	r2, r2, #14
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e00f      	b.n	800574e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0204 	bic.w	r2, r2, #4
 800573c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 020a 	orr.w	r2, r2, #10
 800574c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e005      	b.n	800576c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005768:	2302      	movs	r3, #2
 800576a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	2204      	movs	r2, #4
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d04f      	beq.n	8005840 <HAL_DMA_IRQHandler+0xc8>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d04a      	beq.n	8005840 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0204 	bic.w	r2, r2, #4
 80057c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a66      	ldr	r2, [pc, #408]	; (8005968 <HAL_DMA_IRQHandler+0x1f0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d029      	beq.n	8005826 <HAL_DMA_IRQHandler+0xae>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a65      	ldr	r2, [pc, #404]	; (800596c <HAL_DMA_IRQHandler+0x1f4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_IRQHandler+0xaa>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a63      	ldr	r2, [pc, #396]	; (8005970 <HAL_DMA_IRQHandler+0x1f8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01a      	beq.n	800581c <HAL_DMA_IRQHandler+0xa4>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a62      	ldr	r2, [pc, #392]	; (8005974 <HAL_DMA_IRQHandler+0x1fc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d012      	beq.n	8005816 <HAL_DMA_IRQHandler+0x9e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a60      	ldr	r2, [pc, #384]	; (8005978 <HAL_DMA_IRQHandler+0x200>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00a      	beq.n	8005810 <HAL_DMA_IRQHandler+0x98>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5f      	ldr	r2, [pc, #380]	; (800597c <HAL_DMA_IRQHandler+0x204>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d102      	bne.n	800580a <HAL_DMA_IRQHandler+0x92>
 8005804:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005808:	e00e      	b.n	8005828 <HAL_DMA_IRQHandler+0xb0>
 800580a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800580e:	e00b      	b.n	8005828 <HAL_DMA_IRQHandler+0xb0>
 8005810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005814:	e008      	b.n	8005828 <HAL_DMA_IRQHandler+0xb0>
 8005816:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800581a:	e005      	b.n	8005828 <HAL_DMA_IRQHandler+0xb0>
 800581c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005820:	e002      	b.n	8005828 <HAL_DMA_IRQHandler+0xb0>
 8005822:	2340      	movs	r3, #64	; 0x40
 8005824:	e000      	b.n	8005828 <HAL_DMA_IRQHandler+0xb0>
 8005826:	2304      	movs	r3, #4
 8005828:	4a55      	ldr	r2, [pc, #340]	; (8005980 <HAL_DMA_IRQHandler+0x208>)
 800582a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8094 	beq.w	800595e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800583e:	e08e      	b.n	800595e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	2202      	movs	r2, #2
 8005846:	409a      	lsls	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d056      	beq.n	80058fe <HAL_DMA_IRQHandler+0x186>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d051      	beq.n	80058fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 020a 	bic.w	r2, r2, #10
 8005876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a38      	ldr	r2, [pc, #224]	; (8005968 <HAL_DMA_IRQHandler+0x1f0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d029      	beq.n	80058de <HAL_DMA_IRQHandler+0x166>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a37      	ldr	r2, [pc, #220]	; (800596c <HAL_DMA_IRQHandler+0x1f4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_IRQHandler+0x162>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a35      	ldr	r2, [pc, #212]	; (8005970 <HAL_DMA_IRQHandler+0x1f8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01a      	beq.n	80058d4 <HAL_DMA_IRQHandler+0x15c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a34      	ldr	r2, [pc, #208]	; (8005974 <HAL_DMA_IRQHandler+0x1fc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d012      	beq.n	80058ce <HAL_DMA_IRQHandler+0x156>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a32      	ldr	r2, [pc, #200]	; (8005978 <HAL_DMA_IRQHandler+0x200>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00a      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x150>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a31      	ldr	r2, [pc, #196]	; (800597c <HAL_DMA_IRQHandler+0x204>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d102      	bne.n	80058c2 <HAL_DMA_IRQHandler+0x14a>
 80058bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058c0:	e00e      	b.n	80058e0 <HAL_DMA_IRQHandler+0x168>
 80058c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c6:	e00b      	b.n	80058e0 <HAL_DMA_IRQHandler+0x168>
 80058c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058cc:	e008      	b.n	80058e0 <HAL_DMA_IRQHandler+0x168>
 80058ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d2:	e005      	b.n	80058e0 <HAL_DMA_IRQHandler+0x168>
 80058d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d8:	e002      	b.n	80058e0 <HAL_DMA_IRQHandler+0x168>
 80058da:	2320      	movs	r3, #32
 80058dc:	e000      	b.n	80058e0 <HAL_DMA_IRQHandler+0x168>
 80058de:	2302      	movs	r3, #2
 80058e0:	4a27      	ldr	r2, [pc, #156]	; (8005980 <HAL_DMA_IRQHandler+0x208>)
 80058e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d034      	beq.n	800595e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80058fc:	e02f      	b.n	800595e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2208      	movs	r2, #8
 8005904:	409a      	lsls	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d028      	beq.n	8005960 <HAL_DMA_IRQHandler+0x1e8>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d023      	beq.n	8005960 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 020e 	bic.w	r2, r2, #14
 8005926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f202 	lsl.w	r2, r1, r2
 8005936:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
    }
  }
  return;
 800595e:	bf00      	nop
 8005960:	bf00      	nop
}
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40020008 	.word	0x40020008
 800596c:	4002001c 	.word	0x4002001c
 8005970:	40020030 	.word	0x40020030
 8005974:	40020044 	.word	0x40020044
 8005978:	40020058 	.word	0x40020058
 800597c:	4002006c 	.word	0x4002006c
 8005980:	40020000 	.word	0x40020000

08005984 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	2101      	movs	r1, #1
 800599c:	fa01 f202 	lsl.w	r2, r1, r2
 80059a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d108      	bne.n	80059c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059c2:	e007      	b.n	80059d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059fa:	4b2f      	ldr	r3, [pc, #188]	; (8005ab8 <HAL_FLASH_Program+0xd8>)
 80059fc:	7e1b      	ldrb	r3, [r3, #24]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_FLASH_Program+0x26>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e054      	b.n	8005ab0 <HAL_FLASH_Program+0xd0>
 8005a06:	4b2c      	ldr	r3, [pc, #176]	; (8005ab8 <HAL_FLASH_Program+0xd8>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a10:	f000 f8b2 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d144      	bne.n	8005aa8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d102      	bne.n	8005a2a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005a24:	2301      	movs	r3, #1
 8005a26:	757b      	strb	r3, [r7, #21]
 8005a28:	e007      	b.n	8005a3a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d102      	bne.n	8005a36 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005a30:	2302      	movs	r3, #2
 8005a32:	757b      	strb	r3, [r7, #21]
 8005a34:	e001      	b.n	8005a3a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005a36:	2304      	movs	r3, #4
 8005a38:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75bb      	strb	r3, [r7, #22]
 8005a3e:	e02d      	b.n	8005a9c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	005a      	lsls	r2, r3, #1
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	eb02 0c03 	add.w	ip, r2, r3
 8005a4a:	7dbb      	ldrb	r3, [r7, #22]
 8005a4c:	0119      	lsls	r1, r3, #4
 8005a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a52:	f1c1 0620 	rsb	r6, r1, #32
 8005a56:	f1a1 0020 	sub.w	r0, r1, #32
 8005a5a:	fa22 f401 	lsr.w	r4, r2, r1
 8005a5e:	fa03 f606 	lsl.w	r6, r3, r6
 8005a62:	4334      	orrs	r4, r6
 8005a64:	fa23 f000 	lsr.w	r0, r3, r0
 8005a68:	4304      	orrs	r4, r0
 8005a6a:	fa23 f501 	lsr.w	r5, r3, r1
 8005a6e:	b2a3      	uxth	r3, r4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4660      	mov	r0, ip
 8005a74:	f000 f864 	bl	8005b40 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a7c:	f000 f87c 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005a80:	4603      	mov	r3, r0
 8005a82:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <HAL_FLASH_Program+0xdc>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <HAL_FLASH_Program+0xdc>)
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005a96:	7dbb      	ldrb	r3, [r7, #22]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	75bb      	strb	r3, [r7, #22]
 8005a9c:	7dba      	ldrb	r2, [r7, #22]
 8005a9e:	7d7b      	ldrb	r3, [r7, #21]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3cd      	bcc.n	8005a40 <HAL_FLASH_Program+0x60>
 8005aa4:	e000      	b.n	8005aa8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005aa6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <HAL_FLASH_Program+0xd8>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	761a      	strb	r2, [r3, #24]

  return status;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab8:	20003ca8 	.word	0x20003ca8
 8005abc:	40022000 	.word	0x40022000

08005ac0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <HAL_FLASH_Unlock+0x40>)
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_FLASH_Unlock+0x40>)
 8005ad8:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <HAL_FLASH_Unlock+0x44>)
 8005ada:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_FLASH_Unlock+0x40>)
 8005ade:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <HAL_FLASH_Unlock+0x48>)
 8005ae0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <HAL_FLASH_Unlock+0x40>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005af2:	79fb      	ldrb	r3, [r7, #7]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40022000 	.word	0x40022000
 8005b04:	45670123 	.word	0x45670123
 8005b08:	cdef89ab 	.word	0xcdef89ab

08005b0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_FLASH_Lock+0x1c>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <HAL_FLASH_Lock+0x1c>)
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40022000 	.word	0x40022000

08005b2c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <HAL_FLASH_GetError+0x10>)
 8005b32:	69db      	ldr	r3, [r3, #28]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr
 8005b3c:	20003ca8 	.word	0x20003ca8

08005b40 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <FLASH_Program_HalfWord+0x30>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <FLASH_Program_HalfWord+0x34>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	4a07      	ldr	r2, [pc, #28]	; (8005b74 <FLASH_Program_HalfWord+0x34>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	887a      	ldrh	r2, [r7, #2]
 8005b62:	801a      	strh	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20003ca8 	.word	0x20003ca8
 8005b74:	40022000 	.word	0x40022000

08005b78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005b80:	f7ff f842 	bl	8004c08 <HAL_GetTick>
 8005b84:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005b86:	e010      	b.n	8005baa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d00c      	beq.n	8005baa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <FLASH_WaitForLastOperation+0x2e>
 8005b96:	f7ff f837 	bl	8004c08 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d201      	bcs.n	8005baa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e025      	b.n	8005bf6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005baa:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <FLASH_WaitForLastOperation+0x88>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e8      	bne.n	8005b88 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <FLASH_WaitForLastOperation+0x88>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <FLASH_WaitForLastOperation+0x88>)
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <FLASH_WaitForLastOperation+0x88>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <FLASH_WaitForLastOperation+0x88>)
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <FLASH_WaitForLastOperation+0x88>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005bec:	f000 f80a 	bl	8005c04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000

08005c04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005c0e:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <FLASH_SetErrorCode+0x9c>)
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <FLASH_SetErrorCode+0x9c>)
 8005c24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f043 0310 	orr.w	r3, r3, #16
 8005c2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <FLASH_SetErrorCode+0x9c>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <FLASH_SetErrorCode+0x9c>)
 8005c44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <FLASH_SetErrorCode+0x9c>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f043 0304 	orr.w	r3, r3, #4
 8005c62:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <FLASH_SetErrorCode+0x9c>)
 8005c64:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	4a0c      	ldr	r2, [pc, #48]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f240 1201 	movw	r2, #257	; 0x101
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d106      	bne.n	8005c8a <FLASH_SetErrorCode+0x86>
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4a06      	ldr	r2, [pc, #24]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	61d3      	str	r3, [r2, #28]
}  
 8005c88:	e002      	b.n	8005c90 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005c8a:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <FLASH_SetErrorCode+0x98>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60d3      	str	r3, [r2, #12]
}  
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	20003ca8 	.word	0x20003ca8

08005ca4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <HAL_FLASHEx_Erase+0xd0>)
 8005cb8:	7e1b      	ldrb	r3, [r3, #24]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_FLASHEx_Erase+0x1e>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e053      	b.n	8005d6a <HAL_FLASHEx_Erase+0xc6>
 8005cc2:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <HAL_FLASHEx_Erase+0xd0>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d116      	bne.n	8005cfe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005cd4:	f7ff ff50 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d141      	bne.n	8005d62 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f000 f84c 	bl	8005d7c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ce4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ce8:	f7ff ff46 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005cf0:	4b21      	ldr	r3, [pc, #132]	; (8005d78 <HAL_FLASHEx_Erase+0xd4>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <HAL_FLASHEx_Erase+0xd4>)
 8005cf6:	f023 0304 	bic.w	r3, r3, #4
 8005cfa:	6113      	str	r3, [r2, #16]
 8005cfc:	e031      	b.n	8005d62 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005cfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d02:	f7ff ff39 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d12a      	bne.n	8005d62 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d12:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	e019      	b.n	8005d50 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005d1c:	68b8      	ldr	r0, [r7, #8]
 8005d1e:	f000 f849 	bl	8005db4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d26:	f7ff ff27 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005d2e:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <HAL_FLASHEx_Erase+0xd4>)
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <HAL_FLASHEx_Erase+0xd4>)
 8005d34:	f023 0302 	bic.w	r3, r3, #2
 8005d38:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	601a      	str	r2, [r3, #0]
            break;
 8005d46:	e00c      	b.n	8005d62 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	029a      	lsls	r2, r3, #10
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3dc      	bcc.n	8005d1c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <HAL_FLASHEx_Erase+0xd0>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	761a      	strb	r2, [r3, #24]

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20003ca8 	.word	0x20003ca8
 8005d78:	40022000 	.word	0x40022000

08005d7c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <FLASH_MassErase+0x30>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <FLASH_MassErase+0x34>)
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <FLASH_MassErase+0x34>)
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <FLASH_MassErase+0x34>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <FLASH_MassErase+0x34>)
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	20003ca8 	.word	0x20003ca8
 8005db0:	40022000 	.word	0x40022000

08005db4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <FLASH_PageErase+0x38>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <FLASH_PageErase+0x3c>)
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <FLASH_PageErase+0x3c>)
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005dce:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <FLASH_PageErase+0x3c>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <FLASH_PageErase+0x3c>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	4a05      	ldr	r2, [pc, #20]	; (8005df0 <FLASH_PageErase+0x3c>)
 8005dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dde:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20003ca8 	.word	0x20003ca8
 8005df0:	40022000 	.word	0x40022000

08005df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b08b      	sub	sp, #44	; 0x2c
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e06:	e169      	b.n	80060dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e08:	2201      	movs	r2, #1
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	f040 8158 	bne.w	80060d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4a9a      	ldr	r2, [pc, #616]	; (8006094 <HAL_GPIO_Init+0x2a0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d05e      	beq.n	8005eee <HAL_GPIO_Init+0xfa>
 8005e30:	4a98      	ldr	r2, [pc, #608]	; (8006094 <HAL_GPIO_Init+0x2a0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d875      	bhi.n	8005f22 <HAL_GPIO_Init+0x12e>
 8005e36:	4a98      	ldr	r2, [pc, #608]	; (8006098 <HAL_GPIO_Init+0x2a4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d058      	beq.n	8005eee <HAL_GPIO_Init+0xfa>
 8005e3c:	4a96      	ldr	r2, [pc, #600]	; (8006098 <HAL_GPIO_Init+0x2a4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d86f      	bhi.n	8005f22 <HAL_GPIO_Init+0x12e>
 8005e42:	4a96      	ldr	r2, [pc, #600]	; (800609c <HAL_GPIO_Init+0x2a8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d052      	beq.n	8005eee <HAL_GPIO_Init+0xfa>
 8005e48:	4a94      	ldr	r2, [pc, #592]	; (800609c <HAL_GPIO_Init+0x2a8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d869      	bhi.n	8005f22 <HAL_GPIO_Init+0x12e>
 8005e4e:	4a94      	ldr	r2, [pc, #592]	; (80060a0 <HAL_GPIO_Init+0x2ac>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d04c      	beq.n	8005eee <HAL_GPIO_Init+0xfa>
 8005e54:	4a92      	ldr	r2, [pc, #584]	; (80060a0 <HAL_GPIO_Init+0x2ac>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d863      	bhi.n	8005f22 <HAL_GPIO_Init+0x12e>
 8005e5a:	4a92      	ldr	r2, [pc, #584]	; (80060a4 <HAL_GPIO_Init+0x2b0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d046      	beq.n	8005eee <HAL_GPIO_Init+0xfa>
 8005e60:	4a90      	ldr	r2, [pc, #576]	; (80060a4 <HAL_GPIO_Init+0x2b0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d85d      	bhi.n	8005f22 <HAL_GPIO_Init+0x12e>
 8005e66:	2b12      	cmp	r3, #18
 8005e68:	d82a      	bhi.n	8005ec0 <HAL_GPIO_Init+0xcc>
 8005e6a:	2b12      	cmp	r3, #18
 8005e6c:	d859      	bhi.n	8005f22 <HAL_GPIO_Init+0x12e>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_GPIO_Init+0x80>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005eef 	.word	0x08005eef
 8005e78:	08005ec9 	.word	0x08005ec9
 8005e7c:	08005edb 	.word	0x08005edb
 8005e80:	08005f1d 	.word	0x08005f1d
 8005e84:	08005f23 	.word	0x08005f23
 8005e88:	08005f23 	.word	0x08005f23
 8005e8c:	08005f23 	.word	0x08005f23
 8005e90:	08005f23 	.word	0x08005f23
 8005e94:	08005f23 	.word	0x08005f23
 8005e98:	08005f23 	.word	0x08005f23
 8005e9c:	08005f23 	.word	0x08005f23
 8005ea0:	08005f23 	.word	0x08005f23
 8005ea4:	08005f23 	.word	0x08005f23
 8005ea8:	08005f23 	.word	0x08005f23
 8005eac:	08005f23 	.word	0x08005f23
 8005eb0:	08005f23 	.word	0x08005f23
 8005eb4:	08005f23 	.word	0x08005f23
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	4a79      	ldr	r2, [pc, #484]	; (80060a8 <HAL_GPIO_Init+0x2b4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005ec6:	e02c      	b.n	8005f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	623b      	str	r3, [r7, #32]
          break;
 8005ece:	e029      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	623b      	str	r3, [r7, #32]
          break;
 8005ed8:	e024      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	623b      	str	r3, [r7, #32]
          break;
 8005ee2:	e01f      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	623b      	str	r3, [r7, #32]
          break;
 8005eec:	e01a      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	623b      	str	r3, [r7, #32]
          break;
 8005efa:	e013      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d105      	bne.n	8005f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f04:	2308      	movs	r3, #8
 8005f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	611a      	str	r2, [r3, #16]
          break;
 8005f0e:	e009      	b.n	8005f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f10:	2308      	movs	r3, #8
 8005f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	615a      	str	r2, [r3, #20]
          break;
 8005f1a:	e003      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	623b      	str	r3, [r7, #32]
          break;
 8005f20:	e000      	b.n	8005f24 <HAL_GPIO_Init+0x130>
          break;
 8005f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2bff      	cmp	r3, #255	; 0xff
 8005f28:	d801      	bhi.n	8005f2e <HAL_GPIO_Init+0x13a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	e001      	b.n	8005f32 <HAL_GPIO_Init+0x13e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3304      	adds	r3, #4
 8005f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2bff      	cmp	r3, #255	; 0xff
 8005f38:	d802      	bhi.n	8005f40 <HAL_GPIO_Init+0x14c>
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	e002      	b.n	8005f46 <HAL_GPIO_Init+0x152>
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	3b08      	subs	r3, #8
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	210f      	movs	r1, #15
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	401a      	ands	r2, r3
 8005f58:	6a39      	ldr	r1, [r7, #32]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f60:	431a      	orrs	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80b1 	beq.w	80060d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f74:	4b4d      	ldr	r3, [pc, #308]	; (80060ac <HAL_GPIO_Init+0x2b8>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	4a4c      	ldr	r2, [pc, #304]	; (80060ac <HAL_GPIO_Init+0x2b8>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6193      	str	r3, [r2, #24]
 8005f80:	4b4a      	ldr	r3, [pc, #296]	; (80060ac <HAL_GPIO_Init+0x2b8>)
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f8c:	4a48      	ldr	r2, [pc, #288]	; (80060b0 <HAL_GPIO_Init+0x2bc>)
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	3302      	adds	r3, #2
 8005f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	220f      	movs	r2, #15
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a40      	ldr	r2, [pc, #256]	; (80060b4 <HAL_GPIO_Init+0x2c0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_GPIO_Init+0x1ec>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a3f      	ldr	r2, [pc, #252]	; (80060b8 <HAL_GPIO_Init+0x2c4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00d      	beq.n	8005fdc <HAL_GPIO_Init+0x1e8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3e      	ldr	r2, [pc, #248]	; (80060bc <HAL_GPIO_Init+0x2c8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d007      	beq.n	8005fd8 <HAL_GPIO_Init+0x1e4>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3d      	ldr	r2, [pc, #244]	; (80060c0 <HAL_GPIO_Init+0x2cc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_GPIO_Init+0x1e0>
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e006      	b.n	8005fe2 <HAL_GPIO_Init+0x1ee>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	e004      	b.n	8005fe2 <HAL_GPIO_Init+0x1ee>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e002      	b.n	8005fe2 <HAL_GPIO_Init+0x1ee>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_GPIO_Init+0x1ee>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe4:	f002 0203 	and.w	r2, r2, #3
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	4093      	lsls	r3, r2
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ff2:	492f      	ldr	r1, [pc, #188]	; (80060b0 <HAL_GPIO_Init+0x2bc>)
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800600c:	4b2d      	ldr	r3, [pc, #180]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	492c      	ldr	r1, [pc, #176]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	4313      	orrs	r3, r2
 8006016:	600b      	str	r3, [r1, #0]
 8006018:	e006      	b.n	8006028 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800601a:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	43db      	mvns	r3, r3
 8006022:	4928      	ldr	r1, [pc, #160]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006024:	4013      	ands	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d006      	beq.n	8006042 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	4922      	ldr	r1, [pc, #136]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	4313      	orrs	r3, r2
 800603e:	604b      	str	r3, [r1, #4]
 8006040:	e006      	b.n	8006050 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	43db      	mvns	r3, r3
 800604a:	491e      	ldr	r1, [pc, #120]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800604c:	4013      	ands	r3, r2
 800604e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800605c:	4b19      	ldr	r3, [pc, #100]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	4918      	ldr	r1, [pc, #96]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	4313      	orrs	r3, r2
 8006066:	608b      	str	r3, [r1, #8]
 8006068:	e006      	b.n	8006078 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800606a:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	43db      	mvns	r3, r3
 8006072:	4914      	ldr	r1, [pc, #80]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006074:	4013      	ands	r3, r2
 8006076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d021      	beq.n	80060c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	490e      	ldr	r1, [pc, #56]	; (80060c4 <HAL_GPIO_Init+0x2d0>)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	60cb      	str	r3, [r1, #12]
 8006090:	e021      	b.n	80060d6 <HAL_GPIO_Init+0x2e2>
 8006092:	bf00      	nop
 8006094:	10320000 	.word	0x10320000
 8006098:	10310000 	.word	0x10310000
 800609c:	10220000 	.word	0x10220000
 80060a0:	10210000 	.word	0x10210000
 80060a4:	10120000 	.word	0x10120000
 80060a8:	10110000 	.word	0x10110000
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40010800 	.word	0x40010800
 80060b8:	40010c00 	.word	0x40010c00
 80060bc:	40011000 	.word	0x40011000
 80060c0:	40011400 	.word	0x40011400
 80060c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <HAL_GPIO_Init+0x304>)
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	4909      	ldr	r1, [pc, #36]	; (80060f8 <HAL_GPIO_Init+0x304>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f47f ae8e 	bne.w	8005e08 <HAL_GPIO_Init+0x14>
  }
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	372c      	adds	r7, #44	; 0x2c
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	40010400 	.word	0x40010400

080060fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	887b      	ldrh	r3, [r7, #2]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e001      	b.n	800611e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	807b      	strh	r3, [r7, #2]
 8006136:	4613      	mov	r3, r2
 8006138:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800613a:	787b      	ldrb	r3, [r7, #1]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006146:	e003      	b.n	8006150 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006148:	887b      	ldrh	r3, [r7, #2]
 800614a:	041a      	lsls	r2, r3, #16
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	611a      	str	r2, [r3, #16]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
	...

0800615c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e12b      	b.n	80063c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fe fb48 	bl	8004818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	; 0x24
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061c0:	f000 fce4 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 80061c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4a81      	ldr	r2, [pc, #516]	; (80063d0 <HAL_I2C_Init+0x274>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d807      	bhi.n	80061e0 <HAL_I2C_Init+0x84>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a80      	ldr	r2, [pc, #512]	; (80063d4 <HAL_I2C_Init+0x278>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bf94      	ite	ls
 80061d8:	2301      	movls	r3, #1
 80061da:	2300      	movhi	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e006      	b.n	80061ee <HAL_I2C_Init+0x92>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a7d      	ldr	r2, [pc, #500]	; (80063d8 <HAL_I2C_Init+0x27c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bf94      	ite	ls
 80061e8:	2301      	movls	r3, #1
 80061ea:	2300      	movhi	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e0e7      	b.n	80063c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a78      	ldr	r2, [pc, #480]	; (80063dc <HAL_I2C_Init+0x280>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	0c9b      	lsrs	r3, r3, #18
 8006200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4a6a      	ldr	r2, [pc, #424]	; (80063d0 <HAL_I2C_Init+0x274>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d802      	bhi.n	8006230 <HAL_I2C_Init+0xd4>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	3301      	adds	r3, #1
 800622e:	e009      	b.n	8006244 <HAL_I2C_Init+0xe8>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	4a69      	ldr	r2, [pc, #420]	; (80063e0 <HAL_I2C_Init+0x284>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	099b      	lsrs	r3, r3, #6
 8006242:	3301      	adds	r3, #1
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	430b      	orrs	r3, r1
 800624a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	495c      	ldr	r1, [pc, #368]	; (80063d0 <HAL_I2C_Init+0x274>)
 8006260:	428b      	cmp	r3, r1
 8006262:	d819      	bhi.n	8006298 <HAL_I2C_Init+0x13c>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1e59      	subs	r1, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006278:	400b      	ands	r3, r1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_I2C_Init+0x138>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1e59      	subs	r1, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	fbb1 f3f3 	udiv	r3, r1, r3
 800628c:	3301      	adds	r3, #1
 800628e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006292:	e051      	b.n	8006338 <HAL_I2C_Init+0x1dc>
 8006294:	2304      	movs	r3, #4
 8006296:	e04f      	b.n	8006338 <HAL_I2C_Init+0x1dc>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d111      	bne.n	80062c4 <HAL_I2C_Init+0x168>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1e58      	subs	r0, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	440b      	add	r3, r1
 80062ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b2:	3301      	adds	r3, #1
 80062b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	e012      	b.n	80062ea <HAL_I2C_Init+0x18e>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1e58      	subs	r0, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	0099      	lsls	r1, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062da:	3301      	adds	r3, #1
 80062dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bf0c      	ite	eq
 80062e4:	2301      	moveq	r3, #1
 80062e6:	2300      	movne	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Init+0x196>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e022      	b.n	8006338 <HAL_I2C_Init+0x1dc>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10e      	bne.n	8006318 <HAL_I2C_Init+0x1bc>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1e58      	subs	r0, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	440b      	add	r3, r1
 8006308:	fbb0 f3f3 	udiv	r3, r0, r3
 800630c:	3301      	adds	r3, #1
 800630e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006316:	e00f      	b.n	8006338 <HAL_I2C_Init+0x1dc>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1e58      	subs	r0, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6859      	ldr	r1, [r3, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	0099      	lsls	r1, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	fbb0 f3f3 	udiv	r3, r0, r3
 800632e:	3301      	adds	r3, #1
 8006330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	6809      	ldr	r1, [r1, #0]
 800633c:	4313      	orrs	r3, r2
 800633e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6911      	ldr	r1, [r2, #16]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68d2      	ldr	r2, [r2, #12]
 8006372:	4311      	orrs	r1, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	430b      	orrs	r3, r1
 800637a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	000186a0 	.word	0x000186a0
 80063d4:	001e847f 	.word	0x001e847f
 80063d8:	003d08ff 	.word	0x003d08ff
 80063dc:	431bde83 	.word	0x431bde83
 80063e0:	10624dd3 	.word	0x10624dd3

080063e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e272      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8087 	beq.w	8006512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006404:	4b92      	ldr	r3, [pc, #584]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 030c 	and.w	r3, r3, #12
 800640c:	2b04      	cmp	r3, #4
 800640e:	d00c      	beq.n	800642a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006410:	4b8f      	ldr	r3, [pc, #572]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b08      	cmp	r3, #8
 800641a:	d112      	bne.n	8006442 <HAL_RCC_OscConfig+0x5e>
 800641c:	4b8c      	ldr	r3, [pc, #560]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006428:	d10b      	bne.n	8006442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642a:	4b89      	ldr	r3, [pc, #548]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d06c      	beq.n	8006510 <HAL_RCC_OscConfig+0x12c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d168      	bne.n	8006510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e24c      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644a:	d106      	bne.n	800645a <HAL_RCC_OscConfig+0x76>
 800644c:	4b80      	ldr	r3, [pc, #512]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a7f      	ldr	r2, [pc, #508]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e02e      	b.n	80064b8 <HAL_RCC_OscConfig+0xd4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10c      	bne.n	800647c <HAL_RCC_OscConfig+0x98>
 8006462:	4b7b      	ldr	r3, [pc, #492]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a7a      	ldr	r2, [pc, #488]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4b78      	ldr	r3, [pc, #480]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a77      	ldr	r2, [pc, #476]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e01d      	b.n	80064b8 <HAL_RCC_OscConfig+0xd4>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0xbc>
 8006486:	4b72      	ldr	r3, [pc, #456]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a71      	ldr	r2, [pc, #452]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800648c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b6f      	ldr	r3, [pc, #444]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a6e      	ldr	r2, [pc, #440]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0xd4>
 80064a0:	4b6b      	ldr	r3, [pc, #428]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a6a      	ldr	r2, [pc, #424]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b68      	ldr	r3, [pc, #416]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a67      	ldr	r2, [pc, #412]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80064b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fe fba2 	bl	8004c08 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c8:	f7fe fb9e 	bl	8004c08 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	; 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e200      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	4b5d      	ldr	r3, [pc, #372]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0xe4>
 80064e6:	e014      	b.n	8006512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fe fb8e 	bl	8004c08 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fe fb8a 	bl	8004c08 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e1ec      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	4b53      	ldr	r3, [pc, #332]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x10c>
 800650e:	e000      	b.n	8006512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d063      	beq.n	80065e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800651e:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800652a:	4b49      	ldr	r3, [pc, #292]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b08      	cmp	r3, #8
 8006534:	d11c      	bne.n	8006570 <HAL_RCC_OscConfig+0x18c>
 8006536:	4b46      	ldr	r3, [pc, #280]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d116      	bne.n	8006570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	4b43      	ldr	r3, [pc, #268]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_RCC_OscConfig+0x176>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d001      	beq.n	800655a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e1c0      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655a:	4b3d      	ldr	r3, [pc, #244]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4939      	ldr	r1, [pc, #228]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800656e:	e03a      	b.n	80065e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006578:	4b36      	ldr	r3, [pc, #216]	; (8006654 <HAL_RCC_OscConfig+0x270>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657e:	f7fe fb43 	bl	8004c08 <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006586:	f7fe fb3f 	bl	8004c08 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e1a1      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006598:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a4:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	4927      	ldr	r1, [pc, #156]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
 80065b8:	e015      	b.n	80065e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ba:	4b26      	ldr	r3, [pc, #152]	; (8006654 <HAL_RCC_OscConfig+0x270>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c0:	f7fe fb22 	bl	8004c08 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c8:	f7fe fb1e 	bl	8004c08 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e180      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03a      	beq.n	8006668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d019      	beq.n	800662e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065fa:	4b17      	ldr	r3, [pc, #92]	; (8006658 <HAL_RCC_OscConfig+0x274>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006600:	f7fe fb02 	bl	8004c08 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006608:	f7fe fafe 	bl	8004c08 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e160      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <HAL_RCC_OscConfig+0x26c>)
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006626:	2001      	movs	r0, #1
 8006628:	f000 fad8 	bl	8006bdc <RCC_Delay>
 800662c:	e01c      	b.n	8006668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <HAL_RCC_OscConfig+0x274>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006634:	f7fe fae8 	bl	8004c08 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800663a:	e00f      	b.n	800665c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800663c:	f7fe fae4 	bl	8004c08 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d908      	bls.n	800665c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e146      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
 800664e:	bf00      	nop
 8006650:	40021000 	.word	0x40021000
 8006654:	42420000 	.word	0x42420000
 8006658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800665c:	4b92      	ldr	r3, [pc, #584]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e9      	bne.n	800663c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80a6 	beq.w	80067c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800667a:	4b8b      	ldr	r3, [pc, #556]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10d      	bne.n	80066a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006686:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	4a87      	ldr	r2, [pc, #540]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	61d3      	str	r3, [r2, #28]
 8006692:	4b85      	ldr	r3, [pc, #532]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a2:	4b82      	ldr	r3, [pc, #520]	; (80068ac <HAL_RCC_OscConfig+0x4c8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d118      	bne.n	80066e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ae:	4b7f      	ldr	r3, [pc, #508]	; (80068ac <HAL_RCC_OscConfig+0x4c8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7e      	ldr	r2, [pc, #504]	; (80068ac <HAL_RCC_OscConfig+0x4c8>)
 80066b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ba:	f7fe faa5 	bl	8004c08 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c2:	f7fe faa1 	bl	8004c08 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b64      	cmp	r3, #100	; 0x64
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e103      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d4:	4b75      	ldr	r3, [pc, #468]	; (80068ac <HAL_RCC_OscConfig+0x4c8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f0      	beq.n	80066c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d106      	bne.n	80066f6 <HAL_RCC_OscConfig+0x312>
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	4a6e      	ldr	r2, [pc, #440]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	6213      	str	r3, [r2, #32]
 80066f4:	e02d      	b.n	8006752 <HAL_RCC_OscConfig+0x36e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10c      	bne.n	8006718 <HAL_RCC_OscConfig+0x334>
 80066fe:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	4a69      	ldr	r2, [pc, #420]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	6213      	str	r3, [r2, #32]
 800670a:	4b67      	ldr	r3, [pc, #412]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4a66      	ldr	r2, [pc, #408]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006710:	f023 0304 	bic.w	r3, r3, #4
 8006714:	6213      	str	r3, [r2, #32]
 8006716:	e01c      	b.n	8006752 <HAL_RCC_OscConfig+0x36e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b05      	cmp	r3, #5
 800671e:	d10c      	bne.n	800673a <HAL_RCC_OscConfig+0x356>
 8006720:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	4a60      	ldr	r2, [pc, #384]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006726:	f043 0304 	orr.w	r3, r3, #4
 800672a:	6213      	str	r3, [r2, #32]
 800672c:	4b5e      	ldr	r3, [pc, #376]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	4a5d      	ldr	r2, [pc, #372]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	6213      	str	r3, [r2, #32]
 8006738:	e00b      	b.n	8006752 <HAL_RCC_OscConfig+0x36e>
 800673a:	4b5b      	ldr	r3, [pc, #364]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	4a5a      	ldr	r2, [pc, #360]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	6213      	str	r3, [r2, #32]
 8006746:	4b58      	ldr	r3, [pc, #352]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	4a57      	ldr	r2, [pc, #348]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800674c:	f023 0304 	bic.w	r3, r3, #4
 8006750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d015      	beq.n	8006786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675a:	f7fe fa55 	bl	8004c08 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006762:	f7fe fa51 	bl	8004c08 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006770:	4293      	cmp	r3, r2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e0b1      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006778:	4b4b      	ldr	r3, [pc, #300]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0ee      	beq.n	8006762 <HAL_RCC_OscConfig+0x37e>
 8006784:	e014      	b.n	80067b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006786:	f7fe fa3f 	bl	8004c08 <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800678c:	e00a      	b.n	80067a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800678e:	f7fe fa3b 	bl	8004c08 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	f241 3288 	movw	r2, #5000	; 0x1388
 800679c:	4293      	cmp	r3, r2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e09b      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a4:	4b40      	ldr	r3, [pc, #256]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1ee      	bne.n	800678e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d105      	bne.n	80067c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b6:	4b3c      	ldr	r3, [pc, #240]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	4a3b      	ldr	r2, [pc, #236]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8087 	beq.w	80068da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067cc:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 030c 	and.w	r3, r3, #12
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d061      	beq.n	800689c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d146      	bne.n	800686e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e0:	4b33      	ldr	r3, [pc, #204]	; (80068b0 <HAL_RCC_OscConfig+0x4cc>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e6:	f7fe fa0f 	bl	8004c08 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ee:	f7fe fa0b 	bl	8004c08 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e06d      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006800:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1f0      	bne.n	80067ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	d108      	bne.n	8006828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	4921      	ldr	r1, [pc, #132]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006824:	4313      	orrs	r3, r2
 8006826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006828:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a19      	ldr	r1, [r3, #32]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	430b      	orrs	r3, r1
 800683a:	491b      	ldr	r1, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 800683c:	4313      	orrs	r3, r2
 800683e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <HAL_RCC_OscConfig+0x4cc>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006846:	f7fe f9df 	bl	8004c08 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684e:	f7fe f9db 	bl	8004c08 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e03d      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <HAL_RCC_OscConfig+0x46a>
 800686c:	e035      	b.n	80068da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686e:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCC_OscConfig+0x4cc>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006874:	f7fe f9c8 	bl	8004c08 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800687c:	f7fe f9c4 	bl	8004c08 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e026      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <HAL_RCC_OscConfig+0x4c4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x498>
 800689a:	e01e      	b.n	80068da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e019      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40007000 	.word	0x40007000
 80068b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_OscConfig+0x500>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d001      	beq.n	80068da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40021000 	.word	0x40021000

080068e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0d0      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068fc:	4b6a      	ldr	r3, [pc, #424]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d910      	bls.n	800692c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800690a:	4b67      	ldr	r3, [pc, #412]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f023 0207 	bic.w	r2, r3, #7
 8006912:	4965      	ldr	r1, [pc, #404]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	4313      	orrs	r3, r2
 8006918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b63      	ldr	r3, [pc, #396]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0b8      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d020      	beq.n	800697a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006944:	4b59      	ldr	r3, [pc, #356]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a58      	ldr	r2, [pc, #352]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 800694a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800694e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800695c:	4b53      	ldr	r3, [pc, #332]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a52      	ldr	r2, [pc, #328]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006962:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006968:	4b50      	ldr	r3, [pc, #320]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	494d      	ldr	r1, [pc, #308]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d040      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d107      	bne.n	800699e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698e:	4b47      	ldr	r3, [pc, #284]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d115      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e07f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d107      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a6:	4b41      	ldr	r3, [pc, #260]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e073      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b6:	4b3d      	ldr	r3, [pc, #244]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e06b      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069c6:	4b39      	ldr	r3, [pc, #228]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f023 0203 	bic.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4936      	ldr	r1, [pc, #216]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d8:	f7fe f916 	bl	8004c08 <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069de:	e00a      	b.n	80069f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e0:	f7fe f912 	bl	8004c08 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e053      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f6:	4b2d      	ldr	r3, [pc, #180]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 020c 	and.w	r2, r3, #12
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d1eb      	bne.n	80069e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a08:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d210      	bcs.n	8006a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a16:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f023 0207 	bic.w	r2, r3, #7
 8006a1e:	4922      	ldr	r1, [pc, #136]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a26:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d001      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e032      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a44:	4b19      	ldr	r3, [pc, #100]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4916      	ldr	r1, [pc, #88]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	490e      	ldr	r1, [pc, #56]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a76:	f000 f821 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	091b      	lsrs	r3, r3, #4
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	490a      	ldr	r1, [pc, #40]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a88:	5ccb      	ldrb	r3, [r1, r3]
 8006a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8006a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe f874 	bl	8004b84 <HAL_InitTick>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40022000 	.word	0x40022000
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	080089e0 	.word	0x080089e0
 8006ab4:	2000003c 	.word	0x2000003c
 8006ab8:	20000040 	.word	0x20000040

08006abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006abc:	b490      	push	{r4, r7}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ac2:	4b29      	ldr	r3, [pc, #164]	; (8006b68 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ac4:	1d3c      	adds	r4, r7, #4
 8006ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006acc:	f240 2301 	movw	r3, #513	; 0x201
 8006ad0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006ae6:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d002      	beq.n	8006afc <HAL_RCC_GetSysClockFreq+0x40>
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d003      	beq.n	8006b02 <HAL_RCC_GetSysClockFreq+0x46>
 8006afa:	e02b      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006afe:	623b      	str	r3, [r7, #32]
      break;
 8006b00:	e02b      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	0c9b      	lsrs	r3, r3, #18
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	3328      	adds	r3, #40	; 0x28
 8006b0c:	443b      	add	r3, r7
 8006b0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d012      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	0c5b      	lsrs	r3, r3, #17
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	3328      	adds	r3, #40	; 0x28
 8006b2a:	443b      	add	r3, r7
 8006b2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	4a0e      	ldr	r2, [pc, #56]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b36:	fb03 f202 	mul.w	r2, r3, r2
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
 8006b42:	e004      	b.n	8006b4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4a0b      	ldr	r2, [pc, #44]	; (8006b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	623b      	str	r3, [r7, #32]
      break;
 8006b52:	e002      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b56:	623b      	str	r3, [r7, #32]
      break;
 8006b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3728      	adds	r7, #40	; 0x28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc90      	pop	{r4, r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	080089d0 	.word	0x080089d0
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	007a1200 	.word	0x007a1200
 8006b74:	003d0900 	.word	0x003d0900

08006b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	2000003c 	.word	0x2000003c

08006b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b90:	f7ff fff2 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	4903      	ldr	r1, [pc, #12]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	080089f0 	.word	0x080089f0

08006bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bb8:	f7ff ffde 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	0adb      	lsrs	r3, r3, #11
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4903      	ldr	r1, [pc, #12]	; (8006bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	080089f0 	.word	0x080089f0

08006bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <RCC_Delay+0x34>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a0a      	ldr	r2, [pc, #40]	; (8006c14 <RCC_Delay+0x38>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	0a5b      	lsrs	r3, r3, #9
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bf8:	bf00      	nop
  }
  while (Delay --);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1e5a      	subs	r2, r3, #1
 8006bfe:	60fa      	str	r2, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f9      	bne.n	8006bf8 <RCC_Delay+0x1c>
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr
 8006c10:	2000003c 	.word	0x2000003c
 8006c14:	10624dd3 	.word	0x10624dd3

08006c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d07d      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c34:	2300      	movs	r3, #0
 8006c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c38:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c44:	4b4c      	ldr	r3, [pc, #304]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	4a4b      	ldr	r2, [pc, #300]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	61d3      	str	r3, [r2, #28]
 8006c50:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c60:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d118      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6c:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a42      	ldr	r2, [pc, #264]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c78:	f7fd ffc6 	bl	8004c08 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7e:	e008      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fd ffc2 	bl	8004c08 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b64      	cmp	r3, #100	; 0x64
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e06d      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c92:	4b3a      	ldr	r3, [pc, #232]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c9e:	4b36      	ldr	r3, [pc, #216]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d02e      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d027      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ccc:	4b2c      	ldr	r3, [pc, #176]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006cd2:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d014      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce2:	f7fd ff91 	bl	8004c08 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fd ff8d 	bl	8004c08 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e036      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d00:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ee      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4917      	ldr	r1, [pc, #92]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d24:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	490b      	ldr	r1, [pc, #44]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d5a:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4904      	ldr	r1, [pc, #16]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40007000 	.word	0x40007000
 8006d80:	42420440 	.word	0x42420440

08006d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e041      	b.n	8006e1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fd fdde 	bl	800496c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f000 fabe 	bl	8007344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d109      	bne.n	8006e48 <HAL_TIM_PWM_Start+0x24>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	e022      	b.n	8006e8e <HAL_TIM_PWM_Start+0x6a>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d109      	bne.n	8006e62 <HAL_TIM_PWM_Start+0x3e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	bf14      	ite	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	2300      	moveq	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	e015      	b.n	8006e8e <HAL_TIM_PWM_Start+0x6a>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d109      	bne.n	8006e7c <HAL_TIM_PWM_Start+0x58>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	bf14      	ite	ne
 8006e74:	2301      	movne	r3, #1
 8006e76:	2300      	moveq	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	e008      	b.n	8006e8e <HAL_TIM_PWM_Start+0x6a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e05e      	b.n	8006f54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0x82>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea4:	e013      	b.n	8006ece <HAL_TIM_PWM_Start+0xaa>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d104      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0x92>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb4:	e00b      	b.n	8006ece <HAL_TIM_PWM_Start+0xaa>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_PWM_Start+0xa2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec4:	e003      	b.n	8006ece <HAL_TIM_PWM_Start+0xaa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fc1e 	bl	8007718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_TIM_PWM_Start+0x138>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIM_PWM_Start+0x138>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIM_PWM_Start+0xfa>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f08:	d009      	beq.n	8006f1e <HAL_TIM_PWM_Start+0xfa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <HAL_TIM_PWM_Start+0x13c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIM_PWM_Start+0xfa>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a12      	ldr	r2, [pc, #72]	; (8006f64 <HAL_TIM_PWM_Start+0x140>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d111      	bne.n	8006f42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b06      	cmp	r3, #6
 8006f2e:	d010      	beq.n	8006f52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	e007      	b.n	8006f52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800

08006f68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e093      	b.n	80070a4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fd fc7f 	bl	8004894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f000 f9c1 	bl	8007344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007008:	f023 030c 	bic.w	r3, r3, #12
 800700c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	4313      	orrs	r3, r2
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	011a      	lsls	r2, r3, #4
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	031b      	lsls	r3, r3, #12
 8007038:	4313      	orrs	r3, r2
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	4313      	orrs	r3, r2
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d110      	bne.n	80070fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d102      	bne.n	80070e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80070e2:	7b7b      	ldrb	r3, [r7, #13]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d001      	beq.n	80070ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e069      	b.n	80071c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070fc:	e031      	b.n	8007162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b04      	cmp	r3, #4
 8007102:	d110      	bne.n	8007126 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d102      	bne.n	8007110 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800710a:	7b3b      	ldrb	r3, [r7, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d001      	beq.n	8007114 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e055      	b.n	80071c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007124:	e01d      	b.n	8007162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d108      	bne.n	800713e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d105      	bne.n	800713e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007132:	7b7b      	ldrb	r3, [r7, #13]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d102      	bne.n	800713e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007138:	7b3b      	ldrb	r3, [r7, #12]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d001      	beq.n	8007142 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e03e      	b.n	80071c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_TIM_Encoder_Start+0xc4>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b04      	cmp	r3, #4
 800716c:	d008      	beq.n	8007180 <HAL_TIM_Encoder_Start+0xd4>
 800716e:	e00f      	b.n	8007190 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f000 facd 	bl	8007718 <TIM_CCxChannelCmd>
      break;
 800717e:	e016      	b.n	80071ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2201      	movs	r2, #1
 8007186:	2104      	movs	r1, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fac5 	bl	8007718 <TIM_CCxChannelCmd>
      break;
 800718e:	e00e      	b.n	80071ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fabd 	bl	8007718 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	2104      	movs	r1, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fab6 	bl	8007718 <TIM_CCxChannelCmd>
      break;
 80071ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0201 	orr.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071de:	2302      	movs	r3, #2
 80071e0:	e0ac      	b.n	800733c <HAL_TIM_PWM_ConfigChannel+0x174>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b0c      	cmp	r3, #12
 80071ee:	f200 809f 	bhi.w	8007330 <HAL_TIM_PWM_ConfigChannel+0x168>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800722d 	.word	0x0800722d
 80071fc:	08007331 	.word	0x08007331
 8007200:	08007331 	.word	0x08007331
 8007204:	08007331 	.word	0x08007331
 8007208:	0800726d 	.word	0x0800726d
 800720c:	08007331 	.word	0x08007331
 8007210:	08007331 	.word	0x08007331
 8007214:	08007331 	.word	0x08007331
 8007218:	080072af 	.word	0x080072af
 800721c:	08007331 	.word	0x08007331
 8007220:	08007331 	.word	0x08007331
 8007224:	08007331 	.word	0x08007331
 8007228:	080072ef 	.word	0x080072ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f8e8 	bl	8007408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0208 	orr.w	r2, r2, #8
 8007246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0204 	bic.w	r2, r2, #4
 8007256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6999      	ldr	r1, [r3, #24]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	619a      	str	r2, [r3, #24]
      break;
 800726a:	e062      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f92e 	bl	80074d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6999      	ldr	r1, [r3, #24]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	021a      	lsls	r2, r3, #8
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	619a      	str	r2, [r3, #24]
      break;
 80072ac:	e041      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f977 	bl	80075a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0208 	orr.w	r2, r2, #8
 80072c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0204 	bic.w	r2, r2, #4
 80072d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69d9      	ldr	r1, [r3, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	61da      	str	r2, [r3, #28]
      break;
 80072ec:	e021      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f9c1 	bl	800767c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69d9      	ldr	r1, [r3, #28]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	021a      	lsls	r2, r3, #8
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	61da      	str	r2, [r3, #28]
      break;
 800732e:	e000      	b.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a29      	ldr	r2, [pc, #164]	; (80073fc <TIM_Base_SetConfig+0xb8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00b      	beq.n	8007374 <TIM_Base_SetConfig+0x30>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007362:	d007      	beq.n	8007374 <TIM_Base_SetConfig+0x30>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a26      	ldr	r2, [pc, #152]	; (8007400 <TIM_Base_SetConfig+0xbc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_Base_SetConfig+0x30>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a25      	ldr	r2, [pc, #148]	; (8007404 <TIM_Base_SetConfig+0xc0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d108      	bne.n	8007386 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <TIM_Base_SetConfig+0xb8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00b      	beq.n	80073a6 <TIM_Base_SetConfig+0x62>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007394:	d007      	beq.n	80073a6 <TIM_Base_SetConfig+0x62>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a19      	ldr	r2, [pc, #100]	; (8007400 <TIM_Base_SetConfig+0xbc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d003      	beq.n	80073a6 <TIM_Base_SetConfig+0x62>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a18      	ldr	r2, [pc, #96]	; (8007404 <TIM_Base_SetConfig+0xc0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d108      	bne.n	80073b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a07      	ldr	r2, [pc, #28]	; (80073fc <TIM_Base_SetConfig+0xb8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d103      	bne.n	80073ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	615a      	str	r2, [r3, #20]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800

08007408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f023 0201 	bic.w	r2, r3, #1
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 0302 	bic.w	r3, r3, #2
 8007450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <TIM_OC1_SetConfig+0xc8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10c      	bne.n	800747e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0308 	bic.w	r3, r3, #8
 800746a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 0304 	bic.w	r3, r3, #4
 800747c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a13      	ldr	r2, [pc, #76]	; (80074d0 <TIM_OC1_SetConfig+0xc8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d111      	bne.n	80074aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800748c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	621a      	str	r2, [r3, #32]
}
 80074c4:	bf00      	nop
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40012c00 	.word	0x40012c00

080074d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f023 0210 	bic.w	r2, r3, #16
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0320 	bic.w	r3, r3, #32
 800751e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <TIM_OC2_SetConfig+0xd0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d10d      	bne.n	8007550 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800753a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	4313      	orrs	r3, r2
 8007546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a14      	ldr	r2, [pc, #80]	; (80075a4 <TIM_OC2_SetConfig+0xd0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d113      	bne.n	8007580 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800755e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr
 80075a4:	40012c00 	.word	0x40012c00

080075a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <TIM_OC3_SetConfig+0xd0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d10d      	bne.n	8007622 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800760c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a14      	ldr	r2, [pc, #80]	; (8007678 <TIM_OC3_SetConfig+0xd0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d113      	bne.n	8007652 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	621a      	str	r2, [r3, #32]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40012c00 	.word	0x40012c00

0800767c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	031b      	lsls	r3, r3, #12
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a0f      	ldr	r2, [pc, #60]	; (8007714 <TIM_OC4_SetConfig+0x98>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d109      	bne.n	80076f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	019b      	lsls	r3, r3, #6
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	621a      	str	r2, [r3, #32]
}
 800770a:	bf00      	nop
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr
 8007714:	40012c00 	.word	0x40012c00

08007718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2201      	movs	r2, #1
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	43db      	mvns	r3, r3
 800773a:	401a      	ands	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a1a      	ldr	r2, [r3, #32]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	fa01 f303 	lsl.w	r3, r1, r3
 8007750:	431a      	orrs	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
}
 8007756:	bf00      	nop
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr

08007760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e046      	b.n	8007806 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00e      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c4:	d009      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d004      	beq.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a10      	ldr	r2, [pc, #64]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d10c      	bne.n	80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr
 8007810:	40012c00 	.word	0x40012c00
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800

0800781c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e03f      	b.n	80078ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fd f8e4 	bl	8004a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800785e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f905 	bl	8007a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b08a      	sub	sp, #40	; 0x28
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d17c      	bne.n	80079d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_UART_Transmit+0x2c>
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e075      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_UART_Transmit+0x3e>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e06e      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2221      	movs	r2, #33	; 0x21
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790a:	f7fd f97d 	bl	8004c08 <HAL_GetTick>
 800790e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d108      	bne.n	8007938 <HAL_UART_Transmit+0x82>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	e003      	b.n	8007940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007948:	e02a      	b.n	80079a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2200      	movs	r2, #0
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f840 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e036      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	3302      	adds	r3, #2
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	e007      	b.n	8007992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1cf      	bne.n	800794a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2200      	movs	r2, #0
 80079b2:	2140      	movs	r1, #64	; 0x40
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f810 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e006      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	4613      	mov	r3, r2
 80079e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ea:	e02c      	b.n	8007a46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f2:	d028      	beq.n	8007a46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x30>
 80079fa:	f7fd f905 	bl	8004c08 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d21d      	bcs.n	8007a46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	695a      	ldr	r2, [r3, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e00f      	b.n	8007a66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	bf0c      	ite	eq
 8007a56:	2301      	moveq	r3, #1
 8007a58:	2300      	movne	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d0c3      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007aaa:	f023 030c 	bic.w	r3, r3, #12
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2c      	ldr	r2, [pc, #176]	; (8007b84 <UART_SetConfig+0x114>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d103      	bne.n	8007ae0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ad8:	f7ff f86c 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	e002      	b.n	8007ae6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7ff f854 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 8007ae4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009a      	lsls	r2, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afc:	4a22      	ldr	r2, [pc, #136]	; (8007b88 <UART_SetConfig+0x118>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	0119      	lsls	r1, r3, #4
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009a      	lsls	r2, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b1c:	4b1a      	ldr	r3, [pc, #104]	; (8007b88 <UART_SetConfig+0x118>)
 8007b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	2064      	movs	r0, #100	; 0x64
 8007b26:	fb00 f303 	mul.w	r3, r0, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	3332      	adds	r3, #50	; 0x32
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <UART_SetConfig+0x118>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b3c:	4419      	add	r1, r3
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009a      	lsls	r2, r3, #2
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <UART_SetConfig+0x118>)
 8007b56:	fba3 0302 	umull	r0, r3, r3, r2
 8007b5a:	095b      	lsrs	r3, r3, #5
 8007b5c:	2064      	movs	r0, #100	; 0x64
 8007b5e:	fb00 f303 	mul.w	r3, r0, r3
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	3332      	adds	r3, #50	; 0x32
 8007b68:	4a07      	ldr	r2, [pc, #28]	; (8007b88 <UART_SetConfig+0x118>)
 8007b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	f003 020f 	and.w	r2, r3, #15
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	440a      	add	r2, r1
 8007b7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40013800 	.word	0x40013800
 8007b88:	51eb851f 	.word	0x51eb851f

08007b8c <__errno>:
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <__errno+0x8>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20000048 	.word	0x20000048

08007b98 <__libc_init_array>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	4d0c      	ldr	r5, [pc, #48]	; (8007bd0 <__libc_init_array+0x38>)
 8007b9e:	4c0d      	ldr	r4, [pc, #52]	; (8007bd4 <__libc_init_array+0x3c>)
 8007ba0:	1b64      	subs	r4, r4, r5
 8007ba2:	10a4      	asrs	r4, r4, #2
 8007ba4:	42a6      	cmp	r6, r4
 8007ba6:	d109      	bne.n	8007bbc <__libc_init_array+0x24>
 8007ba8:	f000 ff04 	bl	80089b4 <_init>
 8007bac:	2600      	movs	r6, #0
 8007bae:	4d0a      	ldr	r5, [pc, #40]	; (8007bd8 <__libc_init_array+0x40>)
 8007bb0:	4c0a      	ldr	r4, [pc, #40]	; (8007bdc <__libc_init_array+0x44>)
 8007bb2:	1b64      	subs	r4, r4, r5
 8007bb4:	10a4      	asrs	r4, r4, #2
 8007bb6:	42a6      	cmp	r6, r4
 8007bb8:	d105      	bne.n	8007bc6 <__libc_init_array+0x2e>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc0:	4798      	blx	r3
 8007bc2:	3601      	adds	r6, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__libc_init_array+0xc>
 8007bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bca:	4798      	blx	r3
 8007bcc:	3601      	adds	r6, #1
 8007bce:	e7f2      	b.n	8007bb6 <__libc_init_array+0x1e>
 8007bd0:	08008a28 	.word	0x08008a28
 8007bd4:	08008a28 	.word	0x08008a28
 8007bd8:	08008a28 	.word	0x08008a28
 8007bdc:	08008a2c 	.word	0x08008a2c

08007be0 <memset>:
 8007be0:	4603      	mov	r3, r0
 8007be2:	4402      	add	r2, r0
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d100      	bne.n	8007bea <memset+0xa>
 8007be8:	4770      	bx	lr
 8007bea:	f803 1b01 	strb.w	r1, [r3], #1
 8007bee:	e7f9      	b.n	8007be4 <memset+0x4>

08007bf0 <pow>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4614      	mov	r4, r2
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4689      	mov	r9, r1
 8007bfc:	f000 f860 	bl	8007cc0 <__ieee754_pow>
 8007c00:	4622      	mov	r2, r4
 8007c02:	4606      	mov	r6, r0
 8007c04:	460f      	mov	r7, r1
 8007c06:	462b      	mov	r3, r5
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	f7f8 fefe 	bl	8000a0c <__aeabi_dcmpun>
 8007c10:	bbc8      	cbnz	r0, 8007c86 <pow+0x96>
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fec5 	bl	80009a8 <__aeabi_dcmpeq>
 8007c1e:	b1b8      	cbz	r0, 8007c50 <pow+0x60>
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 febe 	bl	80009a8 <__aeabi_dcmpeq>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d141      	bne.n	8007cb4 <pow+0xc4>
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f000 fe39 	bl	80088aa <finite>
 8007c38:	b328      	cbz	r0, 8007c86 <pow+0x96>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 febb 	bl	80009bc <__aeabi_dcmplt>
 8007c46:	b1f0      	cbz	r0, 8007c86 <pow+0x96>
 8007c48:	f7ff ffa0 	bl	8007b8c <__errno>
 8007c4c:	2322      	movs	r3, #34	; 0x22
 8007c4e:	e019      	b.n	8007c84 <pow+0x94>
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f000 fe29 	bl	80088aa <finite>
 8007c58:	b9c8      	cbnz	r0, 8007c8e <pow+0x9e>
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	f000 fe24 	bl	80088aa <finite>
 8007c62:	b1a0      	cbz	r0, 8007c8e <pow+0x9e>
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f000 fe1f 	bl	80088aa <finite>
 8007c6c:	b178      	cbz	r0, 8007c8e <pow+0x9e>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	f7f8 fec9 	bl	8000a0c <__aeabi_dcmpun>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0e4      	beq.n	8007c48 <pow+0x58>
 8007c7e:	f7ff ff85 	bl	8007b8c <__errno>
 8007c82:	2321      	movs	r3, #33	; 0x21
 8007c84:	6003      	str	r3, [r0, #0]
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 fe87 	bl	80009a8 <__aeabi_dcmpeq>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d0f3      	beq.n	8007c86 <pow+0x96>
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f000 fe02 	bl	80088aa <finite>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d0ed      	beq.n	8007c86 <pow+0x96>
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	f000 fdfc 	bl	80088aa <finite>
 8007cb2:	e7c8      	b.n	8007c46 <pow+0x56>
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	4f01      	ldr	r7, [pc, #4]	; (8007cbc <pow+0xcc>)
 8007cb8:	e7e5      	b.n	8007c86 <pow+0x96>
 8007cba:	bf00      	nop
 8007cbc:	3ff00000 	.word	0x3ff00000

08007cc0 <__ieee754_pow>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b093      	sub	sp, #76	; 0x4c
 8007cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007cce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	ea56 0102 	orrs.w	r1, r6, r2
 8007cd8:	4680      	mov	r8, r0
 8007cda:	d111      	bne.n	8007d00 <__ieee754_pow+0x40>
 8007cdc:	1803      	adds	r3, r0, r0
 8007cde:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007ce2:	4152      	adcs	r2, r2
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	4b82      	ldr	r3, [pc, #520]	; (8007ef0 <__ieee754_pow+0x230>)
 8007ce8:	4193      	sbcs	r3, r2
 8007cea:	f080 84b9 	bcs.w	8008660 <__ieee754_pow+0x9a0>
 8007cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fa39 	bl	800016c <__adddf3>
 8007cfa:	4683      	mov	fp, r0
 8007cfc:	468c      	mov	ip, r1
 8007cfe:	e06f      	b.n	8007de0 <__ieee754_pow+0x120>
 8007d00:	4b7c      	ldr	r3, [pc, #496]	; (8007ef4 <__ieee754_pow+0x234>)
 8007d02:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007d06:	429c      	cmp	r4, r3
 8007d08:	464d      	mov	r5, r9
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	dc06      	bgt.n	8007d1c <__ieee754_pow+0x5c>
 8007d0e:	d101      	bne.n	8007d14 <__ieee754_pow+0x54>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d1ec      	bne.n	8007cee <__ieee754_pow+0x2e>
 8007d14:	429e      	cmp	r6, r3
 8007d16:	dc01      	bgt.n	8007d1c <__ieee754_pow+0x5c>
 8007d18:	d10f      	bne.n	8007d3a <__ieee754_pow+0x7a>
 8007d1a:	b172      	cbz	r2, 8007d3a <__ieee754_pow+0x7a>
 8007d1c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007d20:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007d24:	ea55 050a 	orrs.w	r5, r5, sl
 8007d28:	d1e1      	bne.n	8007cee <__ieee754_pow+0x2e>
 8007d2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007d2e:	18db      	adds	r3, r3, r3
 8007d30:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007d34:	4152      	adcs	r2, r2
 8007d36:	429d      	cmp	r5, r3
 8007d38:	e7d5      	b.n	8007ce6 <__ieee754_pow+0x26>
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	da39      	bge.n	8007db2 <__ieee754_pow+0xf2>
 8007d3e:	4b6e      	ldr	r3, [pc, #440]	; (8007ef8 <__ieee754_pow+0x238>)
 8007d40:	429e      	cmp	r6, r3
 8007d42:	dc52      	bgt.n	8007dea <__ieee754_pow+0x12a>
 8007d44:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	f340 849c 	ble.w	8008686 <__ieee754_pow+0x9c6>
 8007d4e:	1533      	asrs	r3, r6, #20
 8007d50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d54:	2b14      	cmp	r3, #20
 8007d56:	dd0f      	ble.n	8007d78 <__ieee754_pow+0xb8>
 8007d58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007d5c:	fa22 f103 	lsr.w	r1, r2, r3
 8007d60:	fa01 f303 	lsl.w	r3, r1, r3
 8007d64:	4293      	cmp	r3, r2
 8007d66:	f040 848e 	bne.w	8008686 <__ieee754_pow+0x9c6>
 8007d6a:	f001 0101 	and.w	r1, r1, #1
 8007d6e:	f1c1 0302 	rsb	r3, r1, #2
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	b182      	cbz	r2, 8007d98 <__ieee754_pow+0xd8>
 8007d76:	e05d      	b.n	8007e34 <__ieee754_pow+0x174>
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d159      	bne.n	8007e30 <__ieee754_pow+0x170>
 8007d7c:	f1c3 0314 	rsb	r3, r3, #20
 8007d80:	fa46 f103 	asr.w	r1, r6, r3
 8007d84:	fa01 f303 	lsl.w	r3, r1, r3
 8007d88:	42b3      	cmp	r3, r6
 8007d8a:	f040 8479 	bne.w	8008680 <__ieee754_pow+0x9c0>
 8007d8e:	f001 0101 	and.w	r1, r1, #1
 8007d92:	f1c1 0302 	rsb	r3, r1, #2
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4b58      	ldr	r3, [pc, #352]	; (8007efc <__ieee754_pow+0x23c>)
 8007d9a:	429e      	cmp	r6, r3
 8007d9c:	d132      	bne.n	8007e04 <__ieee754_pow+0x144>
 8007d9e:	2f00      	cmp	r7, #0
 8007da0:	f280 846a 	bge.w	8008678 <__ieee754_pow+0x9b8>
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	2000      	movs	r0, #0
 8007daa:	4954      	ldr	r1, [pc, #336]	; (8007efc <__ieee754_pow+0x23c>)
 8007dac:	f7f8 fcbe 	bl	800072c <__aeabi_ddiv>
 8007db0:	e7a3      	b.n	8007cfa <__ieee754_pow+0x3a>
 8007db2:	2300      	movs	r3, #0
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	d13c      	bne.n	8007e34 <__ieee754_pow+0x174>
 8007dba:	4b4e      	ldr	r3, [pc, #312]	; (8007ef4 <__ieee754_pow+0x234>)
 8007dbc:	429e      	cmp	r6, r3
 8007dbe:	d1eb      	bne.n	8007d98 <__ieee754_pow+0xd8>
 8007dc0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007dc4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dc8:	ea53 030a 	orrs.w	r3, r3, sl
 8007dcc:	f000 8448 	beq.w	8008660 <__ieee754_pow+0x9a0>
 8007dd0:	4b4b      	ldr	r3, [pc, #300]	; (8007f00 <__ieee754_pow+0x240>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	dd0b      	ble.n	8007dee <__ieee754_pow+0x12e>
 8007dd6:	2f00      	cmp	r7, #0
 8007dd8:	f2c0 8448 	blt.w	800866c <__ieee754_pow+0x9ac>
 8007ddc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007de0:	4658      	mov	r0, fp
 8007de2:	4661      	mov	r1, ip
 8007de4:	b013      	add	sp, #76	; 0x4c
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dea:	2302      	movs	r3, #2
 8007dec:	e7e2      	b.n	8007db4 <__ieee754_pow+0xf4>
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	f04f 0b00 	mov.w	fp, #0
 8007df4:	f04f 0c00 	mov.w	ip, #0
 8007df8:	daf2      	bge.n	8007de0 <__ieee754_pow+0x120>
 8007dfa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007dfe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007e02:	e7ed      	b.n	8007de0 <__ieee754_pow+0x120>
 8007e04:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007e08:	d106      	bne.n	8007e18 <__ieee754_pow+0x158>
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 fb61 	bl	80004d8 <__aeabi_dmul>
 8007e16:	e770      	b.n	8007cfa <__ieee754_pow+0x3a>
 8007e18:	4b3a      	ldr	r3, [pc, #232]	; (8007f04 <__ieee754_pow+0x244>)
 8007e1a:	429f      	cmp	r7, r3
 8007e1c:	d10a      	bne.n	8007e34 <__ieee754_pow+0x174>
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	db08      	blt.n	8007e34 <__ieee754_pow+0x174>
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	b013      	add	sp, #76	; 0x4c
 8007e28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	f000 bc5e 	b.w	80086ec <__ieee754_sqrt>
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4640      	mov	r0, r8
 8007e36:	4649      	mov	r1, r9
 8007e38:	f000 fd34 	bl	80088a4 <fabs>
 8007e3c:	4683      	mov	fp, r0
 8007e3e:	468c      	mov	ip, r1
 8007e40:	f1ba 0f00 	cmp.w	sl, #0
 8007e44:	d128      	bne.n	8007e98 <__ieee754_pow+0x1d8>
 8007e46:	b124      	cbz	r4, 8007e52 <__ieee754_pow+0x192>
 8007e48:	4b2c      	ldr	r3, [pc, #176]	; (8007efc <__ieee754_pow+0x23c>)
 8007e4a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d122      	bne.n	8007e98 <__ieee754_pow+0x1d8>
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	da07      	bge.n	8007e66 <__ieee754_pow+0x1a6>
 8007e56:	465a      	mov	r2, fp
 8007e58:	4663      	mov	r3, ip
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	4927      	ldr	r1, [pc, #156]	; (8007efc <__ieee754_pow+0x23c>)
 8007e5e:	f7f8 fc65 	bl	800072c <__aeabi_ddiv>
 8007e62:	4683      	mov	fp, r0
 8007e64:	468c      	mov	ip, r1
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	daba      	bge.n	8007de0 <__ieee754_pow+0x120>
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e74:	4323      	orrs	r3, r4
 8007e76:	d108      	bne.n	8007e8a <__ieee754_pow+0x1ca>
 8007e78:	465a      	mov	r2, fp
 8007e7a:	4663      	mov	r3, ip
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	4661      	mov	r1, ip
 8007e80:	f7f8 f972 	bl	8000168 <__aeabi_dsub>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	e790      	b.n	8007dac <__ieee754_pow+0xec>
 8007e8a:	9b00      	ldr	r3, [sp, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d1a7      	bne.n	8007de0 <__ieee754_pow+0x120>
 8007e90:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007e94:	469c      	mov	ip, r3
 8007e96:	e7a3      	b.n	8007de0 <__ieee754_pow+0x120>
 8007e98:	0feb      	lsrs	r3, r5, #31
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	d104      	bne.n	8007eb0 <__ieee754_pow+0x1f0>
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	e7e7      	b.n	8007e80 <__ieee754_pow+0x1c0>
 8007eb0:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <__ieee754_pow+0x248>)
 8007eb2:	429e      	cmp	r6, r3
 8007eb4:	f340 80f6 	ble.w	80080a4 <__ieee754_pow+0x3e4>
 8007eb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ebc:	429e      	cmp	r6, r3
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <__ieee754_pow+0x240>)
 8007ec0:	dd09      	ble.n	8007ed6 <__ieee754_pow+0x216>
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	dc0c      	bgt.n	8007ee0 <__ieee754_pow+0x220>
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	da0c      	bge.n	8007ee4 <__ieee754_pow+0x224>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	b013      	add	sp, #76	; 0x4c
 8007ece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed2:	f000 bce2 	b.w	800889a <__math_oflow>
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	dbf5      	blt.n	8007ec6 <__ieee754_pow+0x206>
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <__ieee754_pow+0x23c>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	dd15      	ble.n	8007f0c <__ieee754_pow+0x24c>
 8007ee0:	2f00      	cmp	r7, #0
 8007ee2:	dcf2      	bgt.n	8007eca <__ieee754_pow+0x20a>
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	b013      	add	sp, #76	; 0x4c
 8007ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	f000 bcd0 	b.w	8008890 <__math_uflow>
 8007ef0:	fff00000 	.word	0xfff00000
 8007ef4:	7ff00000 	.word	0x7ff00000
 8007ef8:	433fffff 	.word	0x433fffff
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	3fefffff 	.word	0x3fefffff
 8007f04:	3fe00000 	.word	0x3fe00000
 8007f08:	41e00000 	.word	0x41e00000
 8007f0c:	4661      	mov	r1, ip
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4658      	mov	r0, fp
 8007f12:	4b5f      	ldr	r3, [pc, #380]	; (8008090 <__ieee754_pow+0x3d0>)
 8007f14:	f7f8 f928 	bl	8000168 <__aeabi_dsub>
 8007f18:	a355      	add	r3, pc, #340	; (adr r3, 8008070 <__ieee754_pow+0x3b0>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	4604      	mov	r4, r0
 8007f20:	460d      	mov	r5, r1
 8007f22:	f7f8 fad9 	bl	80004d8 <__aeabi_dmul>
 8007f26:	a354      	add	r3, pc, #336	; (adr r3, 8008078 <__ieee754_pow+0x3b8>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	460f      	mov	r7, r1
 8007f30:	4620      	mov	r0, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7f8 fad0 	bl	80004d8 <__aeabi_dmul>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4682      	mov	sl, r0
 8007f3c:	468b      	mov	fp, r1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	4b54      	ldr	r3, [pc, #336]	; (8008094 <__ieee754_pow+0x3d4>)
 8007f44:	f7f8 fac8 	bl	80004d8 <__aeabi_dmul>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	a14c      	add	r1, pc, #304	; (adr r1, 8008080 <__ieee754_pow+0x3c0>)
 8007f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f52:	f7f8 f909 	bl	8000168 <__aeabi_dsub>
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	f7f8 fabd 	bl	80004d8 <__aeabi_dmul>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	2000      	movs	r0, #0
 8007f64:	494c      	ldr	r1, [pc, #304]	; (8008098 <__ieee754_pow+0x3d8>)
 8007f66:	f7f8 f8ff 	bl	8000168 <__aeabi_dsub>
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 faaf 	bl	80004d8 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4649      	mov	r1, r9
 8007f82:	f7f8 faa9 	bl	80004d8 <__aeabi_dmul>
 8007f86:	a340      	add	r3, pc, #256	; (adr r3, 8008088 <__ieee754_pow+0x3c8>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 faa4 	bl	80004d8 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4650      	mov	r0, sl
 8007f96:	4659      	mov	r1, fp
 8007f98:	f7f8 f8e6 	bl	8000168 <__aeabi_dsub>
 8007f9c:	f04f 0a00 	mov.w	sl, #0
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 f8de 	bl	800016c <__adddf3>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	f7f8 f8d6 	bl	8000168 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	f7f8 f8d0 	bl	8000168 <__aeabi_dsub>
 8007fc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fcc:	9b00      	ldr	r3, [sp, #0]
 8007fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f04f 0600 	mov.w	r6, #0
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	bf0c      	ite	eq
 8007fde:	4b2f      	ldreq	r3, [pc, #188]	; (800809c <__ieee754_pow+0x3dc>)
 8007fe0:	4b2b      	ldrne	r3, [pc, #172]	; (8008090 <__ieee754_pow+0x3d0>)
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fea:	e9cd 2300 	strd	r2, r3, [sp]
 8007fee:	4632      	mov	r2, r6
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	f7f8 f8b9 	bl	8000168 <__aeabi_dsub>
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	f7f8 fa6d 	bl	80004d8 <__aeabi_dmul>
 8007ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008002:	4680      	mov	r8, r0
 8008004:	4689      	mov	r9, r1
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fa65 	bl	80004d8 <__aeabi_dmul>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	f7f8 f8a9 	bl	800016c <__adddf3>
 800801a:	4632      	mov	r2, r6
 800801c:	463b      	mov	r3, r7
 800801e:	4680      	mov	r8, r0
 8008020:	4689      	mov	r9, r1
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 fa57 	bl	80004d8 <__aeabi_dmul>
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	460b      	mov	r3, r1
 8008030:	4602      	mov	r2, r0
 8008032:	4649      	mov	r1, r9
 8008034:	4640      	mov	r0, r8
 8008036:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800803a:	f7f8 f897 	bl	800016c <__adddf3>
 800803e:	4b18      	ldr	r3, [pc, #96]	; (80080a0 <__ieee754_pow+0x3e0>)
 8008040:	4682      	mov	sl, r0
 8008042:	4299      	cmp	r1, r3
 8008044:	460f      	mov	r7, r1
 8008046:	460e      	mov	r6, r1
 8008048:	f340 82e5 	ble.w	8008616 <__ieee754_pow+0x956>
 800804c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008050:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008054:	4303      	orrs	r3, r0
 8008056:	f000 81df 	beq.w	8008418 <__ieee754_pow+0x758>
 800805a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	f7f8 fcab 	bl	80009bc <__aeabi_dcmplt>
 8008066:	3800      	subs	r0, #0
 8008068:	bf18      	it	ne
 800806a:	2001      	movne	r0, #1
 800806c:	e72e      	b.n	8007ecc <__ieee754_pow+0x20c>
 800806e:	bf00      	nop
 8008070:	60000000 	.word	0x60000000
 8008074:	3ff71547 	.word	0x3ff71547
 8008078:	f85ddf44 	.word	0xf85ddf44
 800807c:	3e54ae0b 	.word	0x3e54ae0b
 8008080:	55555555 	.word	0x55555555
 8008084:	3fd55555 	.word	0x3fd55555
 8008088:	652b82fe 	.word	0x652b82fe
 800808c:	3ff71547 	.word	0x3ff71547
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	3fd00000 	.word	0x3fd00000
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	bff00000 	.word	0xbff00000
 80080a0:	408fffff 	.word	0x408fffff
 80080a4:	4bd2      	ldr	r3, [pc, #840]	; (80083f0 <__ieee754_pow+0x730>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	402b      	ands	r3, r5
 80080aa:	b943      	cbnz	r3, 80080be <__ieee754_pow+0x3fe>
 80080ac:	4658      	mov	r0, fp
 80080ae:	4661      	mov	r1, ip
 80080b0:	4bd0      	ldr	r3, [pc, #832]	; (80083f4 <__ieee754_pow+0x734>)
 80080b2:	f7f8 fa11 	bl	80004d8 <__aeabi_dmul>
 80080b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080ba:	4683      	mov	fp, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	1523      	asrs	r3, r4, #20
 80080c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080c4:	4413      	add	r3, r2
 80080c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c8:	4bcb      	ldr	r3, [pc, #812]	; (80083f8 <__ieee754_pow+0x738>)
 80080ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80080ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80080d2:	429c      	cmp	r4, r3
 80080d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080d8:	dd08      	ble.n	80080ec <__ieee754_pow+0x42c>
 80080da:	4bc8      	ldr	r3, [pc, #800]	; (80083fc <__ieee754_pow+0x73c>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	f340 8199 	ble.w	8008414 <__ieee754_pow+0x754>
 80080e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80080e8:	3301      	adds	r3, #1
 80080ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ec:	2600      	movs	r6, #0
 80080ee:	00f3      	lsls	r3, r6, #3
 80080f0:	930d      	str	r3, [sp, #52]	; 0x34
 80080f2:	4bc3      	ldr	r3, [pc, #780]	; (8008400 <__ieee754_pow+0x740>)
 80080f4:	4658      	mov	r0, fp
 80080f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080fe:	4629      	mov	r1, r5
 8008100:	461a      	mov	r2, r3
 8008102:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008106:	4623      	mov	r3, r4
 8008108:	f7f8 f82e 	bl	8000168 <__aeabi_dsub>
 800810c:	46da      	mov	sl, fp
 800810e:	462b      	mov	r3, r5
 8008110:	4652      	mov	r2, sl
 8008112:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800811a:	f7f8 f827 	bl	800016c <__adddf3>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	2000      	movs	r0, #0
 8008124:	49b7      	ldr	r1, [pc, #732]	; (8008404 <__ieee754_pow+0x744>)
 8008126:	f7f8 fb01 	bl	800072c <__aeabi_ddiv>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008132:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008136:	f7f8 f9cf 	bl	80004d8 <__aeabi_dmul>
 800813a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800813e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008142:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008146:	2300      	movs	r3, #0
 8008148:	2200      	movs	r2, #0
 800814a:	46ab      	mov	fp, r5
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008158:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800815c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	4614      	mov	r4, r2
 8008166:	461d      	mov	r5, r3
 8008168:	f7f8 f9b6 	bl	80004d8 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008174:	f7f7 fff8 	bl	8000168 <__aeabi_dsub>
 8008178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f7 fff0 	bl	8000168 <__aeabi_dsub>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4650      	mov	r0, sl
 800818e:	4659      	mov	r1, fp
 8008190:	f7f7 ffea 	bl	8000168 <__aeabi_dsub>
 8008194:	4642      	mov	r2, r8
 8008196:	464b      	mov	r3, r9
 8008198:	f7f8 f99e 	bl	80004d8 <__aeabi_dmul>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f7 ffe0 	bl	8000168 <__aeabi_dsub>
 80081a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081ac:	f7f8 f994 	bl	80004d8 <__aeabi_dmul>
 80081b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081b8:	4610      	mov	r0, r2
 80081ba:	4619      	mov	r1, r3
 80081bc:	f7f8 f98c 	bl	80004d8 <__aeabi_dmul>
 80081c0:	a379      	add	r3, pc, #484	; (adr r3, 80083a8 <__ieee754_pow+0x6e8>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	4604      	mov	r4, r0
 80081c8:	460d      	mov	r5, r1
 80081ca:	f7f8 f985 	bl	80004d8 <__aeabi_dmul>
 80081ce:	a378      	add	r3, pc, #480	; (adr r3, 80083b0 <__ieee754_pow+0x6f0>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f7 ffca 	bl	800016c <__adddf3>
 80081d8:	4622      	mov	r2, r4
 80081da:	462b      	mov	r3, r5
 80081dc:	f7f8 f97c 	bl	80004d8 <__aeabi_dmul>
 80081e0:	a375      	add	r3, pc, #468	; (adr r3, 80083b8 <__ieee754_pow+0x6f8>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f7 ffc1 	bl	800016c <__adddf3>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	f7f8 f973 	bl	80004d8 <__aeabi_dmul>
 80081f2:	a373      	add	r3, pc, #460	; (adr r3, 80083c0 <__ieee754_pow+0x700>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f7 ffb8 	bl	800016c <__adddf3>
 80081fc:	4622      	mov	r2, r4
 80081fe:	462b      	mov	r3, r5
 8008200:	f7f8 f96a 	bl	80004d8 <__aeabi_dmul>
 8008204:	a370      	add	r3, pc, #448	; (adr r3, 80083c8 <__ieee754_pow+0x708>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f7 ffaf 	bl	800016c <__adddf3>
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	f7f8 f961 	bl	80004d8 <__aeabi_dmul>
 8008216:	a36e      	add	r3, pc, #440	; (adr r3, 80083d0 <__ieee754_pow+0x710>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f7 ffa6 	bl	800016c <__adddf3>
 8008220:	4622      	mov	r2, r4
 8008222:	4606      	mov	r6, r0
 8008224:	460f      	mov	r7, r1
 8008226:	462b      	mov	r3, r5
 8008228:	4620      	mov	r0, r4
 800822a:	4629      	mov	r1, r5
 800822c:	f7f8 f954 	bl	80004d8 <__aeabi_dmul>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f7f8 f94e 	bl	80004d8 <__aeabi_dmul>
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	f7f7 ff90 	bl	800016c <__adddf3>
 800824c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008250:	f7f8 f942 	bl	80004d8 <__aeabi_dmul>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	f7f7 ff88 	bl	800016c <__adddf3>
 800825c:	4642      	mov	r2, r8
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	464b      	mov	r3, r9
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 f936 	bl	80004d8 <__aeabi_dmul>
 800826c:	2200      	movs	r2, #0
 800826e:	4b66      	ldr	r3, [pc, #408]	; (8008408 <__ieee754_pow+0x748>)
 8008270:	4682      	mov	sl, r0
 8008272:	468b      	mov	fp, r1
 8008274:	f7f7 ff7a 	bl	800016c <__adddf3>
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	f7f7 ff76 	bl	800016c <__adddf3>
 8008280:	2400      	movs	r4, #0
 8008282:	460d      	mov	r5, r1
 8008284:	4622      	mov	r2, r4
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 f924 	bl	80004d8 <__aeabi_dmul>
 8008290:	2200      	movs	r2, #0
 8008292:	4680      	mov	r8, r0
 8008294:	4689      	mov	r9, r1
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	4b5b      	ldr	r3, [pc, #364]	; (8008408 <__ieee754_pow+0x748>)
 800829c:	f7f7 ff64 	bl	8000168 <__aeabi_dsub>
 80082a0:	4652      	mov	r2, sl
 80082a2:	465b      	mov	r3, fp
 80082a4:	f7f7 ff60 	bl	8000168 <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f7 ff5a 	bl	8000168 <__aeabi_dsub>
 80082b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b8:	f7f8 f90e 	bl	80004d8 <__aeabi_dmul>
 80082bc:	4622      	mov	r2, r4
 80082be:	4606      	mov	r6, r0
 80082c0:	460f      	mov	r7, r1
 80082c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082c6:	462b      	mov	r3, r5
 80082c8:	f7f8 f906 	bl	80004d8 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4630      	mov	r0, r6
 80082d2:	4639      	mov	r1, r7
 80082d4:	f7f7 ff4a 	bl	800016c <__adddf3>
 80082d8:	2400      	movs	r4, #0
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f7 ff41 	bl	800016c <__adddf3>
 80082ea:	a33b      	add	r3, pc, #236	; (adr r3, 80083d8 <__ieee754_pow+0x718>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	4620      	mov	r0, r4
 80082f2:	460d      	mov	r5, r1
 80082f4:	f7f8 f8f0 	bl	80004d8 <__aeabi_dmul>
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008300:	4620      	mov	r0, r4
 8008302:	4629      	mov	r1, r5
 8008304:	f7f7 ff30 	bl	8000168 <__aeabi_dsub>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f7 ff2a 	bl	8000168 <__aeabi_dsub>
 8008314:	a332      	add	r3, pc, #200	; (adr r3, 80083e0 <__ieee754_pow+0x720>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f8 f8dd 	bl	80004d8 <__aeabi_dmul>
 800831e:	a332      	add	r3, pc, #200	; (adr r3, 80083e8 <__ieee754_pow+0x728>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	4620      	mov	r0, r4
 800832a:	4629      	mov	r1, r5
 800832c:	f7f8 f8d4 	bl	80004d8 <__aeabi_dmul>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f7 ff18 	bl	800016c <__adddf3>
 800833c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800833e:	4b33      	ldr	r3, [pc, #204]	; (800840c <__ieee754_pow+0x74c>)
 8008340:	f04f 0a00 	mov.w	sl, #0
 8008344:	4413      	add	r3, r2
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ff0f 	bl	800016c <__adddf3>
 800834e:	4680      	mov	r8, r0
 8008350:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008352:	4689      	mov	r9, r1
 8008354:	f7f8 f856 	bl	8000404 <__aeabi_i2d>
 8008358:	4604      	mov	r4, r0
 800835a:	460d      	mov	r5, r1
 800835c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800835e:	4b2c      	ldr	r3, [pc, #176]	; (8008410 <__ieee754_pow+0x750>)
 8008360:	4413      	add	r3, r2
 8008362:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008366:	4642      	mov	r2, r8
 8008368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800836c:	464b      	mov	r3, r9
 800836e:	f7f7 fefd 	bl	800016c <__adddf3>
 8008372:	4632      	mov	r2, r6
 8008374:	463b      	mov	r3, r7
 8008376:	f7f7 fef9 	bl	800016c <__adddf3>
 800837a:	4622      	mov	r2, r4
 800837c:	462b      	mov	r3, r5
 800837e:	f7f7 fef5 	bl	800016c <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	4650      	mov	r0, sl
 8008388:	468b      	mov	fp, r1
 800838a:	f7f7 feed 	bl	8000168 <__aeabi_dsub>
 800838e:	4632      	mov	r2, r6
 8008390:	463b      	mov	r3, r7
 8008392:	f7f7 fee9 	bl	8000168 <__aeabi_dsub>
 8008396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800839a:	f7f7 fee5 	bl	8000168 <__aeabi_dsub>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4640      	mov	r0, r8
 80083a4:	4649      	mov	r1, r9
 80083a6:	e60d      	b.n	8007fc4 <__ieee754_pow+0x304>
 80083a8:	4a454eef 	.word	0x4a454eef
 80083ac:	3fca7e28 	.word	0x3fca7e28
 80083b0:	93c9db65 	.word	0x93c9db65
 80083b4:	3fcd864a 	.word	0x3fcd864a
 80083b8:	a91d4101 	.word	0xa91d4101
 80083bc:	3fd17460 	.word	0x3fd17460
 80083c0:	518f264d 	.word	0x518f264d
 80083c4:	3fd55555 	.word	0x3fd55555
 80083c8:	db6fabff 	.word	0xdb6fabff
 80083cc:	3fdb6db6 	.word	0x3fdb6db6
 80083d0:	33333303 	.word	0x33333303
 80083d4:	3fe33333 	.word	0x3fe33333
 80083d8:	e0000000 	.word	0xe0000000
 80083dc:	3feec709 	.word	0x3feec709
 80083e0:	dc3a03fd 	.word	0xdc3a03fd
 80083e4:	3feec709 	.word	0x3feec709
 80083e8:	145b01f5 	.word	0x145b01f5
 80083ec:	be3e2fe0 	.word	0xbe3e2fe0
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	43400000 	.word	0x43400000
 80083f8:	0003988e 	.word	0x0003988e
 80083fc:	000bb679 	.word	0x000bb679
 8008400:	080089f8 	.word	0x080089f8
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	40080000 	.word	0x40080000
 800840c:	08008a18 	.word	0x08008a18
 8008410:	08008a08 	.word	0x08008a08
 8008414:	2601      	movs	r6, #1
 8008416:	e66a      	b.n	80080ee <__ieee754_pow+0x42e>
 8008418:	a39d      	add	r3, pc, #628	; (adr r3, 8008690 <__ieee754_pow+0x9d0>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	4640      	mov	r0, r8
 8008420:	4649      	mov	r1, r9
 8008422:	f7f7 fea3 	bl	800016c <__adddf3>
 8008426:	4622      	mov	r2, r4
 8008428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800842c:	462b      	mov	r3, r5
 800842e:	4650      	mov	r0, sl
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 fe99 	bl	8000168 <__aeabi_dsub>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843e:	f7f8 fadb 	bl	80009f8 <__aeabi_dcmpgt>
 8008442:	2800      	cmp	r0, #0
 8008444:	f47f ae09 	bne.w	800805a <__ieee754_pow+0x39a>
 8008448:	4aa3      	ldr	r2, [pc, #652]	; (80086d8 <__ieee754_pow+0xa18>)
 800844a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800844e:	4293      	cmp	r3, r2
 8008450:	f340 8101 	ble.w	8008656 <__ieee754_pow+0x996>
 8008454:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008458:	2000      	movs	r0, #0
 800845a:	151b      	asrs	r3, r3, #20
 800845c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008460:	fa4a f303 	asr.w	r3, sl, r3
 8008464:	4433      	add	r3, r6
 8008466:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800846a:	4f9c      	ldr	r7, [pc, #624]	; (80086dc <__ieee754_pow+0xa1c>)
 800846c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008470:	4117      	asrs	r7, r2
 8008472:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008476:	ea23 0107 	bic.w	r1, r3, r7
 800847a:	f1c2 0214 	rsb	r2, r2, #20
 800847e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008482:	460b      	mov	r3, r1
 8008484:	fa4a fa02 	asr.w	sl, sl, r2
 8008488:	2e00      	cmp	r6, #0
 800848a:	4602      	mov	r2, r0
 800848c:	4629      	mov	r1, r5
 800848e:	4620      	mov	r0, r4
 8008490:	bfb8      	it	lt
 8008492:	f1ca 0a00 	rsblt	sl, sl, #0
 8008496:	f7f7 fe67 	bl	8000168 <__aeabi_dsub>
 800849a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800849e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a2:	2400      	movs	r4, #0
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	f7f7 fe60 	bl	800016c <__adddf3>
 80084ac:	a37a      	add	r3, pc, #488	; (adr r3, 8008698 <__ieee754_pow+0x9d8>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	4620      	mov	r0, r4
 80084b4:	460d      	mov	r5, r1
 80084b6:	f7f8 f80f 	bl	80004d8 <__aeabi_dmul>
 80084ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	4620      	mov	r0, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	f7f7 fe4f 	bl	8000168 <__aeabi_dsub>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f7f7 fe49 	bl	8000168 <__aeabi_dsub>
 80084d6:	a372      	add	r3, pc, #456	; (adr r3, 80086a0 <__ieee754_pow+0x9e0>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fffc 	bl	80004d8 <__aeabi_dmul>
 80084e0:	a371      	add	r3, pc, #452	; (adr r3, 80086a8 <__ieee754_pow+0x9e8>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	4680      	mov	r8, r0
 80084e8:	4689      	mov	r9, r1
 80084ea:	4620      	mov	r0, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	f7f7 fff3 	bl	80004d8 <__aeabi_dmul>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f7 fe37 	bl	800016c <__adddf3>
 80084fe:	4604      	mov	r4, r0
 8008500:	460d      	mov	r5, r1
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4630      	mov	r0, r6
 8008508:	4639      	mov	r1, r7
 800850a:	f7f7 fe2f 	bl	800016c <__adddf3>
 800850e:	4632      	mov	r2, r6
 8008510:	463b      	mov	r3, r7
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	f7f7 fe27 	bl	8000168 <__aeabi_dsub>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f7 fe21 	bl	8000168 <__aeabi_dsub>
 8008526:	4642      	mov	r2, r8
 8008528:	4606      	mov	r6, r0
 800852a:	460f      	mov	r7, r1
 800852c:	464b      	mov	r3, r9
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f7 ffd1 	bl	80004d8 <__aeabi_dmul>
 8008536:	a35e      	add	r3, pc, #376	; (adr r3, 80086b0 <__ieee754_pow+0x9f0>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4604      	mov	r4, r0
 800853e:	460d      	mov	r5, r1
 8008540:	f7f7 ffca 	bl	80004d8 <__aeabi_dmul>
 8008544:	a35c      	add	r3, pc, #368	; (adr r3, 80086b8 <__ieee754_pow+0x9f8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fe0d 	bl	8000168 <__aeabi_dsub>
 800854e:	4622      	mov	r2, r4
 8008550:	462b      	mov	r3, r5
 8008552:	f7f7 ffc1 	bl	80004d8 <__aeabi_dmul>
 8008556:	a35a      	add	r3, pc, #360	; (adr r3, 80086c0 <__ieee754_pow+0xa00>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe06 	bl	800016c <__adddf3>
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	f7f7 ffb8 	bl	80004d8 <__aeabi_dmul>
 8008568:	a357      	add	r3, pc, #348	; (adr r3, 80086c8 <__ieee754_pow+0xa08>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f7 fdfb 	bl	8000168 <__aeabi_dsub>
 8008572:	4622      	mov	r2, r4
 8008574:	462b      	mov	r3, r5
 8008576:	f7f7 ffaf 	bl	80004d8 <__aeabi_dmul>
 800857a:	a355      	add	r3, pc, #340	; (adr r3, 80086d0 <__ieee754_pow+0xa10>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f7f7 fdf4 	bl	800016c <__adddf3>
 8008584:	4622      	mov	r2, r4
 8008586:	462b      	mov	r3, r5
 8008588:	f7f7 ffa6 	bl	80004d8 <__aeabi_dmul>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 fde8 	bl	8000168 <__aeabi_dsub>
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f7 ff98 	bl	80004d8 <__aeabi_dmul>
 80085a8:	2200      	movs	r2, #0
 80085aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085b2:	4620      	mov	r0, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f7 fdd7 	bl	8000168 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c2:	f7f8 f8b3 	bl	800072c <__aeabi_ddiv>
 80085c6:	4632      	mov	r2, r6
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	463b      	mov	r3, r7
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 ff81 	bl	80004d8 <__aeabi_dmul>
 80085d6:	4632      	mov	r2, r6
 80085d8:	463b      	mov	r3, r7
 80085da:	f7f7 fdc7 	bl	800016c <__adddf3>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4620      	mov	r0, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7f7 fdbf 	bl	8000168 <__aeabi_dsub>
 80085ea:	4642      	mov	r2, r8
 80085ec:	464b      	mov	r3, r9
 80085ee:	f7f7 fdbb 	bl	8000168 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	2000      	movs	r0, #0
 80085f8:	4939      	ldr	r1, [pc, #228]	; (80086e0 <__ieee754_pow+0xa20>)
 80085fa:	f7f7 fdb5 	bl	8000168 <__aeabi_dsub>
 80085fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008602:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008606:	da29      	bge.n	800865c <__ieee754_pow+0x99c>
 8008608:	4652      	mov	r2, sl
 800860a:	f000 f955 	bl	80088b8 <scalbn>
 800860e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008612:	f7ff bbfe 	b.w	8007e12 <__ieee754_pow+0x152>
 8008616:	4b33      	ldr	r3, [pc, #204]	; (80086e4 <__ieee754_pow+0xa24>)
 8008618:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800861c:	429f      	cmp	r7, r3
 800861e:	f77f af13 	ble.w	8008448 <__ieee754_pow+0x788>
 8008622:	4b31      	ldr	r3, [pc, #196]	; (80086e8 <__ieee754_pow+0xa28>)
 8008624:	440b      	add	r3, r1
 8008626:	4303      	orrs	r3, r0
 8008628:	d009      	beq.n	800863e <__ieee754_pow+0x97e>
 800862a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862e:	2200      	movs	r2, #0
 8008630:	2300      	movs	r3, #0
 8008632:	f7f8 f9c3 	bl	80009bc <__aeabi_dcmplt>
 8008636:	3800      	subs	r0, #0
 8008638:	bf18      	it	ne
 800863a:	2001      	movne	r0, #1
 800863c:	e453      	b.n	8007ee6 <__ieee754_pow+0x226>
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	f7f7 fd91 	bl	8000168 <__aeabi_dsub>
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	f7f8 f9cb 	bl	80009e4 <__aeabi_dcmpge>
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f aefa 	beq.w	8008448 <__ieee754_pow+0x788>
 8008654:	e7e9      	b.n	800862a <__ieee754_pow+0x96a>
 8008656:	f04f 0a00 	mov.w	sl, #0
 800865a:	e720      	b.n	800849e <__ieee754_pow+0x7de>
 800865c:	4621      	mov	r1, r4
 800865e:	e7d6      	b.n	800860e <__ieee754_pow+0x94e>
 8008660:	f04f 0b00 	mov.w	fp, #0
 8008664:	f8df c078 	ldr.w	ip, [pc, #120]	; 80086e0 <__ieee754_pow+0xa20>
 8008668:	f7ff bbba 	b.w	8007de0 <__ieee754_pow+0x120>
 800866c:	f04f 0b00 	mov.w	fp, #0
 8008670:	f04f 0c00 	mov.w	ip, #0
 8008674:	f7ff bbb4 	b.w	8007de0 <__ieee754_pow+0x120>
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7ff bb3d 	b.w	8007cfa <__ieee754_pow+0x3a>
 8008680:	9200      	str	r2, [sp, #0]
 8008682:	f7ff bb89 	b.w	8007d98 <__ieee754_pow+0xd8>
 8008686:	2300      	movs	r3, #0
 8008688:	f7ff bb73 	b.w	8007d72 <__ieee754_pow+0xb2>
 800868c:	f3af 8000 	nop.w
 8008690:	652b82fe 	.word	0x652b82fe
 8008694:	3c971547 	.word	0x3c971547
 8008698:	00000000 	.word	0x00000000
 800869c:	3fe62e43 	.word	0x3fe62e43
 80086a0:	fefa39ef 	.word	0xfefa39ef
 80086a4:	3fe62e42 	.word	0x3fe62e42
 80086a8:	0ca86c39 	.word	0x0ca86c39
 80086ac:	be205c61 	.word	0xbe205c61
 80086b0:	72bea4d0 	.word	0x72bea4d0
 80086b4:	3e663769 	.word	0x3e663769
 80086b8:	c5d26bf1 	.word	0xc5d26bf1
 80086bc:	3ebbbd41 	.word	0x3ebbbd41
 80086c0:	af25de2c 	.word	0xaf25de2c
 80086c4:	3f11566a 	.word	0x3f11566a
 80086c8:	16bebd93 	.word	0x16bebd93
 80086cc:	3f66c16c 	.word	0x3f66c16c
 80086d0:	5555553e 	.word	0x5555553e
 80086d4:	3fc55555 	.word	0x3fc55555
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	000fffff 	.word	0x000fffff
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	4090cbff 	.word	0x4090cbff
 80086e8:	3f6f3400 	.word	0x3f6f3400

080086ec <__ieee754_sqrt>:
 80086ec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008848 <__ieee754_sqrt+0x15c>
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80086f8:	4606      	mov	r6, r0
 80086fa:	460d      	mov	r5, r1
 80086fc:	460c      	mov	r4, r1
 80086fe:	460a      	mov	r2, r1
 8008700:	4607      	mov	r7, r0
 8008702:	4603      	mov	r3, r0
 8008704:	d10f      	bne.n	8008726 <__ieee754_sqrt+0x3a>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	f7f7 fee5 	bl	80004d8 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4630      	mov	r0, r6
 8008714:	4629      	mov	r1, r5
 8008716:	f7f7 fd29 	bl	800016c <__adddf3>
 800871a:	4606      	mov	r6, r0
 800871c:	460d      	mov	r5, r1
 800871e:	4630      	mov	r0, r6
 8008720:	4629      	mov	r1, r5
 8008722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008726:	2900      	cmp	r1, #0
 8008728:	dc0e      	bgt.n	8008748 <__ieee754_sqrt+0x5c>
 800872a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800872e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008732:	d0f4      	beq.n	800871e <__ieee754_sqrt+0x32>
 8008734:	b141      	cbz	r1, 8008748 <__ieee754_sqrt+0x5c>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	f7f7 fd15 	bl	8000168 <__aeabi_dsub>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	f7f7 fff3 	bl	800072c <__aeabi_ddiv>
 8008746:	e7e8      	b.n	800871a <__ieee754_sqrt+0x2e>
 8008748:	1521      	asrs	r1, r4, #20
 800874a:	d075      	beq.n	8008838 <__ieee754_sqrt+0x14c>
 800874c:	07cc      	lsls	r4, r1, #31
 800874e:	f04f 0400 	mov.w	r4, #0
 8008752:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008756:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800875a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800875e:	bf5e      	ittt	pl
 8008760:	0fd9      	lsrpl	r1, r3, #31
 8008762:	005b      	lslpl	r3, r3, #1
 8008764:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008768:	0fd9      	lsrs	r1, r3, #31
 800876a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800876e:	2516      	movs	r5, #22
 8008770:	4620      	mov	r0, r4
 8008772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008776:	107f      	asrs	r7, r7, #1
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	1846      	adds	r6, r0, r1
 800877c:	4296      	cmp	r6, r2
 800877e:	bfde      	ittt	le
 8008780:	1b92      	suble	r2, r2, r6
 8008782:	1870      	addle	r0, r6, r1
 8008784:	1864      	addle	r4, r4, r1
 8008786:	0052      	lsls	r2, r2, #1
 8008788:	3d01      	subs	r5, #1
 800878a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800878e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008796:	d1f0      	bne.n	800877a <__ieee754_sqrt+0x8e>
 8008798:	4629      	mov	r1, r5
 800879a:	f04f 0e20 	mov.w	lr, #32
 800879e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087a2:	4282      	cmp	r2, r0
 80087a4:	eb06 0c05 	add.w	ip, r6, r5
 80087a8:	dc02      	bgt.n	80087b0 <__ieee754_sqrt+0xc4>
 80087aa:	d113      	bne.n	80087d4 <__ieee754_sqrt+0xe8>
 80087ac:	459c      	cmp	ip, r3
 80087ae:	d811      	bhi.n	80087d4 <__ieee754_sqrt+0xe8>
 80087b0:	f1bc 0f00 	cmp.w	ip, #0
 80087b4:	eb0c 0506 	add.w	r5, ip, r6
 80087b8:	da43      	bge.n	8008842 <__ieee754_sqrt+0x156>
 80087ba:	2d00      	cmp	r5, #0
 80087bc:	db41      	blt.n	8008842 <__ieee754_sqrt+0x156>
 80087be:	f100 0801 	add.w	r8, r0, #1
 80087c2:	1a12      	subs	r2, r2, r0
 80087c4:	4640      	mov	r0, r8
 80087c6:	459c      	cmp	ip, r3
 80087c8:	bf88      	it	hi
 80087ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80087ce:	eba3 030c 	sub.w	r3, r3, ip
 80087d2:	4431      	add	r1, r6
 80087d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087d8:	f1be 0e01 	subs.w	lr, lr, #1
 80087dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80087e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80087e8:	d1db      	bne.n	80087a2 <__ieee754_sqrt+0xb6>
 80087ea:	4313      	orrs	r3, r2
 80087ec:	d006      	beq.n	80087fc <__ieee754_sqrt+0x110>
 80087ee:	1c48      	adds	r0, r1, #1
 80087f0:	bf0b      	itete	eq
 80087f2:	4671      	moveq	r1, lr
 80087f4:	3101      	addne	r1, #1
 80087f6:	3401      	addeq	r4, #1
 80087f8:	f021 0101 	bicne.w	r1, r1, #1
 80087fc:	1063      	asrs	r3, r4, #1
 80087fe:	0849      	lsrs	r1, r1, #1
 8008800:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008804:	07e2      	lsls	r2, r4, #31
 8008806:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800880a:	bf48      	it	mi
 800880c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008810:	460e      	mov	r6, r1
 8008812:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008816:	e782      	b.n	800871e <__ieee754_sqrt+0x32>
 8008818:	0ada      	lsrs	r2, r3, #11
 800881a:	3815      	subs	r0, #21
 800881c:	055b      	lsls	r3, r3, #21
 800881e:	2a00      	cmp	r2, #0
 8008820:	d0fa      	beq.n	8008818 <__ieee754_sqrt+0x12c>
 8008822:	02d5      	lsls	r5, r2, #11
 8008824:	d50a      	bpl.n	800883c <__ieee754_sqrt+0x150>
 8008826:	f1c1 0420 	rsb	r4, r1, #32
 800882a:	fa23 f404 	lsr.w	r4, r3, r4
 800882e:	1e4d      	subs	r5, r1, #1
 8008830:	408b      	lsls	r3, r1
 8008832:	4322      	orrs	r2, r4
 8008834:	1b41      	subs	r1, r0, r5
 8008836:	e789      	b.n	800874c <__ieee754_sqrt+0x60>
 8008838:	4608      	mov	r0, r1
 800883a:	e7f0      	b.n	800881e <__ieee754_sqrt+0x132>
 800883c:	0052      	lsls	r2, r2, #1
 800883e:	3101      	adds	r1, #1
 8008840:	e7ef      	b.n	8008822 <__ieee754_sqrt+0x136>
 8008842:	4680      	mov	r8, r0
 8008844:	e7bd      	b.n	80087c2 <__ieee754_sqrt+0xd6>
 8008846:	bf00      	nop
 8008848:	7ff00000 	.word	0x7ff00000

0800884c <with_errno>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4604      	mov	r4, r0
 8008850:	460d      	mov	r5, r1
 8008852:	4616      	mov	r6, r2
 8008854:	f7ff f99a 	bl	8007b8c <__errno>
 8008858:	4629      	mov	r1, r5
 800885a:	6006      	str	r6, [r0, #0]
 800885c:	4620      	mov	r0, r4
 800885e:	bd70      	pop	{r4, r5, r6, pc}

08008860 <xflow>:
 8008860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008862:	4615      	mov	r5, r2
 8008864:	461c      	mov	r4, r3
 8008866:	b180      	cbz	r0, 800888a <xflow+0x2a>
 8008868:	4610      	mov	r0, r2
 800886a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800886e:	e9cd 0100 	strd	r0, r1, [sp]
 8008872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008876:	4628      	mov	r0, r5
 8008878:	4621      	mov	r1, r4
 800887a:	f7f7 fe2d 	bl	80004d8 <__aeabi_dmul>
 800887e:	2222      	movs	r2, #34	; 0x22
 8008880:	b003      	add	sp, #12
 8008882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008886:	f7ff bfe1 	b.w	800884c <with_errno>
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	e7ee      	b.n	800886e <xflow+0xe>

08008890 <__math_uflow>:
 8008890:	2200      	movs	r2, #0
 8008892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008896:	f7ff bfe3 	b.w	8008860 <xflow>

0800889a <__math_oflow>:
 800889a:	2200      	movs	r2, #0
 800889c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80088a0:	f7ff bfde 	b.w	8008860 <xflow>

080088a4 <fabs>:
 80088a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088a8:	4770      	bx	lr

080088aa <finite>:
 80088aa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80088ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80088b2:	0fc0      	lsrs	r0, r0, #31
 80088b4:	4770      	bx	lr
	...

080088b8 <scalbn>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	4617      	mov	r7, r2
 80088c4:	460b      	mov	r3, r1
 80088c6:	b996      	cbnz	r6, 80088ee <scalbn+0x36>
 80088c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088cc:	4303      	orrs	r3, r0
 80088ce:	d039      	beq.n	8008944 <scalbn+0x8c>
 80088d0:	4b33      	ldr	r3, [pc, #204]	; (80089a0 <scalbn+0xe8>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fe00 	bl	80004d8 <__aeabi_dmul>
 80088d8:	4b32      	ldr	r3, [pc, #200]	; (80089a4 <scalbn+0xec>)
 80088da:	4604      	mov	r4, r0
 80088dc:	429f      	cmp	r7, r3
 80088de:	460d      	mov	r5, r1
 80088e0:	da0f      	bge.n	8008902 <scalbn+0x4a>
 80088e2:	a32b      	add	r3, pc, #172	; (adr r3, 8008990 <scalbn+0xd8>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f7f7 fdf6 	bl	80004d8 <__aeabi_dmul>
 80088ec:	e006      	b.n	80088fc <scalbn+0x44>
 80088ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80088f2:	4296      	cmp	r6, r2
 80088f4:	d10a      	bne.n	800890c <scalbn+0x54>
 80088f6:	4602      	mov	r2, r0
 80088f8:	f7f7 fc38 	bl	800016c <__adddf3>
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	e020      	b.n	8008944 <scalbn+0x8c>
 8008902:	460b      	mov	r3, r1
 8008904:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008908:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800890c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008910:	19b9      	adds	r1, r7, r6
 8008912:	4291      	cmp	r1, r2
 8008914:	dd0e      	ble.n	8008934 <scalbn+0x7c>
 8008916:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800891a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800891e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008922:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008926:	4820      	ldr	r0, [pc, #128]	; (80089a8 <scalbn+0xf0>)
 8008928:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800892c:	a31a      	add	r3, pc, #104	; (adr r3, 8008998 <scalbn+0xe0>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	e7d9      	b.n	80088e8 <scalbn+0x30>
 8008934:	2900      	cmp	r1, #0
 8008936:	dd08      	ble.n	800894a <scalbn+0x92>
 8008938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800893c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008940:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800894e:	da12      	bge.n	8008976 <scalbn+0xbe>
 8008950:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008954:	429f      	cmp	r7, r3
 8008956:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800895a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800895e:	dcdc      	bgt.n	800891a <scalbn+0x62>
 8008960:	a30b      	add	r3, pc, #44	; (adr r3, 8008990 <scalbn+0xd8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800896a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800896e:	480f      	ldr	r0, [pc, #60]	; (80089ac <scalbn+0xf4>)
 8008970:	f041 011f 	orr.w	r1, r1, #31
 8008974:	e7b8      	b.n	80088e8 <scalbn+0x30>
 8008976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800897a:	3136      	adds	r1, #54	; 0x36
 800897c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008980:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	2200      	movs	r2, #0
 800898a:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <scalbn+0xf8>)
 800898c:	e7ac      	b.n	80088e8 <scalbn+0x30>
 800898e:	bf00      	nop
 8008990:	c2f8f359 	.word	0xc2f8f359
 8008994:	01a56e1f 	.word	0x01a56e1f
 8008998:	8800759c 	.word	0x8800759c
 800899c:	7e37e43c 	.word	0x7e37e43c
 80089a0:	43500000 	.word	0x43500000
 80089a4:	ffff3cb0 	.word	0xffff3cb0
 80089a8:	8800759c 	.word	0x8800759c
 80089ac:	c2f8f359 	.word	0xc2f8f359
 80089b0:	3c900000 	.word	0x3c900000

080089b4 <_init>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr

080089c0 <_fini>:
 80089c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c2:	bf00      	nop
 80089c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c6:	bc08      	pop	{r3}
 80089c8:	469e      	mov	lr, r3
 80089ca:	4770      	bx	lr
