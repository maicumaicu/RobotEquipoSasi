
Bluepill v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006c10  08006c10  00016c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006c68  08006c68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c68  08006c68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000130c  20000070  08006ce0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000137c  08006ce0  0002137c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a3e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de8  00000000  00000000  00031ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000348c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00035b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b97  00000000  00000000  00036cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ba5  00000000  00000000  0003a887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a6e  00000000  00000000  0005142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  000e4eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bf4 	.word	0x08006bf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006bf4 	.word	0x08006bf4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HMC5883L_initialize+0x28>)
 8000f8a:	221e      	movs	r2, #30
 8000f8c:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HMC5883L_initialize+0x28>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2270      	movs	r2, #112	; 0x70
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8ce 	bl	8001138 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 f82f 	bl	8001000 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 f840 	bl	8001028 <HMC5883L_setMode>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000008c 	.word	0x2000008c

08000fb0 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HMC5883L_testConnection+0x48>)
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HMC5883L_testConnection+0x4c>)
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	f000 f880 	bl	80010c8 <I2Cdev_readBytes>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d10f      	bne.n	8000fee <HMC5883L_testConnection+0x3e>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HMC5883L_testConnection+0x4c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b48      	cmp	r3, #72	; 0x48
 8000fd4:	d109      	bne.n	8000fea <HMC5883L_testConnection+0x3a>
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HMC5883L_testConnection+0x4c>)
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	2b34      	cmp	r3, #52	; 0x34
 8000fdc:	d105      	bne.n	8000fea <HMC5883L_testConnection+0x3a>
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HMC5883L_testConnection+0x4c>)
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	2b33      	cmp	r3, #51	; 0x33
 8000fe4:	d101      	bne.n	8000fea <HMC5883L_testConnection+0x3a>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HMC5883L_testConnection+0x40>
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HMC5883L_testConnection+0x40>
    }
    return false;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	20000090 	.word	0x20000090

08001000 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HMC5883L_setGain+0x24>)
 800100c:	7818      	ldrb	r0, [r3, #0]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	015b      	lsls	r3, r3, #5
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	2101      	movs	r1, #1
 8001018:	f000 f88e 	bl	8001138 <I2Cdev_writeByte>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000008c 	.word	0x2000008c

08001028 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HMC5883L_setMode+0x28>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f87c 	bl	8001138 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HMC5883L_setMode+0x2c>)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	7013      	strb	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c
 8001054:	20000096 	.word	0x20000096

08001058 <HMC5883L_getHeadingZ>:
}
/** Get Z-axis heading measurement.
 * @return 16-bit signed integer with Z-axis heading
 * @see HMC5883L_RA_DATAZ_H
 */
int16_t HMC5883L_getHeadingZ() {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af02      	add	r7, sp, #8
    // each axis read requires that ALL axis registers be read, even if only
    // one is used; this was not done ineffiently in the code by accident
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HMC5883L_getHeadingZ+0x48>)
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HMC5883L_getHeadingZ+0x4c>)
 8001068:	2206      	movs	r2, #6
 800106a:	2103      	movs	r1, #3
 800106c:	f000 f82c 	bl	80010c8 <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HMC5883L_getHeadingZ+0x50>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d106      	bne.n	8001086 <HMC5883L_getHeadingZ+0x2e>
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HMC5883L_getHeadingZ+0x48>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	2102      	movs	r1, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f859 	bl	8001138 <I2Cdev_writeByte>
    return (((int16_t)buffer[2]) << 8) | buffer[3];
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HMC5883L_getHeadingZ+0x4c>)
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HMC5883L_getHeadingZ+0x4c>)
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000008c 	.word	0x2000008c
 80010a4:	20000090 	.word	0x20000090
 80010a8:	20000096 	.word	0x20000096

080010ac <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <I2Cdev_init+0x18>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000098 	.word	0x20000098

080010c8 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	460b      	mov	r3, r1
 80010d6:	71bb      	strb	r3, [r7, #6]
 80010d8:	4613      	mov	r3, r2
 80010da:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80010dc:	8b3b      	ldrh	r3, [r7, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <I2Cdev_readBytes+0x1e>
 80010e2:	8b3b      	ldrh	r3, [r7, #24]
 80010e4:	e001      	b.n	80010ea <I2Cdev_readBytes+0x22>
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <I2Cdev_readBytes+0x6c>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	b299      	uxth	r1, r3
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	1dba      	adds	r2, r7, #6
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	f002 fa74 	bl	80035ec <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <I2Cdev_readBytes+0x6c>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	b29b      	uxth	r3, r3
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	b299      	uxth	r1, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b29a      	uxth	r2, r3
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	f002 fb64 	bl	80037e8 <HAL_I2C_Master_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <I2Cdev_readBytes+0x62>
 8001126:	797b      	ldrb	r3, [r7, #5]
 8001128:	e000      	b.n	800112c <I2Cdev_readBytes+0x64>
    return -1;
 800112a:	23ff      	movs	r3, #255	; 0xff
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000098 	.word	0x20000098

08001138 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	460b      	mov	r3, r1
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	4613      	mov	r3, r2
 8001148:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 800114a:	1d7b      	adds	r3, r7, #5
 800114c:	79b9      	ldrb	r1, [r7, #6]
 800114e:	79f8      	ldrb	r0, [r7, #7]
 8001150:	2201      	movs	r2, #1
 8001152:	f000 f805 	bl	8001160 <I2Cdev_writeBytes>
 8001156:	4603      	mov	r3, r0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af04      	add	r7, sp, #16
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	460b      	mov	r3, r1
 800116e:	71bb      	strb	r3, [r7, #6]
 8001170:	4613      	mov	r3, r2
 8001172:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <I2Cdev_writeBytes+0x54>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	b29b      	uxth	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	b29a      	uxth	r2, r3
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	b29b      	uxth	r3, r3
 8001188:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800118c:	9402      	str	r4, [sp, #8]
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	f002 fd87 	bl	8003ca8 <HAL_I2C_Mem_Write>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	b29b      	uxth	r3, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	20000098 	.word	0x20000098

080011b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011ca:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <MX_ADC1_Init+0xd0>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d6:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011d8:	2201      	movs	r2, #1
 80011da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f6:	4823      	ldr	r0, [pc, #140]	; (8001284 <MX_ADC1_Init+0xcc>)
 80011f8:	f001 f842 	bl	8002280 <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001202:	f000 fc57 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120a:	2301      	movs	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	481b      	ldr	r0, [pc, #108]	; (8001284 <MX_ADC1_Init+0xcc>)
 8001218:	f001 f9fa 	bl	8002610 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fc47 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001226:	2301      	movs	r3, #1
 8001228:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4814      	ldr	r0, [pc, #80]	; (8001284 <MX_ADC1_Init+0xcc>)
 8001234:	f001 f9ec 	bl	8002610 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 fc39 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001242:	2302      	movs	r3, #2
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001246:	2303      	movs	r3, #3
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_ADC1_Init+0xcc>)
 8001250:	f001 f9de 	bl	8002610 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800125a:	f000 fc2b 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800125e:	2303      	movs	r3, #3
 8001260:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001262:	2304      	movs	r3, #4
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_ADC1_Init+0xcc>)
 800126c:	f001 f9d0 	bl	8002610 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001276:	f000 fc1d 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000009c 	.word	0x2000009c
 8001288:	40012400 	.word	0x40012400

0800128c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_ADC_MspInit+0xbc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d149      	bne.n	8001340 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a26      	ldr	r2, [pc, #152]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_ADC_MspInit+0xc0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80012dc:	230f      	movs	r3, #15
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4819      	ldr	r0, [pc, #100]	; (8001350 <HAL_ADC_MspInit+0xc4>)
 80012ec:	f001 fe86 	bl	8002ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_ADC_MspInit+0xcc>)
 80012f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 800130a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001316:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 800131a:	2220      	movs	r2, #32
 800131c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001326:	f001 fc7b 	bl	8002c20 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001330:	f000 fbc0 	bl	8001ab4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 8001338:	621a      	str	r2, [r3, #32]
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_ADC_MspInit+0xc8>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40012400 	.word	0x40012400
 800134c:	40021000 	.word	0x40021000
 8001350:	40010800 	.word	0x40010800
 8001354:	200000cc 	.word	0x200000cc
 8001358:	40020008 	.word	0x40020008

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_DMA_Init+0x38>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <MX_DMA_Init+0x38>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_DMA_Init+0x38>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	200b      	movs	r0, #11
 8001380:	f001 fc17 	bl	8002bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001384:	200b      	movs	r0, #11
 8001386:	f001 fc30 	bl	8002bea <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <MX_GPIO_Init+0x114>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <MX_GPIO_Init+0x114>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <MX_GPIO_Init+0x114>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b39      	ldr	r3, [pc, #228]	; (80014ac <MX_GPIO_Init+0x114>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a38      	ldr	r2, [pc, #224]	; (80014ac <MX_GPIO_Init+0x114>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <MX_GPIO_Init+0x114>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <MX_GPIO_Init+0x114>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <MX_GPIO_Init+0x114>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <MX_GPIO_Init+0x114>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0x114>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <MX_GPIO_Init+0x114>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_GPIO_Init+0x114>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4827      	ldr	r0, [pc, #156]	; (80014b0 <MX_GPIO_Init+0x118>)
 8001414:	f001 ff8d 	bl	8003332 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|STBY_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f248 0138 	movw	r1, #32824	; 0x8038
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <MX_GPIO_Init+0x11c>)
 8001420:	f001 ff87 	bl	8003332 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800142a:	4823      	ldr	r0, [pc, #140]	; (80014b8 <MX_GPIO_Init+0x120>)
 800142c:	f001 ff81 	bl	8003332 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2302      	movs	r3, #2
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	4819      	ldr	r0, [pc, #100]	; (80014b0 <MX_GPIO_Init+0x118>)
 800144a:	f001 fdd7 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800144e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001458:	2301      	movs	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_GPIO_Init+0x11c>)
 8001464:	f001 fdca 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|STBY_Pin|AIN1_Pin|AIN2_Pin;
 8001468:	f248 0338 	movw	r3, #32824	; 0x8038
 800146c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2302      	movs	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_GPIO_Init+0x11c>)
 8001482:	f001 fdbb 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin;
 8001486:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_GPIO_Init+0x120>)
 80014a0:	f001 fdac 	bl	8002ffc <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40010800 	.word	0x40010800

080014bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C1_Init+0x50>)
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <MX_I2C1_Init+0x54>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_I2C1_Init+0x50>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_I2C1_Init+0x58>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C1_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C1_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_I2C1_Init+0x50>)
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C1_Init+0x50>)
 80014fa:	f001 ff33 	bl	8003364 <HAL_I2C_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001504:	f000 fad6 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000110 	.word	0x20000110
 8001510:	40005400 	.word	0x40005400
 8001514:	000186a0 	.word	0x000186a0

08001518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_I2C_MspInit+0x70>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d123      	bne.n	8001580 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_I2C_MspInit+0x74>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_I2C_MspInit+0x74>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_I2C_MspInit+0x74>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001550:	23c0      	movs	r3, #192	; 0xc0
 8001552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <HAL_I2C_MspInit+0x78>)
 8001564:	f001 fd4a 	bl	8002ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_I2C_MspInit+0x74>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_I2C_MspInit+0x74>)
 800156e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001572:	61d3      	str	r3, [r2, #28]
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_I2C_MspInit+0x74>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40005400 	.word	0x40005400
 800158c:	40021000 	.word	0x40021000
 8001590:	40010c00 	.word	0x40010c00

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b598      	push	{r3, r4, r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f000 fe10 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f8ae 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f7ff fefa 	bl	8001398 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a4:	f7ff feda 	bl	800135c <MX_DMA_Init>
  MX_ADC1_Init();
 80015a8:	f7ff fe06 	bl	80011b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80015ac:	f000 fb9c 	bl	8001ce8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015b0:	f000 fbf2 	bl	8001d98 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015b4:	f000 fc44 	bl	8001e40 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80015b8:	f000 fd64 	bl	8002084 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80015bc:	f7ff ff7e 	bl	80014bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 80015c0:	4b42      	ldr	r3, [pc, #264]	; (80016cc <main+0x138>)
 80015c2:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <main+0x13c>)
 80015c4:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <main+0x138>)
 80015c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015cc:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <main+0x138>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80015d4:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <main+0x138>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <main+0x138>)
 80015dc:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <main+0x13c>)
 80015de:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <main+0x138>)
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 80015e8:	4b38      	ldr	r3, [pc, #224]	; (80016cc <main+0x138>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <main+0x138>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <main+0x138>)
 80015f6:	4a36      	ldr	r2, [pc, #216]	; (80016d0 <main+0x13c>)
 80015f8:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <main+0x138>)
 80015fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001600:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <main+0x138>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <main+0x138>)
 800160a:	2200      	movs	r2, #0
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800160e:	2108      	movs	r1, #8
 8001610:	4830      	ldr	r0, [pc, #192]	; (80016d4 <main+0x140>)
 8001612:	f003 fd25 	bl	8005060 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001616:	210c      	movs	r1, #12
 8001618:	482e      	ldr	r0, [pc, #184]	; (80016d4 <main+0x140>)
 800161a:	f003 fd21 	bl	8005060 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800161e:	213c      	movs	r1, #60	; 0x3c
 8001620:	482d      	ldr	r0, [pc, #180]	; (80016d8 <main+0x144>)
 8001622:	f003 fe61 	bl	80052e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001626:	213c      	movs	r1, #60	; 0x3c
 8001628:	482c      	ldr	r0, [pc, #176]	; (80016dc <main+0x148>)
 800162a:	f003 fe5d 	bl	80052e8 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2108      	movs	r1, #8
 8001632:	4827      	ldr	r0, [pc, #156]	; (80016d0 <main+0x13c>)
 8001634:	f001 fe7d 	bl	8003332 <HAL_GPIO_WritePin>
	TIM4->CCR3 = 15000/2;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <main+0x14c>)
 800163a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 15000;
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <main+0x14c>)
 8001642:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164c:	4925      	ldr	r1, [pc, #148]	; (80016e4 <main+0x150>)
 800164e:	4826      	ldr	r0, [pc, #152]	; (80016e8 <main+0x154>)
 8001650:	f000 feee 	bl	8002430 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165a:	481d      	ldr	r0, [pc, #116]	; (80016d0 <main+0x13c>)
 800165c:	f001 fe69 	bl	8003332 <HAL_GPIO_WritePin>
	TIM3->CNT = 0;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <main+0x158>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CNT = 0;
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <main+0x15c>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001672:	4817      	ldr	r0, [pc, #92]	; (80016d0 <main+0x13c>)
 8001674:	f001 fe5d 	bl	8003332 <HAL_GPIO_WritePin>
	I2Cdev_init(&hi2c1);
 8001678:	481e      	ldr	r0, [pc, #120]	; (80016f4 <main+0x160>)
 800167a:	f7ff fd17 	bl	80010ac <I2Cdev_init>
	HMC5883L_initialize();
 800167e:	f7ff fc81 	bl	8000f84 <HMC5883L_initialize>
	while(HMC5883L_testConnection() == 0){
 8001682:	bf00      	nop
 8001684:	f7ff fc94 	bl	8000fb0 <HMC5883L_testConnection>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0fa      	beq.n	8001684 <main+0xf0>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//mainMachine();
		if(ticksNow + 20 < HAL_GetTick()){
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <main+0x164>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3314      	adds	r3, #20
 8001694:	461c      	mov	r4, r3
 8001696:	f000 fde9 	bl	800226c <HAL_GetTick>
 800169a:	4603      	mov	r3, r0
 800169c:	429c      	cmp	r4, r3
 800169e:	d20b      	bcs.n	80016b8 <main+0x124>
			intUartSend(HMC5883L_getHeadingZ());
 80016a0:	f7ff fcda 	bl	8001058 <HMC5883L_getHeadingZ>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f884 	bl	80017b4 <intUartSend>
			ticksNow = HAL_GetTick();
 80016ac:	f000 fdde 	bl	800226c <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <main+0x164>)
 80016b6:	601a      	str	r2, [r3, #0]
		}

		/*runMotor(ADELANTE, MOTOR_A);
		runMotor(ADELANTE, MOTOR_B);*/
		btnMachine(0);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 f94f 	bl	800195c <btnMachine>
		btnMachine(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 f94c 	bl	800195c <btnMachine>
		btnMachine(2);
 80016c4:	2002      	movs	r0, #2
 80016c6:	f000 f949 	bl	800195c <btnMachine>
		if(ticksNow + 20 < HAL_GetTick()){
 80016ca:	e7e0      	b.n	800168e <main+0xfa>
 80016cc:	2000122c 	.word	0x2000122c
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	200012ec 	.word	0x200012ec
 80016d8:	2000125c 	.word	0x2000125c
 80016dc:	200012a4 	.word	0x200012a4
 80016e0:	40000800 	.word	0x40000800
 80016e4:	20000164 	.word	0x20000164
 80016e8:	2000009c 	.word	0x2000009c
 80016ec:	40000400 	.word	0x40000400
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	20000110 	.word	0x20000110
 80016f8:	20001228 	.word	0x20001228

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2228      	movs	r2, #40	; 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 fb86 	bl	8005e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173a:	2301      	movs	r3, #1
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800174c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	4618      	mov	r0, r3
 8001754:	f002 ff64 	bl	8004620 <HAL_RCC_OscConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800175e:	f000 f9a9 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2102      	movs	r1, #2
 800177e:	4618      	mov	r0, r3
 8001780:	f003 f9d0 	bl	8004b24 <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800178a:	f000 f993 	bl	8001ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800178e:	2302      	movs	r3, #2
 8001790:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001796:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fb5a 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017a6:	f000 f985 	bl	8001ab4 <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	; 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <intUartSend>:





void intUartSend(int entero) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	int m;
	int c;
	int d;
	int u;

	m = entero / 1000;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <intUartSend+0xcc>)
 80017c0:	fb82 1203 	smull	r1, r2, r2, r3
 80017c4:	1192      	asrs	r2, r2, #6
 80017c6:	17db      	asrs	r3, r3, #31
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
	c = entero / 100 - m * 10;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a2d      	ldr	r2, [pc, #180]	; (8001884 <intUartSend+0xd0>)
 80017d0:	fb82 1203 	smull	r1, r2, r2, r3
 80017d4:	1152      	asrs	r2, r2, #5
 80017d6:	17db      	asrs	r3, r3, #31
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f06f 0109 	mvn.w	r1, #9
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
	d = entero / 10 - (m * 100 + c * 10);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <intUartSend+0xd4>)
 80017ec:	fb82 1203 	smull	r1, r2, r2, r3
 80017f0:	1092      	asrs	r2, r2, #2
 80017f2:	17db      	asrs	r3, r3, #31
 80017f4:	1ad1      	subs	r1, r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2264      	movs	r2, #100	; 0x64
 80017fa:	fb02 f003 	mul.w	r0, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	1acb      	subs	r3, r1, r3
 800180c:	60fb      	str	r3, [r7, #12]
	u = entero - (m * 1000 + c * 100 + d * 10);
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001814:	fb03 f202 	mul.w	r2, r3, r2
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2164      	movs	r1, #100	; 0x64
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	18d1      	adds	r1, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	440b      	add	r3, r1
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	60bb      	str	r3, [r7, #8]

	TX_BUFFER[0] = m + '0';
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3330      	adds	r3, #48	; 0x30
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <intUartSend+0xd8>)
 800183e:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = c + '0';
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3330      	adds	r3, #48	; 0x30
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <intUartSend+0xd8>)
 800184a:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = d + '0';
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3330      	adds	r3, #48	; 0x30
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <intUartSend+0xd8>)
 8001856:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = u + '0';
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3330      	adds	r3, #48	; 0x30
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <intUartSend+0xd8>)
 8001862:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = '\n';
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <intUartSend+0xd8>)
 8001866:	220a      	movs	r2, #10
 8001868:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 5, 100);
 800186a:	2364      	movs	r3, #100	; 0x64
 800186c:	2205      	movs	r2, #5
 800186e:	4907      	ldr	r1, [pc, #28]	; (800188c <intUartSend+0xd8>)
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <intUartSend+0xdc>)
 8001872:	f004 f93e 	bl	8005af2 <HAL_UART_Transmit>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	10624dd3 	.word	0x10624dd3
 8001884:	51eb851f 	.word	0x51eb851f
 8001888:	66666667 	.word	0x66666667
 800188c:	2000121c 	.word	0x2000121c
 8001890:	20001334 	.word	0x20001334

08001894 <HAL_ADC_ConvCpltCallback>:
		HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
	}
}

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e029      	b.n	80018f6 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ac:	4926      	ldr	r1, [pc, #152]	; (8001948 <HAL_ADC_ConvCpltCallback+0xb4>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c0:	4922      	ldr	r1, [pc, #136]	; (800194c <HAL_ADC_ConvCpltCallback+0xb8>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d4:	491e      	ldr	r1, [pc, #120]	; (8001950 <HAL_ADC_ConvCpltCallback+0xbc>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	3303      	adds	r3, #3
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e8:	491a      	ldr	r1, [pc, #104]	; (8001954 <HAL_ADC_ConvCpltCallback+0xc0>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b09      	cmp	r3, #9
 80018fa:	ddd2      	ble.n	80018a2 <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(10, CNY70);
 80018fc:	4912      	ldr	r1, [pc, #72]	; (8001948 <HAL_ADC_ConvCpltCallback+0xb4>)
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 f95e 	bl	8001bc0 <lecturaCNY70>
 8001904:	4603      	mov	r3, r0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f998 	bl	8000c3c <__aeabi_i2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001910:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(10, SHARP_1);
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001914:	200a      	movs	r0, #10
 8001916:	f000 f8d3 	bl	8001ac0 <lecSensor>
 800191a:	4603      	mov	r3, r0
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_ADC_ConvCpltCallback+0xc4>)
 800191e:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(10, SHARP_2);
 8001920:	490b      	ldr	r1, [pc, #44]	; (8001950 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001922:	200a      	movs	r0, #10
 8001924:	f000 f8cc 	bl	8001ac0 <lecSensor>
 8001928:	4603      	mov	r3, r0
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_ADC_ConvCpltCallback+0xc4>)
 800192c:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(10, SHARP_3);
 800192e:	4909      	ldr	r1, [pc, #36]	; (8001954 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001930:	200a      	movs	r0, #10
 8001932:	f000 f8c5 	bl	8001ac0 <lecSensor>
 8001936:	4603      	mov	r3, r0
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_ADC_ConvCpltCallback+0xc4>)
 800193a:	60d3      	str	r3, [r2, #12]

}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000164 	.word	0x20000164
 8001948:	20001164 	.word	0x20001164
 800194c:	2000118c 	.word	0x2000118c
 8001950:	200011b4 	.word	0x200011b4
 8001954:	200011dc 	.word	0x200011dc
 8001958:	20001204 	.word	0x20001204

0800195c <btnMachine>:
void runForward() {
	runMotor(ADELANTE, MOTOR_A);
	runMotor(ADELANTE, MOTOR_B);
}

void btnMachine(int index) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 8001964:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <btnMachine+0x14c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	3308      	adds	r3, #8
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d069      	beq.n	8001a48 <btnMachine+0xec>
 8001974:	2b02      	cmp	r3, #2
 8001976:	f300 8092 	bgt.w	8001a9e <btnMachine+0x142>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <btnMachine+0x28>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d02c      	beq.n	80019dc <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 8001982:	e08c      	b.n	8001a9e <btnMachine+0x142>
		btns[index].flag = 0;
 8001984:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <btnMachine+0x14c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	330c      	adds	r3, #12
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8001992:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <btnMachine+0x14c>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <btnMachine+0x14c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	440b      	add	r3, r1
 80019a4:	3304      	adds	r3, #4
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f001 fcaa 	bl	8003304 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <btnMachine+0x150>)
 80019b6:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <btnMachine+0x150>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d169      	bne.n	8001a94 <btnMachine+0x138>
			ticks = HAL_GetTick();
 80019c0:	f000 fc54 	bl	800226c <HAL_GetTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <btnMachine+0x154>)
 80019ca:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 80019cc:	4a36      	ldr	r2, [pc, #216]	; (8001aa8 <btnMachine+0x14c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	3308      	adds	r3, #8
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
		break;
 80019da:	e05b      	b.n	8001a94 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80019dc:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <btnMachine+0x14c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4930      	ldr	r1, [pc, #192]	; (8001aa8 <btnMachine+0x14c>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	440b      	add	r3, r1
 80019ee:	3304      	adds	r3, #4
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f001 fc85 	bl	8003304 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <btnMachine+0x150>)
 8001a00:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <btnMachine+0x150>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10e      	bne.n	8001a28 <btnMachine+0xcc>
 8001a0a:	f000 fc2f 	bl	800226c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <btnMachine+0x154>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3319      	adds	r3, #25
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d306      	bcc.n	8001a28 <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <btnMachine+0x14c>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	3308      	adds	r3, #8
 8001a24:	2202      	movs	r2, #2
 8001a26:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <btnMachine+0x150>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d133      	bne.n	8001a98 <btnMachine+0x13c>
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <btnMachine+0x154>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b18      	cmp	r3, #24
 8001a36:	dc2f      	bgt.n	8001a98 <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <btnMachine+0x14c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	3308      	adds	r3, #8
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
		break;
 8001a46:	e027      	b.n	8001a98 <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8001a48:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <btnMachine+0x14c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4915      	ldr	r1, [pc, #84]	; (8001aa8 <btnMachine+0x14c>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	440b      	add	r3, r1
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f001 fc4f 	bl	8003304 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <btnMachine+0x150>)
 8001a6c:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <btnMachine+0x150>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d112      	bne.n	8001a9c <btnMachine+0x140>
			btns[index].flag = 1;
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <btnMachine+0x14c>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	330c      	adds	r3, #12
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <btnMachine+0x14c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
		break;
 8001a92:	e003      	b.n	8001a9c <btnMachine+0x140>
		break;
 8001a94:	bf00      	nop
 8001a96:	e002      	b.n	8001a9e <btnMachine+0x142>
		break;
 8001a98:	bf00      	nop
 8001a9a:	e000      	b.n	8001a9e <btnMachine+0x142>
		break;
 8001a9c:	bf00      	nop
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000122c 	.word	0x2000122c
 8001aac:	20001218 	.word	0x20001218
 8001ab0:	20001214 	.word	0x20001214

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <lecSensor>:
		break;
	}
	return 15;
}

float lecSensor(int n, uint32_t values[10]) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e00a      	b.n	8001aea <lecSensor+0x2a>
		suma = suma + values[i];
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf0      	blt.n	8001ad4 <lecSensor+0x14>
	}
	float adc = suma / n;
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f89e 	bl	8000c3c <__aeabi_i2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	60bb      	str	r3, [r7, #8]
	float volts = adc * 0.0008056640; // value from sensor * (5/1024)
 8001b04:	68b8      	ldr	r0, [r7, #8]
 8001b06:	f7fe fc87 	bl	8000418 <__aeabi_f2d>
 8001b0a:	a323      	add	r3, pc, #140	; (adr r3, 8001b98 <lecSensor+0xd8>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fcda 	bl	80004c8 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ff84 	bl	8000a28 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7fe fc77 	bl	8000418 <__aeabi_f2d>
 8001b2a:	a31d      	add	r3, pc, #116	; (adr r3, 8001ba0 <lecSensor+0xe0>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe ff46 	bl	80009c0 <__aeabi_dcmple>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <lecSensor+0x7e>
		volts = 0.35;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <lecSensor+0xf0>)
 8001b3c:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.25);/*convertimos a cm con un aproximacion grafica*/
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fc6a 	bl	8000418 <__aeabi_f2d>
 8001b44:	a318      	add	r3, pc, #96	; (adr r3, 8001ba8 <lecSensor+0xe8>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fb05 	bl	8000158 <__aeabi_dsub>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <lecSensor+0xf4>)
 8001b5c:	f004 f966 	bl	8005e2c <pow>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff5e 	bl	8000a28 <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <lecSensor+0xf8>)
 8001b74:	f7ff f96a 	bl	8000e4c <__aeabi_fdiv>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8001b7c:	490f      	ldr	r1, [pc, #60]	; (8001bbc <lecSensor+0xfc>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7fe ffa6 	bl	8000ad0 <__aeabi_fsub>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]

	return volts;
 8001b88:	68fb      	ldr	r3, [r7, #12]

}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	440a4e96 	.word	0x440a4e96
 8001b9c:	3f4a6666 	.word	0x3f4a6666
 8001ba0:	66666666 	.word	0x66666666
 8001ba4:	3fd66666 	.word	0x3fd66666
 8001ba8:	33333333 	.word	0x33333333
 8001bac:	3fd33333 	.word	0x3fd33333
 8001bb0:	3eb33333 	.word	0x3eb33333
 8001bb4:	3fd00000 	.word	0x3fd00000
 8001bb8:	41dc0000 	.word	0x41dc0000
 8001bbc:	41900000 	.word	0x41900000

08001bc0 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	long suma = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e00a      	b.n	8001bea <lecturaCNY70+0x2a>
		suma = suma + values[i];
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3301      	adds	r3, #1
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf0      	blt.n	8001bd4 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bfa:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c02:	da01      	bge.n	8001c08 <lecturaCNY70+0x48>
		return BLANCO;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8001c08:	2301      	movs	r3, #1
	}
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_MspInit+0x5c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <HAL_MspInit+0x5c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_MspInit+0x5c>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x5c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_MspInit+0x5c>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_MspInit+0x5c>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_MspInit+0x60>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_MspInit+0x60>)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbe:	f000 fac3 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA1_Channel1_IRQHandler+0x10>)
 8001cce:	f001 f861 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000cc 	.word	0x200000cc

08001cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2224      	movs	r2, #36	; 0x24
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f890 	bl	8005e1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <MX_TIM1_Init+0xac>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d30:	2303      	movs	r3, #3
 8001d32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d40:	230a      	movs	r3, #10
 8001d42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d5c:	f003 fa22 	bl	80051a4 <HAL_TIM_Encoder_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d66:	f7ff fea5 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	; (8001d90 <MX_TIM1_Init+0xa8>)
 8001d78:	f003 fe10 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d82:	f7ff fe97 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	; 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000125c 	.word	0x2000125c
 8001d94:	40012c00 	.word	0x40012c00

08001d98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 f838 	bl	8005e1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001db6:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <MX_TIM3_Init+0xa4>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dba:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001dea:	230a      	movs	r3, #10
 8001dec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001df2:	2301      	movs	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001e06:	f003 f9cd 	bl	80051a4 <HAL_TIM_Encoder_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e10:	f7ff fe50 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_TIM3_Init+0xa0>)
 8001e22:	f003 fdbb 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e2c:	f7ff fe42 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200012a4 	.word	0x200012a4
 8001e3c:	40000400 	.word	0x40000400

08001e40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <MX_TIM4_Init+0xc4>)
 8001e66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e88:	481d      	ldr	r0, [pc, #116]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001e8a:	f003 f899 	bl	8004fc0 <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001e94:	f7ff fe0e 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4816      	ldr	r0, [pc, #88]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001ea8:	f003 fd78 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001eb2:	f7ff fdff 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	2360      	movs	r3, #96	; 0x60
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2208      	movs	r2, #8
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001ece:	f003 fa99 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ed8:	f7ff fdec 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	220c      	movs	r2, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001ee4:	f003 fa8e 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001eee:	f7ff fde1 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ef2:	4803      	ldr	r0, [pc, #12]	; (8001f00 <MX_TIM4_Init+0xc0>)
 8001ef4:	f000 f892 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200012ec 	.word	0x200012ec
 8001f04:	40000800 	.word	0x40000800

08001f08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d125      	bne.n	8001f74 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0318 	add.w	r3, r7, #24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001f6e:	f001 f845 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f72:	e028      	b.n	8001fc6 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_TIM_Encoder_MspInit+0xd4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	61d3      	str	r3, [r2, #28]
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0318 	add.w	r3, r7, #24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001fc2:	f001 f81b 	bl	8002ffc <HAL_GPIO_Init>
}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	; 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40000400 	.word	0x40000400

08001fe0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_TIM_PWM_MspInit+0x34>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10b      	bne.n	800200a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_TIM_PWM_MspInit+0x38>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_TIM_PWM_MspInit+0x38>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_TIM_PWM_MspInit+0x38>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40000800 	.word	0x40000800
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_TIM_MspPostInit+0x5c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d118      	bne.n	800206e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_TIM_MspPostInit+0x60>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_TIM_MspPostInit+0x60>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_TIM_MspPostInit+0x60>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2302      	movs	r3, #2
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_TIM_MspPostInit+0x64>)
 800206a:	f000 ffc7 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40000800 	.word	0x40000800
 800207c:	40021000 	.word	0x40021000
 8002080:	40010c00 	.word	0x40010c00

08002084 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <MX_USART3_UART_Init+0x50>)
 800208c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 8002090:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002094:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_USART3_UART_Init+0x4c>)
 80020bc:	f003 fccc 	bl	8005a58 <HAL_UART_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020c6:	f7ff fcf5 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20001334 	.word	0x20001334
 80020d4:	40004800 	.word	0x40004800

080020d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_UART_MspInit+0x8c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d131      	bne.n	800215c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_UART_MspInit+0x90>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_UART_MspInit+0x90>)
 80020fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002102:	61d3      	str	r3, [r2, #28]
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x90>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_UART_MspInit+0x90>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_UART_MspInit+0x90>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_UART_MspInit+0x90>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4619      	mov	r1, r3
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <HAL_UART_MspInit+0x94>)
 800213e:	f000 ff5d 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4619      	mov	r1, r3
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_UART_MspInit+0x94>)
 8002158:	f000 ff50 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800215c:	bf00      	nop
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40004800 	.word	0x40004800
 8002168:	40021000 	.word	0x40021000
 800216c:	40010c00 	.word	0x40010c00

08002170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002172:	490d      	ldr	r1, [pc, #52]	; (80021a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002188:	4c0a      	ldr	r4, [pc, #40]	; (80021b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002196:	f7ff fda1 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219a:	f003 fe1b 	bl	8005dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7ff f9f9 	bl	8001594 <main>
  bx lr
 80021a2:	4770      	bx	lr
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80021ac:	08006c70 	.word	0x08006c70
  ldr r2, =_sbss
 80021b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80021b4:	2000137c 	.word	0x2000137c

080021b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_2_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x28>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x28>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fce5 	bl	8002b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fd1c 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fcfd 	bl	8002c06 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 fcc5 	bl	8002bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000000 	.word	0x20000000
 8002240:	20000008 	.word	0x20000008
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x1c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x20>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_IncTick+0x20>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000008 	.word	0x20000008
 8002268:	20001378 	.word	0x20001378

0800226c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_GetTick+0x10>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20001378 	.word	0x20001378

08002280 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0be      	b.n	8002420 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe ffe4 	bl	800128c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 faf5 	bl	80028b4 <ADC_ConversionStop_Disable>
 80022ca:	4603      	mov	r3, r0
 80022cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 8099 	bne.w	800240e <HAL_ADC_Init+0x18e>
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 8095 	bne.w	800240e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	f043 0202 	orr.w	r2, r3, #2
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002300:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b1b      	ldrb	r3, [r3, #12]
 8002306:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002308:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4313      	orrs	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002318:	d003      	beq.n	8002322 <HAL_ADC_Init+0xa2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_ADC_Init+0xa8>
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	e000      	b.n	800232a <HAL_ADC_Init+0xaa>
 8002328:	2300      	movs	r3, #0
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7d1b      	ldrb	r3, [r3, #20]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d119      	bne.n	800236c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7b1b      	ldrb	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	3b01      	subs	r3, #1
 8002346:	035a      	lsls	r2, r3, #13
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e00b      	b.n	800236c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_ADC_Init+0x1a8>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	430b      	orrs	r3, r1
 8002392:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239c:	d003      	beq.n	80023a6 <HAL_ADC_Init+0x126>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d104      	bne.n	80023b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	051b      	lsls	r3, r3, #20
 80023ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_ADC_Init+0x1ac>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ea:	e018      	b.n	800241e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f023 0312 	bic.w	r3, r3, #18
 80023f4:	f043 0210 	orr.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800240c:	e007      	b.n	800241e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	ffe1f7fd 	.word	0xffe1f7fd
 800242c:	ff1f0efe 	.word	0xff1f0efe

08002430 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a64      	ldr	r2, [pc, #400]	; (80025d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_ADC_Start_DMA+0x24>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a63      	ldr	r2, [pc, #396]	; (80025dc <HAL_ADC_Start_DMA+0x1ac>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d106      	bne.n	8002462 <HAL_ADC_Start_DMA+0x32>
 8002454:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 80b3 	bne.w	80025c8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ADC_Start_DMA+0x40>
 800246c:	2302      	movs	r3, #2
 800246e:	e0ae      	b.n	80025ce <HAL_ADC_Start_DMA+0x19e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f9c1 	bl	8002800 <ADC_Enable>
 800247e:	4603      	mov	r3, r0
 8002480:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 809a 	bne.w	80025be <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4e      	ldr	r2, [pc, #312]	; (80025dc <HAL_ADC_Start_DMA+0x1ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_Start_DMA+0x84>
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_ADC_Start_DMA+0x1a8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d115      	bne.n	80024e0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d026      	beq.n	800251c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024de:	e01d      	b.n	800251c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <HAL_ADC_Start_DMA+0x1a8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_ADC_Start_DMA+0xd0>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a38      	ldr	r2, [pc, #224]	; (80025dc <HAL_ADC_Start_DMA+0x1ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10d      	bne.n	800251c <HAL_ADC_Start_DMA+0xec>
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002514:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f023 0206 	bic.w	r2, r3, #6
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
 8002534:	e002      	b.n	800253c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <HAL_ADC_Start_DMA+0x1b0>)
 800254a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_ADC_Start_DMA+0x1b4>)
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_ADC_Start_DMA+0x1b8>)
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0202 	mvn.w	r2, #2
 8002564:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002574:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a18      	ldr	r0, [r3, #32]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	334c      	adds	r3, #76	; 0x4c
 8002580:	4619      	mov	r1, r3
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f000 fba5 	bl	8002cd4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002594:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002598:	d108      	bne.n	80025ac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025a8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025aa:	e00f      	b.n	80025cc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025ba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025bc:	e006      	b.n	80025cc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40012400 	.word	0x40012400
 80025dc:	40012800 	.word	0x40012800
 80025e0:	08002937 	.word	0x08002937
 80025e4:	080029b3 	.word	0x080029b3
 80025e8:	080029cf 	.word	0x080029cf

080025ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x20>
 800262c:	2302      	movs	r3, #2
 800262e:	e0dc      	b.n	80027ea <HAL_ADC_ConfigChannel+0x1da>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d81c      	bhi.n	800267a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	3b05      	subs	r3, #5
 8002652:	221f      	movs	r2, #31
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b05      	subs	r3, #5
 800266c:	fa00 f203 	lsl.w	r2, r0, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	635a      	str	r2, [r3, #52]	; 0x34
 8002678:	e03c      	b.n	80026f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d81c      	bhi.n	80026bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b23      	subs	r3, #35	; 0x23
 8002694:	221f      	movs	r2, #31
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	4019      	ands	r1, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b23      	subs	r3, #35	; 0x23
 80026ae:	fa00 f203 	lsl.w	r2, r0, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ba:	e01b      	b.n	80026f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	3b41      	subs	r3, #65	; 0x41
 80026ce:	221f      	movs	r2, #31
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4019      	ands	r1, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b41      	subs	r3, #65	; 0x41
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b09      	cmp	r3, #9
 80026fa:	d91c      	bls.n	8002736 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1e      	subs	r3, #30
 800270e:	2207      	movs	r2, #7
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	4019      	ands	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6898      	ldr	r0, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	3b1e      	subs	r3, #30
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	e019      	b.n	800276a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6919      	ldr	r1, [r3, #16]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	2207      	movs	r2, #7
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	4019      	ands	r1, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6898      	ldr	r0, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d003      	beq.n	800277a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002776:	2b11      	cmp	r3, #17
 8002778:	d132      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d125      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d126      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d11a      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <HAL_ADC_ConfigChannel+0x1ec>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9a      	lsrs	r2, r3, #18
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x1b2>
 80027ce:	e007      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40012400 	.word	0x40012400
 80027f8:	20000000 	.word	0x20000000
 80027fc:	431bde83 	.word	0x431bde83

08002800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d040      	beq.n	80028a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <ADC_Enable+0xac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <ADC_Enable+0xb0>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800283c:	e002      	b.n	8002844 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3b01      	subs	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f9      	bne.n	800283e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800284a:	f7ff fd0f 	bl	800226c <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002850:	e01f      	b.n	8002892 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002852:	f7ff fd0b 	bl	800226c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d918      	bls.n	8002892 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d011      	beq.n	8002892 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e007      	b.n	80028a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d1d8      	bne.n	8002852 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000
 80028b0:	431bde83 	.word	0x431bde83

080028b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d12e      	bne.n	800292c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028de:	f7ff fcc5 	bl	800226c <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028e4:	e01b      	b.n	800291e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028e6:	f7ff fcc1 	bl	800226c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d914      	bls.n	800291e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10d      	bne.n	800291e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d0dc      	beq.n	80028e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800294c:	2b00      	cmp	r3, #0
 800294e:	d127      	bne.n	80029a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002966:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800296a:	d115      	bne.n	8002998 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7fe ff7b 	bl	8001894 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800299e:	e004      	b.n	80029aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff fe13 	bl	80025ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff fe02 	bl	80025fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <__NVIC_EnableIRQ+0x34>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b68:	d301      	bcc.n	8002b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00f      	b.n	8002b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <SysTick_Config+0x40>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b76:	210f      	movs	r1, #15
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	f7ff ff90 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <SysTick_Config+0x40>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <SysTick_Config+0x40>)
 8002b88:	2207      	movs	r2, #7
 8002b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000e010 	.word	0xe000e010

08002b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff2d 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc4:	f7ff ff42 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff90 	bl	8002af4 <NVIC_EncodePriority>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff5f 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff35 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffa2 	bl	8002b58 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e043      	b.n	8002cbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <HAL_DMA_Init+0xa8>)
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_DMA_Init+0xac>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_DMA_Init+0xb0>)
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	bffdfff8 	.word	0xbffdfff8
 8002ccc:	cccccccd 	.word	0xcccccccd
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Start_IT+0x20>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e04a      	b.n	8002d8a <HAL_DMA_Start_IT+0xb6>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d13a      	bne.n	8002d7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f938 	bl	8002fa0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 020e 	orr.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e00f      	b.n	8002d6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 020a 	orr.w	r2, r2, #10
 8002d68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e005      	b.n	8002d88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04f      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xc8>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04a      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a66      	ldr	r2, [pc, #408]	; (8002f84 <HAL_DMA_IRQHandler+0x1f0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d029      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xae>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_DMA_IRQHandler+0x1f4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_IRQHandler+0xaa>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a63      	ldr	r2, [pc, #396]	; (8002f8c <HAL_DMA_IRQHandler+0x1f8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0xa4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a62      	ldr	r2, [pc, #392]	; (8002f90 <HAL_DMA_IRQHandler+0x1fc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d012      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x9e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a60      	ldr	r2, [pc, #384]	; (8002f94 <HAL_DMA_IRQHandler+0x200>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00a      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x98>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5f      	ldr	r2, [pc, #380]	; (8002f98 <HAL_DMA_IRQHandler+0x204>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d102      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x92>
 8002e20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e24:	e00e      	b.n	8002e44 <HAL_DMA_IRQHandler+0xb0>
 8002e26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e2a:	e00b      	b.n	8002e44 <HAL_DMA_IRQHandler+0xb0>
 8002e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e30:	e008      	b.n	8002e44 <HAL_DMA_IRQHandler+0xb0>
 8002e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e36:	e005      	b.n	8002e44 <HAL_DMA_IRQHandler+0xb0>
 8002e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3c:	e002      	b.n	8002e44 <HAL_DMA_IRQHandler+0xb0>
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	e000      	b.n	8002e44 <HAL_DMA_IRQHandler+0xb0>
 8002e42:	2304      	movs	r3, #4
 8002e44:	4a55      	ldr	r2, [pc, #340]	; (8002f9c <HAL_DMA_IRQHandler+0x208>)
 8002e46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8094 	beq.w	8002f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e5a:	e08e      	b.n	8002f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2202      	movs	r2, #2
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d056      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x186>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d051      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 020a 	bic.w	r2, r2, #10
 8002e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <HAL_DMA_IRQHandler+0x1f0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d029      	beq.n	8002efa <HAL_DMA_IRQHandler+0x166>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <HAL_DMA_IRQHandler+0x1f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x162>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a35      	ldr	r2, [pc, #212]	; (8002f8c <HAL_DMA_IRQHandler+0x1f8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x15c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <HAL_DMA_IRQHandler+0x1fc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d012      	beq.n	8002eea <HAL_DMA_IRQHandler+0x156>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <HAL_DMA_IRQHandler+0x200>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x150>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_DMA_IRQHandler+0x204>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d102      	bne.n	8002ede <HAL_DMA_IRQHandler+0x14a>
 8002ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002edc:	e00e      	b.n	8002efc <HAL_DMA_IRQHandler+0x168>
 8002ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee2:	e00b      	b.n	8002efc <HAL_DMA_IRQHandler+0x168>
 8002ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee8:	e008      	b.n	8002efc <HAL_DMA_IRQHandler+0x168>
 8002eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eee:	e005      	b.n	8002efc <HAL_DMA_IRQHandler+0x168>
 8002ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef4:	e002      	b.n	8002efc <HAL_DMA_IRQHandler+0x168>
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e000      	b.n	8002efc <HAL_DMA_IRQHandler+0x168>
 8002efa:	2302      	movs	r3, #2
 8002efc:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_DMA_IRQHandler+0x208>)
 8002efe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d034      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f18:	e02f      	b.n	8002f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2208      	movs	r2, #8
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d028      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x1e8>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d023      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 020e 	bic.w	r2, r2, #14
 8002f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
    }
  }
  return;
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
}
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40020008 	.word	0x40020008
 8002f88:	4002001c 	.word	0x4002001c
 8002f8c:	40020030 	.word	0x40020030
 8002f90:	40020044 	.word	0x40020044
 8002f94:	40020058 	.word	0x40020058
 8002f98:	4002006c 	.word	0x4002006c
 8002f9c:	40020000 	.word	0x40020000

08002fa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d108      	bne.n	8002fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fde:	e007      	b.n	8002ff0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b08b      	sub	sp, #44	; 0x2c
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	e169      	b.n	80032e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003010:	2201      	movs	r2, #1
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 8158 	bne.w	80032de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4a9a      	ldr	r2, [pc, #616]	; (800329c <HAL_GPIO_Init+0x2a0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d05e      	beq.n	80030f6 <HAL_GPIO_Init+0xfa>
 8003038:	4a98      	ldr	r2, [pc, #608]	; (800329c <HAL_GPIO_Init+0x2a0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d875      	bhi.n	800312a <HAL_GPIO_Init+0x12e>
 800303e:	4a98      	ldr	r2, [pc, #608]	; (80032a0 <HAL_GPIO_Init+0x2a4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d058      	beq.n	80030f6 <HAL_GPIO_Init+0xfa>
 8003044:	4a96      	ldr	r2, [pc, #600]	; (80032a0 <HAL_GPIO_Init+0x2a4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d86f      	bhi.n	800312a <HAL_GPIO_Init+0x12e>
 800304a:	4a96      	ldr	r2, [pc, #600]	; (80032a4 <HAL_GPIO_Init+0x2a8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d052      	beq.n	80030f6 <HAL_GPIO_Init+0xfa>
 8003050:	4a94      	ldr	r2, [pc, #592]	; (80032a4 <HAL_GPIO_Init+0x2a8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d869      	bhi.n	800312a <HAL_GPIO_Init+0x12e>
 8003056:	4a94      	ldr	r2, [pc, #592]	; (80032a8 <HAL_GPIO_Init+0x2ac>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d04c      	beq.n	80030f6 <HAL_GPIO_Init+0xfa>
 800305c:	4a92      	ldr	r2, [pc, #584]	; (80032a8 <HAL_GPIO_Init+0x2ac>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d863      	bhi.n	800312a <HAL_GPIO_Init+0x12e>
 8003062:	4a92      	ldr	r2, [pc, #584]	; (80032ac <HAL_GPIO_Init+0x2b0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d046      	beq.n	80030f6 <HAL_GPIO_Init+0xfa>
 8003068:	4a90      	ldr	r2, [pc, #576]	; (80032ac <HAL_GPIO_Init+0x2b0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d85d      	bhi.n	800312a <HAL_GPIO_Init+0x12e>
 800306e:	2b12      	cmp	r3, #18
 8003070:	d82a      	bhi.n	80030c8 <HAL_GPIO_Init+0xcc>
 8003072:	2b12      	cmp	r3, #18
 8003074:	d859      	bhi.n	800312a <HAL_GPIO_Init+0x12e>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_GPIO_Init+0x80>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	080030f7 	.word	0x080030f7
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080030e3 	.word	0x080030e3
 8003088:	08003125 	.word	0x08003125
 800308c:	0800312b 	.word	0x0800312b
 8003090:	0800312b 	.word	0x0800312b
 8003094:	0800312b 	.word	0x0800312b
 8003098:	0800312b 	.word	0x0800312b
 800309c:	0800312b 	.word	0x0800312b
 80030a0:	0800312b 	.word	0x0800312b
 80030a4:	0800312b 	.word	0x0800312b
 80030a8:	0800312b 	.word	0x0800312b
 80030ac:	0800312b 	.word	0x0800312b
 80030b0:	0800312b 	.word	0x0800312b
 80030b4:	0800312b 	.word	0x0800312b
 80030b8:	0800312b 	.word	0x0800312b
 80030bc:	0800312b 	.word	0x0800312b
 80030c0:	080030d9 	.word	0x080030d9
 80030c4:	080030ed 	.word	0x080030ed
 80030c8:	4a79      	ldr	r2, [pc, #484]	; (80032b0 <HAL_GPIO_Init+0x2b4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ce:	e02c      	b.n	800312a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	623b      	str	r3, [r7, #32]
          break;
 80030d6:	e029      	b.n	800312c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	3304      	adds	r3, #4
 80030de:	623b      	str	r3, [r7, #32]
          break;
 80030e0:	e024      	b.n	800312c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	3308      	adds	r3, #8
 80030e8:	623b      	str	r3, [r7, #32]
          break;
 80030ea:	e01f      	b.n	800312c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	330c      	adds	r3, #12
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e01a      	b.n	800312c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030fe:	2304      	movs	r3, #4
 8003100:	623b      	str	r3, [r7, #32]
          break;
 8003102:	e013      	b.n	800312c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800310c:	2308      	movs	r3, #8
 800310e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	611a      	str	r2, [r3, #16]
          break;
 8003116:	e009      	b.n	800312c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003118:	2308      	movs	r3, #8
 800311a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	615a      	str	r2, [r3, #20]
          break;
 8003122:	e003      	b.n	800312c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003124:	2300      	movs	r3, #0
 8003126:	623b      	str	r3, [r7, #32]
          break;
 8003128:	e000      	b.n	800312c <HAL_GPIO_Init+0x130>
          break;
 800312a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2bff      	cmp	r3, #255	; 0xff
 8003130:	d801      	bhi.n	8003136 <HAL_GPIO_Init+0x13a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	e001      	b.n	800313a <HAL_GPIO_Init+0x13e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2bff      	cmp	r3, #255	; 0xff
 8003140:	d802      	bhi.n	8003148 <HAL_GPIO_Init+0x14c>
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	e002      	b.n	800314e <HAL_GPIO_Init+0x152>
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	3b08      	subs	r3, #8
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	210f      	movs	r1, #15
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	6a39      	ldr	r1, [r7, #32]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	431a      	orrs	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80b1 	beq.w	80032de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800317c:	4b4d      	ldr	r3, [pc, #308]	; (80032b4 <HAL_GPIO_Init+0x2b8>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a4c      	ldr	r2, [pc, #304]	; (80032b4 <HAL_GPIO_Init+0x2b8>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <HAL_GPIO_Init+0x2b8>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003194:	4a48      	ldr	r2, [pc, #288]	; (80032b8 <HAL_GPIO_Init+0x2bc>)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	220f      	movs	r2, #15
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a40      	ldr	r2, [pc, #256]	; (80032bc <HAL_GPIO_Init+0x2c0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_GPIO_Init+0x1ec>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <HAL_GPIO_Init+0x2c4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00d      	beq.n	80031e4 <HAL_GPIO_Init+0x1e8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a3e      	ldr	r2, [pc, #248]	; (80032c4 <HAL_GPIO_Init+0x2c8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <HAL_GPIO_Init+0x1e4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a3d      	ldr	r2, [pc, #244]	; (80032c8 <HAL_GPIO_Init+0x2cc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_GPIO_Init+0x1e0>
 80031d8:	2303      	movs	r3, #3
 80031da:	e006      	b.n	80031ea <HAL_GPIO_Init+0x1ee>
 80031dc:	2304      	movs	r3, #4
 80031de:	e004      	b.n	80031ea <HAL_GPIO_Init+0x1ee>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e002      	b.n	80031ea <HAL_GPIO_Init+0x1ee>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_GPIO_Init+0x1ee>
 80031e8:	2300      	movs	r3, #0
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	f002 0203 	and.w	r2, r2, #3
 80031f0:	0092      	lsls	r2, r2, #2
 80031f2:	4093      	lsls	r3, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031fa:	492f      	ldr	r1, [pc, #188]	; (80032b8 <HAL_GPIO_Init+0x2bc>)
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	3302      	adds	r3, #2
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	492c      	ldr	r1, [pc, #176]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003222:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	43db      	mvns	r3, r3
 800322a:	4928      	ldr	r1, [pc, #160]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800322c:	4013      	ands	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4922      	ldr	r1, [pc, #136]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	43db      	mvns	r3, r3
 8003252:	491e      	ldr	r1, [pc, #120]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003254:	4013      	ands	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4918      	ldr	r1, [pc, #96]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	43db      	mvns	r3, r3
 800327a:	4914      	ldr	r1, [pc, #80]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800327c:	4013      	ands	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d021      	beq.n	80032d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_GPIO_Init+0x2d0>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
 8003298:	e021      	b.n	80032de <HAL_GPIO_Init+0x2e2>
 800329a:	bf00      	nop
 800329c:	10320000 	.word	0x10320000
 80032a0:	10310000 	.word	0x10310000
 80032a4:	10220000 	.word	0x10220000
 80032a8:	10210000 	.word	0x10210000
 80032ac:	10120000 	.word	0x10120000
 80032b0:	10110000 	.word	0x10110000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40010800 	.word	0x40010800
 80032c0:	40010c00 	.word	0x40010c00
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_GPIO_Init+0x304>)
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	4909      	ldr	r1, [pc, #36]	; (8003300 <HAL_GPIO_Init+0x304>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f47f ae8e 	bne.w	8003010 <HAL_GPIO_Init+0x14>
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	372c      	adds	r7, #44	; 0x2c
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e001      	b.n	8003326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	807b      	strh	r3, [r7, #2]
 800333e:	4613      	mov	r3, r2
 8003340:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003342:	787b      	ldrb	r3, [r7, #1]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003348:	887a      	ldrh	r2, [r7, #2]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800334e:	e003      	b.n	8003358 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
	...

08003364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12b      	b.n	80035ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe f8c4 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033c8:	f001 fcfe 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a81      	ldr	r2, [pc, #516]	; (80035d8 <HAL_I2C_Init+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d807      	bhi.n	80033e8 <HAL_I2C_Init+0x84>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_I2C_Init+0x278>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e006      	b.n	80033f6 <HAL_I2C_Init+0x92>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a7d      	ldr	r2, [pc, #500]	; (80035e0 <HAL_I2C_Init+0x27c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0e7      	b.n	80035ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a78      	ldr	r2, [pc, #480]	; (80035e4 <HAL_I2C_Init+0x280>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a6a      	ldr	r2, [pc, #424]	; (80035d8 <HAL_I2C_Init+0x274>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d802      	bhi.n	8003438 <HAL_I2C_Init+0xd4>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	e009      	b.n	800344c <HAL_I2C_Init+0xe8>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <HAL_I2C_Init+0x284>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800345e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	495c      	ldr	r1, [pc, #368]	; (80035d8 <HAL_I2C_Init+0x274>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d819      	bhi.n	80034a0 <HAL_I2C_Init+0x13c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e59      	subs	r1, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fbb1 f3f3 	udiv	r3, r1, r3
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003480:	400b      	ands	r3, r1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_I2C_Init+0x138>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e59      	subs	r1, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fbb1 f3f3 	udiv	r3, r1, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349a:	e051      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 800349c:	2304      	movs	r3, #4
 800349e:	e04f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <HAL_I2C_Init+0x168>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e012      	b.n	80034f2 <HAL_I2C_Init+0x18e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Init+0x196>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <HAL_I2C_Init+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e58      	subs	r0, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	440b      	add	r3, r1
 8003510:	fbb0 f3f3 	udiv	r3, r0, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6809      	ldr	r1, [r1, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800356e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6911      	ldr	r1, [r2, #16]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	000186a0 	.word	0x000186a0
 80035dc:	001e847f 	.word	0x001e847f
 80035e0:	003d08ff 	.word	0x003d08ff
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	460b      	mov	r3, r1
 80035fa:	817b      	strh	r3, [r7, #10]
 80035fc:	4613      	mov	r3, r2
 80035fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7fe fe34 	bl	800226c <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b20      	cmp	r3, #32
 8003610:	f040 80e0 	bne.w	80037d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2319      	movs	r3, #25
 800361a:	2201      	movs	r2, #1
 800361c:	4970      	ldr	r1, [pc, #448]	; (80037e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fe22 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
 800362c:	e0d3      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_I2C_Master_Transmit+0x50>
 8003638:	2302      	movs	r3, #2
 800363a:	e0cc      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d007      	beq.n	8003662 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2210      	movs	r2, #16
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	893a      	ldrh	r2, [r7, #8]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036a4:	8979      	ldrh	r1, [r7, #10]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fbf6 	bl	8003e9c <I2C_MasterRequestWrite>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e08d      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036d0:	e066      	b.n	80037a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fe9c 	bl	8004414 <I2C_WaitOnTXEFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d107      	bne.n	80036fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06b      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	781a      	ldrb	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b04      	cmp	r3, #4
 800373a:	d11b      	bne.n	8003774 <HAL_I2C_Master_Transmit+0x188>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6a39      	ldr	r1, [r7, #32]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fe8c 	bl	8004496 <I2C_WaitOnBTFFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e01a      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d194      	bne.n	80036d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	00100002 	.word	0x00100002
 80037e4:	ffff0000 	.word	0xffff0000

080037e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	461a      	mov	r2, r3
 80037f4:	460b      	mov	r3, r1
 80037f6:	817b      	strh	r3, [r7, #10]
 80037f8:	4613      	mov	r3, r2
 80037fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7fe fd34 	bl	800226c <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	f040 823f 	bne.w	8003c92 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	497f      	ldr	r1, [pc, #508]	; (8003a1c <HAL_I2C_Master_Receive+0x234>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fd22 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	e232      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2C_Master_Receive+0x54>
 8003838:	2302      	movs	r3, #2
 800383a:	e22b      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d007      	beq.n	8003862 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2222      	movs	r2, #34	; 0x22
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2210      	movs	r2, #16
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a5f      	ldr	r2, [pc, #380]	; (8003a20 <HAL_I2C_Master_Receive+0x238>)
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fb78 	bl	8003fa0 <I2C_MasterRequestRead>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1ec      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e1c0      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d11e      	bne.n	8003930 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003900:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003902:	b672      	cpsid	i
}
 8003904:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800392c:	b662      	cpsie	i
}
 800392e:	e035      	b.n	800399c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11e      	bne.n	8003976 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003948:	b672      	cpsid	i
}
 800394a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003972:	b662      	cpsie	i
}
 8003974:	e012      	b.n	800399c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800399c:	e166      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	f200 811f 	bhi.w	8003be6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d123      	bne.n	80039f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fdaf 	bl	8004518 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e167      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f6:	e139      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d152      	bne.n	8003aa6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	4906      	ldr	r1, [pc, #24]	; (8003a24 <HAL_I2C_Master_Receive+0x23c>)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fc2c 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e13c      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
 8003a1a:	bf00      	nop
 8003a1c:	00100002 	.word	0x00100002
 8003a20:	ffff0000 	.word	0xffff0000
 8003a24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a6e:	b662      	cpsie	i
}
 8003a70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa4:	e0e2      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	2200      	movs	r2, #0
 8003aae:	497b      	ldr	r1, [pc, #492]	; (8003c9c <HAL_I2C_Master_Receive+0x4b4>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fbd9 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0e9      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ace:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <HAL_I2C_Master_Receive+0x4b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_I2C_Master_Receive+0x4bc>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a1a      	lsrs	r2, r3, #8
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00da      	lsls	r2, r3, #3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d118      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b4e:	b662      	cpsie	i
}
 8003b50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e09a      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d1d9      	bne.n	8003b20 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bae:	b662      	cpsie	i
}
 8003bb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be4:	e042      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fc94 	bl	8004518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e04c      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d118      	bne.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f ae94 	bne.w	800399e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010004 	.word	0x00010004
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	14f8b589 	.word	0x14f8b589

08003ca8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	817b      	strh	r3, [r7, #10]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	813b      	strh	r3, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc2:	f7fe fad3 	bl	800226c <HAL_GetTick>
 8003cc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	f040 80d9 	bne.w	8003e88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2319      	movs	r3, #25
 8003cdc:	2201      	movs	r2, #1
 8003cde:	496d      	ldr	r1, [pc, #436]	; (8003e94 <HAL_I2C_Mem_Write+0x1ec>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fac1 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0cc      	b.n	8003e8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_Mem_Write+0x56>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0c5      	b.n	8003e8a <HAL_I2C_Mem_Write+0x1e2>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d007      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2221      	movs	r2, #33	; 0x21
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a4d      	ldr	r2, [pc, #308]	; (8003e98 <HAL_I2C_Mem_Write+0x1f0>)
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d66:	88f8      	ldrh	r0, [r7, #6]
 8003d68:	893a      	ldrh	r2, [r7, #8]
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4603      	mov	r3, r0
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f9e0 	bl	800413c <I2C_RequestMemoryWrite>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d052      	beq.n	8003e28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e081      	b.n	8003e8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fb42 	bl	8004414 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d107      	bne.n	8003dae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06b      	b.n	8003e8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11b      	bne.n	8003e28 <HAL_I2C_Mem_Write+0x180>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1aa      	bne.n	8003d86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fb2e 	bl	8004496 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d107      	bne.n	8003e58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e016      	b.n	8003e8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	00100002 	.word	0x00100002
 8003e98:	ffff0000 	.word	0xffff0000

08003e9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d006      	beq.n	8003ec6 <I2C_MasterRequestWrite+0x2a>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d003      	beq.n	8003ec6 <I2C_MasterRequestWrite+0x2a>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec4:	d108      	bne.n	8003ed8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e00b      	b.n	8003ef0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	2b12      	cmp	r3, #18
 8003ede:	d107      	bne.n	8003ef0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f9b3 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f16:	d103      	bne.n	8003f20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e035      	b.n	8003f90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f2c:	d108      	bne.n	8003f40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f2e:	897b      	ldrh	r3, [r7, #10]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	e01b      	b.n	8003f78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f40:	897b      	ldrh	r3, [r7, #10]
 8003f42:	11db      	asrs	r3, r3, #7
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 0306 	and.w	r3, r3, #6
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f063 030f 	orn	r3, r3, #15
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <I2C_MasterRequestWrite+0xfc>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f9d9 	bl	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e010      	b.n	8003f90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4907      	ldr	r1, [pc, #28]	; (8003f9c <I2C_MasterRequestWrite+0x100>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f9c9 	bl	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	00010008 	.word	0x00010008
 8003f9c:	00010002 	.word	0x00010002

08003fa0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	460b      	mov	r3, r1
 8003fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d006      	beq.n	8003fda <I2C_MasterRequestRead+0x3a>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d003      	beq.n	8003fda <I2C_MasterRequestRead+0x3a>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd8:	d108      	bne.n	8003fec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e00b      	b.n	8004004 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	2b11      	cmp	r3, #17
 8003ff2:	d107      	bne.n	8004004 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004002:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f929 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402a:	d103      	bne.n	8004034 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e079      	b.n	800412c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004040:	d108      	bne.n	8004054 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004042:	897b      	ldrh	r3, [r7, #10]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	611a      	str	r2, [r3, #16]
 8004052:	e05f      	b.n	8004114 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004054:	897b      	ldrh	r3, [r7, #10]
 8004056:	11db      	asrs	r3, r3, #7
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f063 030f 	orn	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4930      	ldr	r1, [pc, #192]	; (8004134 <I2C_MasterRequestRead+0x194>)
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f94f 	bl	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e054      	b.n	800412c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4929      	ldr	r1, [pc, #164]	; (8004138 <I2C_MasterRequestRead+0x198>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f93f 	bl	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e044      	b.n	800412c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f8c7 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ee:	d103      	bne.n	80040f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e017      	b.n	800412c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040fc:	897b      	ldrh	r3, [r7, #10]
 80040fe:	11db      	asrs	r3, r3, #7
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0306 	and.w	r3, r3, #6
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f063 030e 	orn	r3, r3, #14
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4907      	ldr	r1, [pc, #28]	; (8004138 <I2C_MasterRequestRead+0x198>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f8fb 	bl	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	00010008 	.word	0x00010008
 8004138:	00010002 	.word	0x00010002

0800413c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004164:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	2200      	movs	r2, #0
 800416e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f878 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418c:	d103      	bne.n	8004196 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e05f      	b.n	800425a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	492d      	ldr	r1, [pc, #180]	; (8004264 <I2C_RequestMemoryWrite+0x128>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f8b0 	bl	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e04c      	b.n	800425a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	6a39      	ldr	r1, [r7, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f91a 	bl	8004414 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d107      	bne.n	80041fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e02b      	b.n	800425a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004208:	893b      	ldrh	r3, [r7, #8]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]
 8004212:	e021      	b.n	8004258 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	6a39      	ldr	r1, [r7, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f8f4 	bl	8004414 <I2C_WaitOnTXEFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2b04      	cmp	r3, #4
 8004238:	d107      	bne.n	800424a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004248:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e005      	b.n	800425a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800424e:	893b      	ldrh	r3, [r7, #8]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	00010002 	.word	0x00010002

08004268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004278:	e025      	b.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d021      	beq.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fd fff3 	bl	800226c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d116      	bne.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f043 0220 	orr.w	r2, r3, #32
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e023      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10d      	bne.n	80042ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	e00c      	b.n	8004306 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d0b6      	beq.n	800427a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004324:	e051      	b.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d123      	bne.n	800437e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004344:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800434e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e046      	b.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d021      	beq.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004386:	f7fd ff71 	bl	800226c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d116      	bne.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e020      	b.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10c      	bne.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e00b      	b.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	43da      	mvns	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d18d      	bne.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004420:	e02d      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f8ce 	bl	80045c4 <I2C_IsAcknowledgeFailed>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e02d      	b.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d021      	beq.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd ff17 	bl	800226c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e007      	b.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d1ca      	bne.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a2:	e02d      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f88d 	bl	80045c4 <I2C_IsAcknowledgeFailed>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e02d      	b.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d021      	beq.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fd fed6 	bl	800226c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b04      	cmp	r3, #4
 800450c:	d1ca      	bne.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004524:	e042      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b10      	cmp	r3, #16
 8004532:	d119      	bne.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e029      	b.n	80045bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004568:	f7fd fe80 	bl	800226c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d116      	bne.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e007      	b.n	80045bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d1b5      	bne.n	8004526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045da:	d11b      	bne.n	8004614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e272      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8087 	beq.w	800474e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004640:	4b92      	ldr	r3, [pc, #584]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b04      	cmp	r3, #4
 800464a:	d00c      	beq.n	8004666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800464c:	4b8f      	ldr	r3, [pc, #572]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d112      	bne.n	800467e <HAL_RCC_OscConfig+0x5e>
 8004658:	4b8c      	ldr	r3, [pc, #560]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d10b      	bne.n	800467e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004666:	4b89      	ldr	r3, [pc, #548]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d06c      	beq.n	800474c <HAL_RCC_OscConfig+0x12c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d168      	bne.n	800474c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e24c      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x76>
 8004688:	4b80      	ldr	r3, [pc, #512]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7f      	ldr	r2, [pc, #508]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e02e      	b.n	80046f4 <HAL_RCC_OscConfig+0xd4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x98>
 800469e:	4b7b      	ldr	r3, [pc, #492]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a7a      	ldr	r2, [pc, #488]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b78      	ldr	r3, [pc, #480]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a77      	ldr	r2, [pc, #476]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0xd4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0xbc>
 80046c2:	4b72      	ldr	r3, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a71      	ldr	r2, [pc, #452]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b6f      	ldr	r3, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6e      	ldr	r2, [pc, #440]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xd4>
 80046dc:	4b6b      	ldr	r3, [pc, #428]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a6a      	ldr	r2, [pc, #424]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b68      	ldr	r3, [pc, #416]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a67      	ldr	r2, [pc, #412]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd fdb6 	bl	800226c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd fdb2 	bl	800226c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e200      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b5d      	ldr	r3, [pc, #372]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0xe4>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd fda2 	bl	800226c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fd9e 	bl	800226c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1ec      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	4b53      	ldr	r3, [pc, #332]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x10c>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800475a:	4b4c      	ldr	r3, [pc, #304]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004766:	4b49      	ldr	r3, [pc, #292]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11c      	bne.n	80047ac <HAL_RCC_OscConfig+0x18c>
 8004772:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d116      	bne.n	80047ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_RCC_OscConfig+0x176>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e1c0      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b3d      	ldr	r3, [pc, #244]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4939      	ldr	r1, [pc, #228]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	e03a      	b.n	8004822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b4:	4b36      	ldr	r3, [pc, #216]	; (8004890 <HAL_RCC_OscConfig+0x270>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fd fd57 	bl	800226c <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fd fd53 	bl	800226c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1a1      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	4b2d      	ldr	r3, [pc, #180]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e0:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4927      	ldr	r1, [pc, #156]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f6:	4b26      	ldr	r3, [pc, #152]	; (8004890 <HAL_RCC_OscConfig+0x270>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fd fd36 	bl	800226c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004804:	f7fd fd32 	bl	800226c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e180      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03a      	beq.n	80048a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d019      	beq.n	800486a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004836:	4b17      	ldr	r3, [pc, #92]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483c:	f7fd fd16 	bl	800226c <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004844:	f7fd fd12 	bl	800226c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e160      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_RCC_OscConfig+0x26c>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004862:	2001      	movs	r0, #1
 8004864:	f000 fad8 	bl	8004e18 <RCC_Delay>
 8004868:	e01c      	b.n	80048a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004870:	f7fd fcfc 	bl	800226c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004876:	e00f      	b.n	8004898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd fcf8 	bl	800226c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d908      	bls.n	8004898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e146      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	42420000 	.word	0x42420000
 8004894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	4b92      	ldr	r3, [pc, #584]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e9      	bne.n	8004878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a6 	beq.w	80049fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b8b      	ldr	r3, [pc, #556]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10d      	bne.n	80048de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	4b88      	ldr	r3, [pc, #544]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4a87      	ldr	r2, [pc, #540]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	61d3      	str	r3, [r2, #28]
 80048ce:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048de:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <HAL_RCC_OscConfig+0x4c8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d118      	bne.n	800491c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ea:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCC_OscConfig+0x4c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a7e      	ldr	r2, [pc, #504]	; (8004ae8 <HAL_RCC_OscConfig+0x4c8>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f6:	f7fd fcb9 	bl	800226c <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fd fcb5 	bl	800226c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e103      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	4b75      	ldr	r3, [pc, #468]	; (8004ae8 <HAL_RCC_OscConfig+0x4c8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x312>
 8004924:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6213      	str	r3, [r2, #32]
 8004930:	e02d      	b.n	800498e <HAL_RCC_OscConfig+0x36e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x334>
 800493a:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	4a69      	ldr	r2, [pc, #420]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	6213      	str	r3, [r2, #32]
 8004946:	4b67      	ldr	r3, [pc, #412]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a66      	ldr	r2, [pc, #408]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	6213      	str	r3, [r2, #32]
 8004952:	e01c      	b.n	800498e <HAL_RCC_OscConfig+0x36e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_OscConfig+0x356>
 800495c:	4b61      	ldr	r3, [pc, #388]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	4a60      	ldr	r2, [pc, #384]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6213      	str	r3, [r2, #32]
 8004968:	4b5e      	ldr	r3, [pc, #376]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	4a5d      	ldr	r2, [pc, #372]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6213      	str	r3, [r2, #32]
 8004974:	e00b      	b.n	800498e <HAL_RCC_OscConfig+0x36e>
 8004976:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	4a5a      	ldr	r2, [pc, #360]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	6213      	str	r3, [r2, #32]
 8004982:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	4a57      	ldr	r2, [pc, #348]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004996:	f7fd fc69 	bl	800226c <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fd fc65 	bl	800226c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e0b1      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ee      	beq.n	800499e <HAL_RCC_OscConfig+0x37e>
 80049c0:	e014      	b.n	80049ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fd fc53 	bl	800226c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fd fc4f 	bl	800226c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e09b      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e0:	4b40      	ldr	r3, [pc, #256]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ee      	bne.n	80049ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d105      	bne.n	80049fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f2:	4b3c      	ldr	r3, [pc, #240]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4a3b      	ldr	r2, [pc, #236]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8087 	beq.w	8004b16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a08:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d061      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d146      	bne.n	8004aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1c:	4b33      	ldr	r3, [pc, #204]	; (8004aec <HAL_RCC_OscConfig+0x4cc>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd fc23 	bl	800226c <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fd fc1f 	bl	800226c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e06d      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3c:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d108      	bne.n	8004a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4921      	ldr	r1, [pc, #132]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a64:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a19      	ldr	r1, [r3, #32]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	430b      	orrs	r3, r1
 8004a76:	491b      	ldr	r1, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCC_OscConfig+0x4cc>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fd fbf3 	bl	800226c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fd fbef 	bl	800226c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e03d      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x46a>
 8004aa8:	e035      	b.n	8004b16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <HAL_RCC_OscConfig+0x4cc>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fbdc 	bl	800226c <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab8:	f7fd fbd8 	bl	800226c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e026      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x498>
 8004ad6:	e01e      	b.n	8004b16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e019      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_OscConfig+0x500>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000

08004b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0d0      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b6a      	ldr	r3, [pc, #424]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d910      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b67      	ldr	r3, [pc, #412]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 0207 	bic.w	r2, r3, #7
 8004b4e:	4965      	ldr	r1, [pc, #404]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b63      	ldr	r3, [pc, #396]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0b8      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d020      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b80:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4a58      	ldr	r2, [pc, #352]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b98:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a52      	ldr	r2, [pc, #328]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba4:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	494d      	ldr	r1, [pc, #308]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d040      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d115      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e07f      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be2:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e073      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf2:	4b3d      	ldr	r3, [pc, #244]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e06b      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4936      	ldr	r1, [pc, #216]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c14:	f7fd fb2a 	bl	800226c <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1c:	f7fd fb26 	bl	800226c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e053      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 020c 	and.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d1eb      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d210      	bcs.n	8004c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 0207 	bic.w	r2, r3, #7
 8004c5a:	4922      	ldr	r1, [pc, #136]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e032      	b.n	8004cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4916      	ldr	r1, [pc, #88]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	490e      	ldr	r1, [pc, #56]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cb2:	f000 f821 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	490a      	ldr	r1, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	5ccb      	ldrb	r3, [r1, r3]
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8004ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fa88 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40022000 	.word	0x40022000
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	08006c20 	.word	0x08006c20
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	20000004 	.word	0x20000004

08004cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf8:	b490      	push	{r4, r7}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cfe:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d00:	1d3c      	adds	r4, r7, #4
 8004d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d08:	f240 2301 	movw	r3, #513	; 0x201
 8004d0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d22:	4b21      	ldr	r3, [pc, #132]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d002      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x40>
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0x46>
 8004d36:	e02b      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d38:	4b1c      	ldr	r3, [pc, #112]	; (8004dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d3a:	623b      	str	r3, [r7, #32]
      break;
 8004d3c:	e02b      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	0c9b      	lsrs	r3, r3, #18
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3328      	adds	r3, #40	; 0x28
 8004d48:	443b      	add	r3, r7
 8004d4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	0c5b      	lsrs	r3, r3, #17
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	3328      	adds	r3, #40	; 0x28
 8004d66:	443b      	add	r3, r7
 8004d68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d72:	fb03 f202 	mul.w	r2, r3, r2
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e004      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	623b      	str	r3, [r7, #32]
      break;
 8004d8e:	e002      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d92:	623b      	str	r3, [r7, #32]
      break;
 8004d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d96:	6a3b      	ldr	r3, [r7, #32]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc90      	pop	{r4, r7}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	08006c10 	.word	0x08006c10
 8004da8:	40021000 	.word	0x40021000
 8004dac:	007a1200 	.word	0x007a1200
 8004db0:	003d0900 	.word	0x003d0900

08004db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	20000000 	.word	0x20000000

08004dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dcc:	f7ff fff2 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4903      	ldr	r1, [pc, #12]	; (8004dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08006c30 	.word	0x08006c30

08004df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004df4:	f7ff ffde 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	0adb      	lsrs	r3, r3, #11
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4903      	ldr	r1, [pc, #12]	; (8004e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40021000 	.word	0x40021000
 8004e14:	08006c30 	.word	0x08006c30

08004e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <RCC_Delay+0x34>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <RCC_Delay+0x38>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e34:	bf00      	nop
  }
  while (Delay --);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1e5a      	subs	r2, r3, #1
 8004e3a:	60fa      	str	r2, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f9      	bne.n	8004e34 <RCC_Delay+0x1c>
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	20000000 	.word	0x20000000
 8004e50:	10624dd3 	.word	0x10624dd3

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d07d      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e74:	4b4f      	ldr	r3, [pc, #316]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4a4b      	ldr	r2, [pc, #300]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	61d3      	str	r3, [r2, #28]
 8004e8c:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d118      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a42      	ldr	r2, [pc, #264]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb4:	f7fd f9da 	bl	800226c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eba:	e008      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebc:	f7fd f9d6 	bl	800226c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e06d      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d02e      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d027      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef8:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f02:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f08:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f0e:	4a29      	ldr	r2, [pc, #164]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d014      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fd f9a5 	bl	800226c <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fd f9a1 	bl	800226c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e036      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ee      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4917      	ldr	r1, [pc, #92]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	490b      	ldr	r1, [pc, #44]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	42420440 	.word	0x42420440

08004fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e041      	b.n	8005056 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc fffa 	bl	8001fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f000 fabe 	bl	8005580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d109      	bne.n	8005084 <HAL_TIM_PWM_Start+0x24>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e022      	b.n	80050ca <HAL_TIM_PWM_Start+0x6a>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b04      	cmp	r3, #4
 8005088:	d109      	bne.n	800509e <HAL_TIM_PWM_Start+0x3e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b01      	cmp	r3, #1
 8005094:	bf14      	ite	ne
 8005096:	2301      	movne	r3, #1
 8005098:	2300      	moveq	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	e015      	b.n	80050ca <HAL_TIM_PWM_Start+0x6a>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d109      	bne.n	80050b8 <HAL_TIM_PWM_Start+0x58>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	e008      	b.n	80050ca <HAL_TIM_PWM_Start+0x6a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e05e      	b.n	8005190 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_PWM_Start+0x82>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e0:	e013      	b.n	800510a <HAL_TIM_PWM_Start+0xaa>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Start+0x92>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f0:	e00b      	b.n	800510a <HAL_TIM_PWM_Start+0xaa>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Start+0xa2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005100:	e003      	b.n	800510a <HAL_TIM_PWM_Start+0xaa>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2201      	movs	r2, #1
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fc1e 	bl	8005954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIM_PWM_Start+0x138>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d107      	bne.n	8005132 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <HAL_TIM_PWM_Start+0x138>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <HAL_TIM_PWM_Start+0xfa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d009      	beq.n	800515a <HAL_TIM_PWM_Start+0xfa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a14      	ldr	r2, [pc, #80]	; (800519c <HAL_TIM_PWM_Start+0x13c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_TIM_PWM_Start+0xfa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <HAL_TIM_PWM_Start+0x140>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d111      	bne.n	800517e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d010      	beq.n	800518e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	e007      	b.n	800518e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800

080051a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e093      	b.n	80052e0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fc fe9b 	bl	8001f08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f000 f9c1 	bl	8005580 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	4313      	orrs	r3, r2
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005244:	f023 030c 	bic.w	r3, r3, #12
 8005248:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	4313      	orrs	r3, r2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	011a      	lsls	r2, r3, #4
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	031b      	lsls	r3, r3, #12
 8005274:	4313      	orrs	r3, r2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	4313      	orrs	r3, r2
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005300:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005308:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005310:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d110      	bne.n	800533a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d102      	bne.n	8005324 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800531e:	7b7b      	ldrb	r3, [r7, #13]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d001      	beq.n	8005328 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e069      	b.n	80053fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005338:	e031      	b.n	800539e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d110      	bne.n	8005362 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005346:	7b3b      	ldrb	r3, [r7, #12]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e055      	b.n	80053fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005360:	e01d      	b.n	800539e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d105      	bne.n	800537a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800536e:	7b7b      	ldrb	r3, [r7, #13]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d102      	bne.n	800537a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005374:	7b3b      	ldrb	r3, [r7, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d001      	beq.n	800537e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e03e      	b.n	80053fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_TIM_Encoder_Start+0xc4>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d008      	beq.n	80053bc <HAL_TIM_Encoder_Start+0xd4>
 80053aa:	e00f      	b.n	80053cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2201      	movs	r2, #1
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 facd 	bl	8005954 <TIM_CCxChannelCmd>
      break;
 80053ba:	e016      	b.n	80053ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2201      	movs	r2, #1
 80053c2:	2104      	movs	r1, #4
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fac5 	bl	8005954 <TIM_CCxChannelCmd>
      break;
 80053ca:	e00e      	b.n	80053ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fabd 	bl	8005954 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	2104      	movs	r1, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fab6 	bl	8005954 <TIM_CCxChannelCmd>
      break;
 80053e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800541a:	2302      	movs	r3, #2
 800541c:	e0ac      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x174>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b0c      	cmp	r3, #12
 800542a:	f200 809f 	bhi.w	800556c <HAL_TIM_PWM_ConfigChannel+0x168>
 800542e:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005469 	.word	0x08005469
 8005438:	0800556d 	.word	0x0800556d
 800543c:	0800556d 	.word	0x0800556d
 8005440:	0800556d 	.word	0x0800556d
 8005444:	080054a9 	.word	0x080054a9
 8005448:	0800556d 	.word	0x0800556d
 800544c:	0800556d 	.word	0x0800556d
 8005450:	0800556d 	.word	0x0800556d
 8005454:	080054eb 	.word	0x080054eb
 8005458:	0800556d 	.word	0x0800556d
 800545c:	0800556d 	.word	0x0800556d
 8005460:	0800556d 	.word	0x0800556d
 8005464:	0800552b 	.word	0x0800552b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 f8e8 	bl	8005644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6999      	ldr	r1, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	619a      	str	r2, [r3, #24]
      break;
 80054a6:	e062      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 f92e 	bl	8005710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	619a      	str	r2, [r3, #24]
      break;
 80054e8:	e041      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 f977 	bl	80057e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0208 	orr.w	r2, r2, #8
 8005504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0204 	bic.w	r2, r2, #4
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	61da      	str	r2, [r3, #28]
      break;
 8005528:	e021      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f9c1 	bl	80058b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69d9      	ldr	r1, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	021a      	lsls	r2, r3, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	61da      	str	r2, [r3, #28]
      break;
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800556c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a29      	ldr	r2, [pc, #164]	; (8005638 <TIM_Base_SetConfig+0xb8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_Base_SetConfig+0x30>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d007      	beq.n	80055b0 <TIM_Base_SetConfig+0x30>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a26      	ldr	r2, [pc, #152]	; (800563c <TIM_Base_SetConfig+0xbc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0x30>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a25      	ldr	r2, [pc, #148]	; (8005640 <TIM_Base_SetConfig+0xc0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1c      	ldr	r2, [pc, #112]	; (8005638 <TIM_Base_SetConfig+0xb8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <TIM_Base_SetConfig+0x62>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d007      	beq.n	80055e2 <TIM_Base_SetConfig+0x62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a19      	ldr	r2, [pc, #100]	; (800563c <TIM_Base_SetConfig+0xbc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_Base_SetConfig+0x62>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a18      	ldr	r2, [pc, #96]	; (8005640 <TIM_Base_SetConfig+0xc0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <TIM_Base_SetConfig+0xb8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d103      	bne.n	8005628 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	615a      	str	r2, [r3, #20]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800

08005644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f023 0201 	bic.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 0302 	bic.w	r3, r3, #2
 800568c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a1c      	ldr	r2, [pc, #112]	; (800570c <TIM_OC1_SetConfig+0xc8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10c      	bne.n	80056ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f023 0308 	bic.w	r3, r3, #8
 80056a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 0304 	bic.w	r3, r3, #4
 80056b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <TIM_OC1_SetConfig+0xc8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d111      	bne.n	80056e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40012c00 	.word	0x40012c00

08005710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0210 	bic.w	r2, r3, #16
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0320 	bic.w	r3, r3, #32
 800575a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <TIM_OC2_SetConfig+0xd0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10d      	bne.n	800578c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a14      	ldr	r2, [pc, #80]	; (80057e0 <TIM_OC2_SetConfig+0xd0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d113      	bne.n	80057bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00

080057e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800582c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <TIM_OC3_SetConfig+0xd0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10d      	bne.n	800585e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <TIM_OC3_SetConfig+0xd0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d113      	bne.n	800588e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800586c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	621a      	str	r2, [r3, #32]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40012c00 	.word	0x40012c00

080058b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	031b      	lsls	r3, r3, #12
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <TIM_OC4_SetConfig+0x98>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d109      	bne.n	800592c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800591e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	019b      	lsls	r3, r3, #6
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr
 8005950:	40012c00 	.word	0x40012c00

08005954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2201      	movs	r2, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e046      	b.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d009      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10c      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800

08005a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e03f      	b.n	8005aea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fb2a 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	; 0x24
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f905 	bl	8005cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b08a      	sub	sp, #40	; 0x28
 8005af6:	af02      	add	r7, sp, #8
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d17c      	bne.n	8005c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_UART_Transmit+0x2c>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e075      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Transmit+0x3e>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e06e      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2221      	movs	r2, #33	; 0x21
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b46:	f7fc fb91 	bl	800226c <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d108      	bne.n	8005b74 <HAL_UART_Transmit+0x82>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e003      	b.n	8005b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b84:	e02a      	b.n	8005bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f840 	bl	8005c16 <UART_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e036      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	3302      	adds	r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e007      	b.n	8005bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1cf      	bne.n	8005b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2140      	movs	r1, #64	; 0x40
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f810 	bl	8005c16 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e006      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c26:	e02c      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d028      	beq.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c36:	f7fc fb19 	bl	800226c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d21d      	bcs.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e00f      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d0c3      	beq.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ce6:	f023 030c 	bic.w	r3, r3, #12
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <UART_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d103      	bne.n	8005d1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d14:	f7ff f86c 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	e002      	b.n	8005d22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d1c:	f7ff f854 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8005d20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009a      	lsls	r2, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <UART_SetConfig+0x118>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	0119      	lsls	r1, r3, #4
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009a      	lsls	r2, r3, #2
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <UART_SetConfig+0x118>)
 8005d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2064      	movs	r0, #100	; 0x64
 8005d62:	fb00 f303 	mul.w	r3, r0, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <UART_SetConfig+0x118>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d78:	4419      	add	r1, r3
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009a      	lsls	r2, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <UART_SetConfig+0x118>)
 8005d92:	fba3 0302 	umull	r0, r3, r3, r2
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2064      	movs	r0, #100	; 0x64
 8005d9a:	fb00 f303 	mul.w	r3, r0, r3
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	3332      	adds	r3, #50	; 0x32
 8005da4:	4a07      	ldr	r2, [pc, #28]	; (8005dc4 <UART_SetConfig+0x118>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	f003 020f 	and.w	r2, r3, #15
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	440a      	add	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40013800 	.word	0x40013800
 8005dc4:	51eb851f 	.word	0x51eb851f

08005dc8 <__errno>:
 8005dc8:	4b01      	ldr	r3, [pc, #4]	; (8005dd0 <__errno+0x8>)
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	2000000c 	.word	0x2000000c

08005dd4 <__libc_init_array>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	4d0c      	ldr	r5, [pc, #48]	; (8005e0c <__libc_init_array+0x38>)
 8005dda:	4c0d      	ldr	r4, [pc, #52]	; (8005e10 <__libc_init_array+0x3c>)
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	42a6      	cmp	r6, r4
 8005de2:	d109      	bne.n	8005df8 <__libc_init_array+0x24>
 8005de4:	f000 ff06 	bl	8006bf4 <_init>
 8005de8:	2600      	movs	r6, #0
 8005dea:	4d0a      	ldr	r5, [pc, #40]	; (8005e14 <__libc_init_array+0x40>)
 8005dec:	4c0a      	ldr	r4, [pc, #40]	; (8005e18 <__libc_init_array+0x44>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	42a6      	cmp	r6, r4
 8005df4:	d105      	bne.n	8005e02 <__libc_init_array+0x2e>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfc:	4798      	blx	r3
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7ee      	b.n	8005de0 <__libc_init_array+0xc>
 8005e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e06:	4798      	blx	r3
 8005e08:	3601      	adds	r6, #1
 8005e0a:	e7f2      	b.n	8005df2 <__libc_init_array+0x1e>
 8005e0c:	08006c68 	.word	0x08006c68
 8005e10:	08006c68 	.word	0x08006c68
 8005e14:	08006c68 	.word	0x08006c68
 8005e18:	08006c6c 	.word	0x08006c6c

08005e1c <memset>:
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4402      	add	r2, r0
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d100      	bne.n	8005e26 <memset+0xa>
 8005e24:	4770      	bx	lr
 8005e26:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2a:	e7f9      	b.n	8005e20 <memset+0x4>

08005e2c <pow>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	4614      	mov	r4, r2
 8005e32:	461d      	mov	r5, r3
 8005e34:	4680      	mov	r8, r0
 8005e36:	4689      	mov	r9, r1
 8005e38:	f000 f862 	bl	8005f00 <__ieee754_pow>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	462b      	mov	r3, r5
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa fdd8 	bl	80009fc <__aeabi_dcmpun>
 8005e4c:	bbc8      	cbnz	r0, 8005ec2 <pow+0x96>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2300      	movs	r3, #0
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fd9f 	bl	8000998 <__aeabi_dcmpeq>
 8005e5a:	b1b8      	cbz	r0, 8005e8c <pow+0x60>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa fd98 	bl	8000998 <__aeabi_dcmpeq>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d141      	bne.n	8005ef0 <pow+0xc4>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f000 fe3b 	bl	8006aea <finite>
 8005e74:	b328      	cbz	r0, 8005ec2 <pow+0x96>
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa fd95 	bl	80009ac <__aeabi_dcmplt>
 8005e82:	b1f0      	cbz	r0, 8005ec2 <pow+0x96>
 8005e84:	f7ff ffa0 	bl	8005dc8 <__errno>
 8005e88:	2322      	movs	r3, #34	; 0x22
 8005e8a:	e019      	b.n	8005ec0 <pow+0x94>
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f000 fe2b 	bl	8006aea <finite>
 8005e94:	b9c8      	cbnz	r0, 8005eca <pow+0x9e>
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f000 fe26 	bl	8006aea <finite>
 8005e9e:	b1a0      	cbz	r0, 8005eca <pow+0x9e>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f000 fe21 	bl	8006aea <finite>
 8005ea8:	b178      	cbz	r0, 8005eca <pow+0x9e>
 8005eaa:	4632      	mov	r2, r6
 8005eac:	463b      	mov	r3, r7
 8005eae:	4630      	mov	r0, r6
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa fda3 	bl	80009fc <__aeabi_dcmpun>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0e4      	beq.n	8005e84 <pow+0x58>
 8005eba:	f7ff ff85 	bl	8005dc8 <__errno>
 8005ebe:	2321      	movs	r3, #33	; 0x21
 8005ec0:	6003      	str	r3, [r0, #0]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4630      	mov	r0, r6
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	f7fa fd61 	bl	8000998 <__aeabi_dcmpeq>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d0f3      	beq.n	8005ec2 <pow+0x96>
 8005eda:	4640      	mov	r0, r8
 8005edc:	4649      	mov	r1, r9
 8005ede:	f000 fe04 	bl	8006aea <finite>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d0ed      	beq.n	8005ec2 <pow+0x96>
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	4629      	mov	r1, r5
 8005eea:	f000 fdfe 	bl	8006aea <finite>
 8005eee:	e7c8      	b.n	8005e82 <pow+0x56>
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	4f01      	ldr	r7, [pc, #4]	; (8005ef8 <pow+0xcc>)
 8005ef4:	e7e5      	b.n	8005ec2 <pow+0x96>
 8005ef6:	bf00      	nop
 8005ef8:	3ff00000 	.word	0x3ff00000
 8005efc:	00000000 	.word	0x00000000

08005f00 <__ieee754_pow>:
 8005f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	b093      	sub	sp, #76	; 0x4c
 8005f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f0a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005f0e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005f12:	4689      	mov	r9, r1
 8005f14:	ea56 0102 	orrs.w	r1, r6, r2
 8005f18:	4680      	mov	r8, r0
 8005f1a:	d111      	bne.n	8005f40 <__ieee754_pow+0x40>
 8005f1c:	1803      	adds	r3, r0, r0
 8005f1e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005f22:	4152      	adcs	r2, r2
 8005f24:	4299      	cmp	r1, r3
 8005f26:	4b82      	ldr	r3, [pc, #520]	; (8006130 <__ieee754_pow+0x230>)
 8005f28:	4193      	sbcs	r3, r2
 8005f2a:	f080 84b9 	bcs.w	80068a0 <__ieee754_pow+0x9a0>
 8005f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f32:	4640      	mov	r0, r8
 8005f34:	4649      	mov	r1, r9
 8005f36:	f7fa f911 	bl	800015c <__adddf3>
 8005f3a:	4683      	mov	fp, r0
 8005f3c:	468c      	mov	ip, r1
 8005f3e:	e06f      	b.n	8006020 <__ieee754_pow+0x120>
 8005f40:	4b7c      	ldr	r3, [pc, #496]	; (8006134 <__ieee754_pow+0x234>)
 8005f42:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005f46:	429c      	cmp	r4, r3
 8005f48:	464d      	mov	r5, r9
 8005f4a:	4682      	mov	sl, r0
 8005f4c:	dc06      	bgt.n	8005f5c <__ieee754_pow+0x5c>
 8005f4e:	d101      	bne.n	8005f54 <__ieee754_pow+0x54>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d1ec      	bne.n	8005f2e <__ieee754_pow+0x2e>
 8005f54:	429e      	cmp	r6, r3
 8005f56:	dc01      	bgt.n	8005f5c <__ieee754_pow+0x5c>
 8005f58:	d10f      	bne.n	8005f7a <__ieee754_pow+0x7a>
 8005f5a:	b172      	cbz	r2, 8005f7a <__ieee754_pow+0x7a>
 8005f5c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005f60:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005f64:	ea55 050a 	orrs.w	r5, r5, sl
 8005f68:	d1e1      	bne.n	8005f2e <__ieee754_pow+0x2e>
 8005f6a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005f6e:	18db      	adds	r3, r3, r3
 8005f70:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005f74:	4152      	adcs	r2, r2
 8005f76:	429d      	cmp	r5, r3
 8005f78:	e7d5      	b.n	8005f26 <__ieee754_pow+0x26>
 8005f7a:	2d00      	cmp	r5, #0
 8005f7c:	da39      	bge.n	8005ff2 <__ieee754_pow+0xf2>
 8005f7e:	4b6e      	ldr	r3, [pc, #440]	; (8006138 <__ieee754_pow+0x238>)
 8005f80:	429e      	cmp	r6, r3
 8005f82:	dc52      	bgt.n	800602a <__ieee754_pow+0x12a>
 8005f84:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005f88:	429e      	cmp	r6, r3
 8005f8a:	f340 849c 	ble.w	80068c6 <__ieee754_pow+0x9c6>
 8005f8e:	1533      	asrs	r3, r6, #20
 8005f90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f94:	2b14      	cmp	r3, #20
 8005f96:	dd0f      	ble.n	8005fb8 <__ieee754_pow+0xb8>
 8005f98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005f9c:	fa22 f103 	lsr.w	r1, r2, r3
 8005fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	f040 848e 	bne.w	80068c6 <__ieee754_pow+0x9c6>
 8005faa:	f001 0101 	and.w	r1, r1, #1
 8005fae:	f1c1 0302 	rsb	r3, r1, #2
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	b182      	cbz	r2, 8005fd8 <__ieee754_pow+0xd8>
 8005fb6:	e05d      	b.n	8006074 <__ieee754_pow+0x174>
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	d159      	bne.n	8006070 <__ieee754_pow+0x170>
 8005fbc:	f1c3 0314 	rsb	r3, r3, #20
 8005fc0:	fa46 f103 	asr.w	r1, r6, r3
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	42b3      	cmp	r3, r6
 8005fca:	f040 8479 	bne.w	80068c0 <__ieee754_pow+0x9c0>
 8005fce:	f001 0101 	and.w	r1, r1, #1
 8005fd2:	f1c1 0302 	rsb	r3, r1, #2
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4b58      	ldr	r3, [pc, #352]	; (800613c <__ieee754_pow+0x23c>)
 8005fda:	429e      	cmp	r6, r3
 8005fdc:	d132      	bne.n	8006044 <__ieee754_pow+0x144>
 8005fde:	2f00      	cmp	r7, #0
 8005fe0:	f280 846a 	bge.w	80068b8 <__ieee754_pow+0x9b8>
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	2000      	movs	r0, #0
 8005fea:	4954      	ldr	r1, [pc, #336]	; (800613c <__ieee754_pow+0x23c>)
 8005fec:	f7fa fb96 	bl	800071c <__aeabi_ddiv>
 8005ff0:	e7a3      	b.n	8005f3a <__ieee754_pow+0x3a>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d13c      	bne.n	8006074 <__ieee754_pow+0x174>
 8005ffa:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <__ieee754_pow+0x234>)
 8005ffc:	429e      	cmp	r6, r3
 8005ffe:	d1eb      	bne.n	8005fd8 <__ieee754_pow+0xd8>
 8006000:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006004:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006008:	ea53 030a 	orrs.w	r3, r3, sl
 800600c:	f000 8448 	beq.w	80068a0 <__ieee754_pow+0x9a0>
 8006010:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <__ieee754_pow+0x240>)
 8006012:	429c      	cmp	r4, r3
 8006014:	dd0b      	ble.n	800602e <__ieee754_pow+0x12e>
 8006016:	2f00      	cmp	r7, #0
 8006018:	f2c0 8448 	blt.w	80068ac <__ieee754_pow+0x9ac>
 800601c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006020:	4658      	mov	r0, fp
 8006022:	4661      	mov	r1, ip
 8006024:	b013      	add	sp, #76	; 0x4c
 8006026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602a:	2302      	movs	r3, #2
 800602c:	e7e2      	b.n	8005ff4 <__ieee754_pow+0xf4>
 800602e:	2f00      	cmp	r7, #0
 8006030:	f04f 0b00 	mov.w	fp, #0
 8006034:	f04f 0c00 	mov.w	ip, #0
 8006038:	daf2      	bge.n	8006020 <__ieee754_pow+0x120>
 800603a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800603e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006042:	e7ed      	b.n	8006020 <__ieee754_pow+0x120>
 8006044:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006048:	d106      	bne.n	8006058 <__ieee754_pow+0x158>
 800604a:	4642      	mov	r2, r8
 800604c:	464b      	mov	r3, r9
 800604e:	4640      	mov	r0, r8
 8006050:	4649      	mov	r1, r9
 8006052:	f7fa fa39 	bl	80004c8 <__aeabi_dmul>
 8006056:	e770      	b.n	8005f3a <__ieee754_pow+0x3a>
 8006058:	4b3a      	ldr	r3, [pc, #232]	; (8006144 <__ieee754_pow+0x244>)
 800605a:	429f      	cmp	r7, r3
 800605c:	d10a      	bne.n	8006074 <__ieee754_pow+0x174>
 800605e:	2d00      	cmp	r5, #0
 8006060:	db08      	blt.n	8006074 <__ieee754_pow+0x174>
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	b013      	add	sp, #76	; 0x4c
 8006068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	f000 bc5e 	b.w	800692c <__ieee754_sqrt>
 8006070:	2300      	movs	r3, #0
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f000 fd34 	bl	8006ae4 <fabs>
 800607c:	4683      	mov	fp, r0
 800607e:	468c      	mov	ip, r1
 8006080:	f1ba 0f00 	cmp.w	sl, #0
 8006084:	d128      	bne.n	80060d8 <__ieee754_pow+0x1d8>
 8006086:	b124      	cbz	r4, 8006092 <__ieee754_pow+0x192>
 8006088:	4b2c      	ldr	r3, [pc, #176]	; (800613c <__ieee754_pow+0x23c>)
 800608a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800608e:	429a      	cmp	r2, r3
 8006090:	d122      	bne.n	80060d8 <__ieee754_pow+0x1d8>
 8006092:	2f00      	cmp	r7, #0
 8006094:	da07      	bge.n	80060a6 <__ieee754_pow+0x1a6>
 8006096:	465a      	mov	r2, fp
 8006098:	4663      	mov	r3, ip
 800609a:	2000      	movs	r0, #0
 800609c:	4927      	ldr	r1, [pc, #156]	; (800613c <__ieee754_pow+0x23c>)
 800609e:	f7fa fb3d 	bl	800071c <__aeabi_ddiv>
 80060a2:	4683      	mov	fp, r0
 80060a4:	468c      	mov	ip, r1
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	daba      	bge.n	8006020 <__ieee754_pow+0x120>
 80060aa:	9b00      	ldr	r3, [sp, #0]
 80060ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80060b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060b4:	4323      	orrs	r3, r4
 80060b6:	d108      	bne.n	80060ca <__ieee754_pow+0x1ca>
 80060b8:	465a      	mov	r2, fp
 80060ba:	4663      	mov	r3, ip
 80060bc:	4658      	mov	r0, fp
 80060be:	4661      	mov	r1, ip
 80060c0:	f7fa f84a 	bl	8000158 <__aeabi_dsub>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	e790      	b.n	8005fec <__ieee754_pow+0xec>
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d1a7      	bne.n	8006020 <__ieee754_pow+0x120>
 80060d0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80060d4:	469c      	mov	ip, r3
 80060d6:	e7a3      	b.n	8006020 <__ieee754_pow+0x120>
 80060d8:	0feb      	lsrs	r3, r5, #31
 80060da:	3b01      	subs	r3, #1
 80060dc:	930c      	str	r3, [sp, #48]	; 0x30
 80060de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060e0:	9b00      	ldr	r3, [sp, #0]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d104      	bne.n	80060f0 <__ieee754_pow+0x1f0>
 80060e6:	4642      	mov	r2, r8
 80060e8:	464b      	mov	r3, r9
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	e7e7      	b.n	80060c0 <__ieee754_pow+0x1c0>
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <__ieee754_pow+0x248>)
 80060f2:	429e      	cmp	r6, r3
 80060f4:	f340 80f6 	ble.w	80062e4 <__ieee754_pow+0x3e4>
 80060f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80060fc:	429e      	cmp	r6, r3
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <__ieee754_pow+0x240>)
 8006100:	dd09      	ble.n	8006116 <__ieee754_pow+0x216>
 8006102:	429c      	cmp	r4, r3
 8006104:	dc0c      	bgt.n	8006120 <__ieee754_pow+0x220>
 8006106:	2f00      	cmp	r7, #0
 8006108:	da0c      	bge.n	8006124 <__ieee754_pow+0x224>
 800610a:	2000      	movs	r0, #0
 800610c:	b013      	add	sp, #76	; 0x4c
 800610e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006112:	f000 bce2 	b.w	8006ada <__math_oflow>
 8006116:	429c      	cmp	r4, r3
 8006118:	dbf5      	blt.n	8006106 <__ieee754_pow+0x206>
 800611a:	4b08      	ldr	r3, [pc, #32]	; (800613c <__ieee754_pow+0x23c>)
 800611c:	429c      	cmp	r4, r3
 800611e:	dd15      	ble.n	800614c <__ieee754_pow+0x24c>
 8006120:	2f00      	cmp	r7, #0
 8006122:	dcf2      	bgt.n	800610a <__ieee754_pow+0x20a>
 8006124:	2000      	movs	r0, #0
 8006126:	b013      	add	sp, #76	; 0x4c
 8006128:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	f000 bcd0 	b.w	8006ad0 <__math_uflow>
 8006130:	fff00000 	.word	0xfff00000
 8006134:	7ff00000 	.word	0x7ff00000
 8006138:	433fffff 	.word	0x433fffff
 800613c:	3ff00000 	.word	0x3ff00000
 8006140:	3fefffff 	.word	0x3fefffff
 8006144:	3fe00000 	.word	0x3fe00000
 8006148:	41e00000 	.word	0x41e00000
 800614c:	4661      	mov	r1, ip
 800614e:	2200      	movs	r2, #0
 8006150:	4658      	mov	r0, fp
 8006152:	4b5f      	ldr	r3, [pc, #380]	; (80062d0 <__ieee754_pow+0x3d0>)
 8006154:	f7fa f800 	bl	8000158 <__aeabi_dsub>
 8006158:	a355      	add	r3, pc, #340	; (adr r3, 80062b0 <__ieee754_pow+0x3b0>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	4604      	mov	r4, r0
 8006160:	460d      	mov	r5, r1
 8006162:	f7fa f9b1 	bl	80004c8 <__aeabi_dmul>
 8006166:	a354      	add	r3, pc, #336	; (adr r3, 80062b8 <__ieee754_pow+0x3b8>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	4606      	mov	r6, r0
 800616e:	460f      	mov	r7, r1
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa f9a8 	bl	80004c8 <__aeabi_dmul>
 8006178:	2200      	movs	r2, #0
 800617a:	4682      	mov	sl, r0
 800617c:	468b      	mov	fp, r1
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	4b54      	ldr	r3, [pc, #336]	; (80062d4 <__ieee754_pow+0x3d4>)
 8006184:	f7fa f9a0 	bl	80004c8 <__aeabi_dmul>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	a14c      	add	r1, pc, #304	; (adr r1, 80062c0 <__ieee754_pow+0x3c0>)
 800618e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006192:	f7f9 ffe1 	bl	8000158 <__aeabi_dsub>
 8006196:	4622      	mov	r2, r4
 8006198:	462b      	mov	r3, r5
 800619a:	f7fa f995 	bl	80004c8 <__aeabi_dmul>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	2000      	movs	r0, #0
 80061a4:	494c      	ldr	r1, [pc, #304]	; (80062d8 <__ieee754_pow+0x3d8>)
 80061a6:	f7f9 ffd7 	bl	8000158 <__aeabi_dsub>
 80061aa:	4622      	mov	r2, r4
 80061ac:	462b      	mov	r3, r5
 80061ae:	4680      	mov	r8, r0
 80061b0:	4689      	mov	r9, r1
 80061b2:	4620      	mov	r0, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7fa f987 	bl	80004c8 <__aeabi_dmul>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa f981 	bl	80004c8 <__aeabi_dmul>
 80061c6:	a340      	add	r3, pc, #256	; (adr r3, 80062c8 <__ieee754_pow+0x3c8>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa f97c 	bl	80004c8 <__aeabi_dmul>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4650      	mov	r0, sl
 80061d6:	4659      	mov	r1, fp
 80061d8:	f7f9 ffbe 	bl	8000158 <__aeabi_dsub>
 80061dc:	f04f 0a00 	mov.w	sl, #0
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f7f9 ffb6 	bl	800015c <__adddf3>
 80061f0:	4632      	mov	r2, r6
 80061f2:	463b      	mov	r3, r7
 80061f4:	4650      	mov	r0, sl
 80061f6:	468b      	mov	fp, r1
 80061f8:	f7f9 ffae 	bl	8000158 <__aeabi_dsub>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7f9 ffa8 	bl	8000158 <__aeabi_dsub>
 8006208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800620c:	9b00      	ldr	r3, [sp, #0]
 800620e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006210:	3b01      	subs	r3, #1
 8006212:	4313      	orrs	r3, r2
 8006214:	f04f 0600 	mov.w	r6, #0
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	bf0c      	ite	eq
 800621e:	4b2f      	ldreq	r3, [pc, #188]	; (80062dc <__ieee754_pow+0x3dc>)
 8006220:	4b2b      	ldrne	r3, [pc, #172]	; (80062d0 <__ieee754_pow+0x3d0>)
 8006222:	4604      	mov	r4, r0
 8006224:	460d      	mov	r5, r1
 8006226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622a:	e9cd 2300 	strd	r2, r3, [sp]
 800622e:	4632      	mov	r2, r6
 8006230:	463b      	mov	r3, r7
 8006232:	f7f9 ff91 	bl	8000158 <__aeabi_dsub>
 8006236:	4652      	mov	r2, sl
 8006238:	465b      	mov	r3, fp
 800623a:	f7fa f945 	bl	80004c8 <__aeabi_dmul>
 800623e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006242:	4680      	mov	r8, r0
 8006244:	4689      	mov	r9, r1
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa f93d 	bl	80004c8 <__aeabi_dmul>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	f7f9 ff81 	bl	800015c <__adddf3>
 800625a:	4632      	mov	r2, r6
 800625c:	463b      	mov	r3, r7
 800625e:	4680      	mov	r8, r0
 8006260:	4689      	mov	r9, r1
 8006262:	4650      	mov	r0, sl
 8006264:	4659      	mov	r1, fp
 8006266:	f7fa f92f 	bl	80004c8 <__aeabi_dmul>
 800626a:	4604      	mov	r4, r0
 800626c:	460d      	mov	r5, r1
 800626e:	460b      	mov	r3, r1
 8006270:	4602      	mov	r2, r0
 8006272:	4649      	mov	r1, r9
 8006274:	4640      	mov	r0, r8
 8006276:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800627a:	f7f9 ff6f 	bl	800015c <__adddf3>
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <__ieee754_pow+0x3e0>)
 8006280:	4682      	mov	sl, r0
 8006282:	4299      	cmp	r1, r3
 8006284:	460f      	mov	r7, r1
 8006286:	460e      	mov	r6, r1
 8006288:	f340 82e5 	ble.w	8006856 <__ieee754_pow+0x956>
 800628c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006290:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006294:	4303      	orrs	r3, r0
 8006296:	f000 81df 	beq.w	8006658 <__ieee754_pow+0x758>
 800629a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629e:	2200      	movs	r2, #0
 80062a0:	2300      	movs	r3, #0
 80062a2:	f7fa fb83 	bl	80009ac <__aeabi_dcmplt>
 80062a6:	3800      	subs	r0, #0
 80062a8:	bf18      	it	ne
 80062aa:	2001      	movne	r0, #1
 80062ac:	e72e      	b.n	800610c <__ieee754_pow+0x20c>
 80062ae:	bf00      	nop
 80062b0:	60000000 	.word	0x60000000
 80062b4:	3ff71547 	.word	0x3ff71547
 80062b8:	f85ddf44 	.word	0xf85ddf44
 80062bc:	3e54ae0b 	.word	0x3e54ae0b
 80062c0:	55555555 	.word	0x55555555
 80062c4:	3fd55555 	.word	0x3fd55555
 80062c8:	652b82fe 	.word	0x652b82fe
 80062cc:	3ff71547 	.word	0x3ff71547
 80062d0:	3ff00000 	.word	0x3ff00000
 80062d4:	3fd00000 	.word	0x3fd00000
 80062d8:	3fe00000 	.word	0x3fe00000
 80062dc:	bff00000 	.word	0xbff00000
 80062e0:	408fffff 	.word	0x408fffff
 80062e4:	4bd2      	ldr	r3, [pc, #840]	; (8006630 <__ieee754_pow+0x730>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	402b      	ands	r3, r5
 80062ea:	b943      	cbnz	r3, 80062fe <__ieee754_pow+0x3fe>
 80062ec:	4658      	mov	r0, fp
 80062ee:	4661      	mov	r1, ip
 80062f0:	4bd0      	ldr	r3, [pc, #832]	; (8006634 <__ieee754_pow+0x734>)
 80062f2:	f7fa f8e9 	bl	80004c8 <__aeabi_dmul>
 80062f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80062fa:	4683      	mov	fp, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	1523      	asrs	r3, r4, #20
 8006300:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006304:	4413      	add	r3, r2
 8006306:	930b      	str	r3, [sp, #44]	; 0x2c
 8006308:	4bcb      	ldr	r3, [pc, #812]	; (8006638 <__ieee754_pow+0x738>)
 800630a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800630e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006312:	429c      	cmp	r4, r3
 8006314:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006318:	dd08      	ble.n	800632c <__ieee754_pow+0x42c>
 800631a:	4bc8      	ldr	r3, [pc, #800]	; (800663c <__ieee754_pow+0x73c>)
 800631c:	429c      	cmp	r4, r3
 800631e:	f340 8199 	ble.w	8006654 <__ieee754_pow+0x754>
 8006322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006324:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006328:	3301      	adds	r3, #1
 800632a:	930b      	str	r3, [sp, #44]	; 0x2c
 800632c:	2600      	movs	r6, #0
 800632e:	00f3      	lsls	r3, r6, #3
 8006330:	930d      	str	r3, [sp, #52]	; 0x34
 8006332:	4bc3      	ldr	r3, [pc, #780]	; (8006640 <__ieee754_pow+0x740>)
 8006334:	4658      	mov	r0, fp
 8006336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800633a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800633e:	4629      	mov	r1, r5
 8006340:	461a      	mov	r2, r3
 8006342:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006346:	4623      	mov	r3, r4
 8006348:	f7f9 ff06 	bl	8000158 <__aeabi_dsub>
 800634c:	46da      	mov	sl, fp
 800634e:	462b      	mov	r3, r5
 8006350:	4652      	mov	r2, sl
 8006352:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006356:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800635a:	f7f9 feff 	bl	800015c <__adddf3>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	2000      	movs	r0, #0
 8006364:	49b7      	ldr	r1, [pc, #732]	; (8006644 <__ieee754_pow+0x744>)
 8006366:	f7fa f9d9 	bl	800071c <__aeabi_ddiv>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006372:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006376:	f7fa f8a7 	bl	80004c8 <__aeabi_dmul>
 800637a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800637e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006382:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006386:	2300      	movs	r3, #0
 8006388:	2200      	movs	r2, #0
 800638a:	46ab      	mov	fp, r5
 800638c:	106d      	asrs	r5, r5, #1
 800638e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006398:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800639c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	4614      	mov	r4, r2
 80063a6:	461d      	mov	r5, r3
 80063a8:	f7fa f88e 	bl	80004c8 <__aeabi_dmul>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063b4:	f7f9 fed0 	bl	8000158 <__aeabi_dsub>
 80063b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063bc:	4606      	mov	r6, r0
 80063be:	460f      	mov	r7, r1
 80063c0:	4620      	mov	r0, r4
 80063c2:	4629      	mov	r1, r5
 80063c4:	f7f9 fec8 	bl	8000158 <__aeabi_dsub>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7f9 fec2 	bl	8000158 <__aeabi_dsub>
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	f7fa f876 	bl	80004c8 <__aeabi_dmul>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4630      	mov	r0, r6
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7f9 feb8 	bl	8000158 <__aeabi_dsub>
 80063e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ec:	f7fa f86c 	bl	80004c8 <__aeabi_dmul>
 80063f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063f8:	4610      	mov	r0, r2
 80063fa:	4619      	mov	r1, r3
 80063fc:	f7fa f864 	bl	80004c8 <__aeabi_dmul>
 8006400:	a379      	add	r3, pc, #484	; (adr r3, 80065e8 <__ieee754_pow+0x6e8>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	f7fa f85d 	bl	80004c8 <__aeabi_dmul>
 800640e:	a378      	add	r3, pc, #480	; (adr r3, 80065f0 <__ieee754_pow+0x6f0>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7f9 fea2 	bl	800015c <__adddf3>
 8006418:	4622      	mov	r2, r4
 800641a:	462b      	mov	r3, r5
 800641c:	f7fa f854 	bl	80004c8 <__aeabi_dmul>
 8006420:	a375      	add	r3, pc, #468	; (adr r3, 80065f8 <__ieee754_pow+0x6f8>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7f9 fe99 	bl	800015c <__adddf3>
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	f7fa f84b 	bl	80004c8 <__aeabi_dmul>
 8006432:	a373      	add	r3, pc, #460	; (adr r3, 8006600 <__ieee754_pow+0x700>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 fe90 	bl	800015c <__adddf3>
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	f7fa f842 	bl	80004c8 <__aeabi_dmul>
 8006444:	a370      	add	r3, pc, #448	; (adr r3, 8006608 <__ieee754_pow+0x708>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 fe87 	bl	800015c <__adddf3>
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f7fa f839 	bl	80004c8 <__aeabi_dmul>
 8006456:	a36e      	add	r3, pc, #440	; (adr r3, 8006610 <__ieee754_pow+0x710>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f7f9 fe7e 	bl	800015c <__adddf3>
 8006460:	4622      	mov	r2, r4
 8006462:	4606      	mov	r6, r0
 8006464:	460f      	mov	r7, r1
 8006466:	462b      	mov	r3, r5
 8006468:	4620      	mov	r0, r4
 800646a:	4629      	mov	r1, r5
 800646c:	f7fa f82c 	bl	80004c8 <__aeabi_dmul>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	f7fa f826 	bl	80004c8 <__aeabi_dmul>
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	f7f9 fe68 	bl	800015c <__adddf3>
 800648c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006490:	f7fa f81a 	bl	80004c8 <__aeabi_dmul>
 8006494:	4622      	mov	r2, r4
 8006496:	462b      	mov	r3, r5
 8006498:	f7f9 fe60 	bl	800015c <__adddf3>
 800649c:	4642      	mov	r2, r8
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	464b      	mov	r3, r9
 80064a4:	4640      	mov	r0, r8
 80064a6:	4649      	mov	r1, r9
 80064a8:	f7fa f80e 	bl	80004c8 <__aeabi_dmul>
 80064ac:	2200      	movs	r2, #0
 80064ae:	4b66      	ldr	r3, [pc, #408]	; (8006648 <__ieee754_pow+0x748>)
 80064b0:	4682      	mov	sl, r0
 80064b2:	468b      	mov	fp, r1
 80064b4:	f7f9 fe52 	bl	800015c <__adddf3>
 80064b8:	4632      	mov	r2, r6
 80064ba:	463b      	mov	r3, r7
 80064bc:	f7f9 fe4e 	bl	800015c <__adddf3>
 80064c0:	2400      	movs	r4, #0
 80064c2:	460d      	mov	r5, r1
 80064c4:	4622      	mov	r2, r4
 80064c6:	460b      	mov	r3, r1
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	f7f9 fffc 	bl	80004c8 <__aeabi_dmul>
 80064d0:	2200      	movs	r2, #0
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	4b5b      	ldr	r3, [pc, #364]	; (8006648 <__ieee754_pow+0x748>)
 80064dc:	f7f9 fe3c 	bl	8000158 <__aeabi_dsub>
 80064e0:	4652      	mov	r2, sl
 80064e2:	465b      	mov	r3, fp
 80064e4:	f7f9 fe38 	bl	8000158 <__aeabi_dsub>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4630      	mov	r0, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	f7f9 fe32 	bl	8000158 <__aeabi_dsub>
 80064f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064f8:	f7f9 ffe6 	bl	80004c8 <__aeabi_dmul>
 80064fc:	4622      	mov	r2, r4
 80064fe:	4606      	mov	r6, r0
 8006500:	460f      	mov	r7, r1
 8006502:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006506:	462b      	mov	r3, r5
 8006508:	f7f9 ffde 	bl	80004c8 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7f9 fe22 	bl	800015c <__adddf3>
 8006518:	2400      	movs	r4, #0
 800651a:	4606      	mov	r6, r0
 800651c:	460f      	mov	r7, r1
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7f9 fe19 	bl	800015c <__adddf3>
 800652a:	a33b      	add	r3, pc, #236	; (adr r3, 8006618 <__ieee754_pow+0x718>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	4620      	mov	r0, r4
 8006532:	460d      	mov	r5, r1
 8006534:	f7f9 ffc8 	bl	80004c8 <__aeabi_dmul>
 8006538:	4642      	mov	r2, r8
 800653a:	464b      	mov	r3, r9
 800653c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7f9 fe08 	bl	8000158 <__aeabi_dsub>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7f9 fe02 	bl	8000158 <__aeabi_dsub>
 8006554:	a332      	add	r3, pc, #200	; (adr r3, 8006620 <__ieee754_pow+0x720>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7f9 ffb5 	bl	80004c8 <__aeabi_dmul>
 800655e:	a332      	add	r3, pc, #200	; (adr r3, 8006628 <__ieee754_pow+0x728>)
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	4606      	mov	r6, r0
 8006566:	460f      	mov	r7, r1
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7f9 ffac 	bl	80004c8 <__aeabi_dmul>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7f9 fdf0 	bl	800015c <__adddf3>
 800657c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800657e:	4b33      	ldr	r3, [pc, #204]	; (800664c <__ieee754_pow+0x74c>)
 8006580:	f04f 0a00 	mov.w	sl, #0
 8006584:	4413      	add	r3, r2
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 fde7 	bl	800015c <__adddf3>
 800658e:	4680      	mov	r8, r0
 8006590:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006592:	4689      	mov	r9, r1
 8006594:	f7f9 ff2e 	bl	80003f4 <__aeabi_i2d>
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800659e:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <__ieee754_pow+0x750>)
 80065a0:	4413      	add	r3, r2
 80065a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065a6:	4642      	mov	r2, r8
 80065a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ac:	464b      	mov	r3, r9
 80065ae:	f7f9 fdd5 	bl	800015c <__adddf3>
 80065b2:	4632      	mov	r2, r6
 80065b4:	463b      	mov	r3, r7
 80065b6:	f7f9 fdd1 	bl	800015c <__adddf3>
 80065ba:	4622      	mov	r2, r4
 80065bc:	462b      	mov	r3, r5
 80065be:	f7f9 fdcd 	bl	800015c <__adddf3>
 80065c2:	4622      	mov	r2, r4
 80065c4:	462b      	mov	r3, r5
 80065c6:	4650      	mov	r0, sl
 80065c8:	468b      	mov	fp, r1
 80065ca:	f7f9 fdc5 	bl	8000158 <__aeabi_dsub>
 80065ce:	4632      	mov	r2, r6
 80065d0:	463b      	mov	r3, r7
 80065d2:	f7f9 fdc1 	bl	8000158 <__aeabi_dsub>
 80065d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065da:	f7f9 fdbd 	bl	8000158 <__aeabi_dsub>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	e60d      	b.n	8006204 <__ieee754_pow+0x304>
 80065e8:	4a454eef 	.word	0x4a454eef
 80065ec:	3fca7e28 	.word	0x3fca7e28
 80065f0:	93c9db65 	.word	0x93c9db65
 80065f4:	3fcd864a 	.word	0x3fcd864a
 80065f8:	a91d4101 	.word	0xa91d4101
 80065fc:	3fd17460 	.word	0x3fd17460
 8006600:	518f264d 	.word	0x518f264d
 8006604:	3fd55555 	.word	0x3fd55555
 8006608:	db6fabff 	.word	0xdb6fabff
 800660c:	3fdb6db6 	.word	0x3fdb6db6
 8006610:	33333303 	.word	0x33333303
 8006614:	3fe33333 	.word	0x3fe33333
 8006618:	e0000000 	.word	0xe0000000
 800661c:	3feec709 	.word	0x3feec709
 8006620:	dc3a03fd 	.word	0xdc3a03fd
 8006624:	3feec709 	.word	0x3feec709
 8006628:	145b01f5 	.word	0x145b01f5
 800662c:	be3e2fe0 	.word	0xbe3e2fe0
 8006630:	7ff00000 	.word	0x7ff00000
 8006634:	43400000 	.word	0x43400000
 8006638:	0003988e 	.word	0x0003988e
 800663c:	000bb679 	.word	0x000bb679
 8006640:	08006c38 	.word	0x08006c38
 8006644:	3ff00000 	.word	0x3ff00000
 8006648:	40080000 	.word	0x40080000
 800664c:	08006c58 	.word	0x08006c58
 8006650:	08006c48 	.word	0x08006c48
 8006654:	2601      	movs	r6, #1
 8006656:	e66a      	b.n	800632e <__ieee754_pow+0x42e>
 8006658:	a39d      	add	r3, pc, #628	; (adr r3, 80068d0 <__ieee754_pow+0x9d0>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f7f9 fd7b 	bl	800015c <__adddf3>
 8006666:	4622      	mov	r2, r4
 8006668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800666c:	462b      	mov	r3, r5
 800666e:	4650      	mov	r0, sl
 8006670:	4639      	mov	r1, r7
 8006672:	f7f9 fd71 	bl	8000158 <__aeabi_dsub>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800667e:	f7fa f9b3 	bl	80009e8 <__aeabi_dcmpgt>
 8006682:	2800      	cmp	r0, #0
 8006684:	f47f ae09 	bne.w	800629a <__ieee754_pow+0x39a>
 8006688:	4aa3      	ldr	r2, [pc, #652]	; (8006918 <__ieee754_pow+0xa18>)
 800668a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800668e:	4293      	cmp	r3, r2
 8006690:	f340 8101 	ble.w	8006896 <__ieee754_pow+0x996>
 8006694:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006698:	2000      	movs	r0, #0
 800669a:	151b      	asrs	r3, r3, #20
 800669c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066a0:	fa4a f303 	asr.w	r3, sl, r3
 80066a4:	4433      	add	r3, r6
 80066a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80066aa:	4f9c      	ldr	r7, [pc, #624]	; (800691c <__ieee754_pow+0xa1c>)
 80066ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80066b0:	4117      	asrs	r7, r2
 80066b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80066b6:	ea23 0107 	bic.w	r1, r3, r7
 80066ba:	f1c2 0214 	rsb	r2, r2, #20
 80066be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80066c2:	460b      	mov	r3, r1
 80066c4:	fa4a fa02 	asr.w	sl, sl, r2
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	4602      	mov	r2, r0
 80066cc:	4629      	mov	r1, r5
 80066ce:	4620      	mov	r0, r4
 80066d0:	bfb8      	it	lt
 80066d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80066d6:	f7f9 fd3f 	bl	8000158 <__aeabi_dsub>
 80066da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e2:	2400      	movs	r4, #0
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	f7f9 fd38 	bl	800015c <__adddf3>
 80066ec:	a37a      	add	r3, pc, #488	; (adr r3, 80068d8 <__ieee754_pow+0x9d8>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	4620      	mov	r0, r4
 80066f4:	460d      	mov	r5, r1
 80066f6:	f7f9 fee7 	bl	80004c8 <__aeabi_dmul>
 80066fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	f7f9 fd27 	bl	8000158 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 fd21 	bl	8000158 <__aeabi_dsub>
 8006716:	a372      	add	r3, pc, #456	; (adr r3, 80068e0 <__ieee754_pow+0x9e0>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fed4 	bl	80004c8 <__aeabi_dmul>
 8006720:	a371      	add	r3, pc, #452	; (adr r3, 80068e8 <__ieee754_pow+0x9e8>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	f7f9 fecb 	bl	80004c8 <__aeabi_dmul>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4640      	mov	r0, r8
 8006738:	4649      	mov	r1, r9
 800673a:	f7f9 fd0f 	bl	800015c <__adddf3>
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7f9 fd07 	bl	800015c <__adddf3>
 800674e:	4632      	mov	r2, r6
 8006750:	463b      	mov	r3, r7
 8006752:	4680      	mov	r8, r0
 8006754:	4689      	mov	r9, r1
 8006756:	f7f9 fcff 	bl	8000158 <__aeabi_dsub>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fcf9 	bl	8000158 <__aeabi_dsub>
 8006766:	4642      	mov	r2, r8
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	464b      	mov	r3, r9
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	f7f9 fea9 	bl	80004c8 <__aeabi_dmul>
 8006776:	a35e      	add	r3, pc, #376	; (adr r3, 80068f0 <__ieee754_pow+0x9f0>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	4604      	mov	r4, r0
 800677e:	460d      	mov	r5, r1
 8006780:	f7f9 fea2 	bl	80004c8 <__aeabi_dmul>
 8006784:	a35c      	add	r3, pc, #368	; (adr r3, 80068f8 <__ieee754_pow+0x9f8>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fce5 	bl	8000158 <__aeabi_dsub>
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f7f9 fe99 	bl	80004c8 <__aeabi_dmul>
 8006796:	a35a      	add	r3, pc, #360	; (adr r3, 8006900 <__ieee754_pow+0xa00>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fcde 	bl	800015c <__adddf3>
 80067a0:	4622      	mov	r2, r4
 80067a2:	462b      	mov	r3, r5
 80067a4:	f7f9 fe90 	bl	80004c8 <__aeabi_dmul>
 80067a8:	a357      	add	r3, pc, #348	; (adr r3, 8006908 <__ieee754_pow+0xa08>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fcd3 	bl	8000158 <__aeabi_dsub>
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	f7f9 fe87 	bl	80004c8 <__aeabi_dmul>
 80067ba:	a355      	add	r3, pc, #340	; (adr r3, 8006910 <__ieee754_pow+0xa10>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fccc 	bl	800015c <__adddf3>
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7f9 fe7e 	bl	80004c8 <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7f9 fcc0 	bl	8000158 <__aeabi_dsub>
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7f9 fe70 	bl	80004c8 <__aeabi_dmul>
 80067e8:	2200      	movs	r2, #0
 80067ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 fcaf 	bl	8000158 <__aeabi_dsub>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006802:	f7f9 ff8b 	bl	800071c <__aeabi_ddiv>
 8006806:	4632      	mov	r2, r6
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	463b      	mov	r3, r7
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7f9 fe59 	bl	80004c8 <__aeabi_dmul>
 8006816:	4632      	mov	r2, r6
 8006818:	463b      	mov	r3, r7
 800681a:	f7f9 fc9f 	bl	800015c <__adddf3>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 fc97 	bl	8000158 <__aeabi_dsub>
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	f7f9 fc93 	bl	8000158 <__aeabi_dsub>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	2000      	movs	r0, #0
 8006838:	4939      	ldr	r1, [pc, #228]	; (8006920 <__ieee754_pow+0xa20>)
 800683a:	f7f9 fc8d 	bl	8000158 <__aeabi_dsub>
 800683e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006842:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006846:	da29      	bge.n	800689c <__ieee754_pow+0x99c>
 8006848:	4652      	mov	r2, sl
 800684a:	f000 f955 	bl	8006af8 <scalbn>
 800684e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006852:	f7ff bbfe 	b.w	8006052 <__ieee754_pow+0x152>
 8006856:	4b33      	ldr	r3, [pc, #204]	; (8006924 <__ieee754_pow+0xa24>)
 8006858:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800685c:	429f      	cmp	r7, r3
 800685e:	f77f af13 	ble.w	8006688 <__ieee754_pow+0x788>
 8006862:	4b31      	ldr	r3, [pc, #196]	; (8006928 <__ieee754_pow+0xa28>)
 8006864:	440b      	add	r3, r1
 8006866:	4303      	orrs	r3, r0
 8006868:	d009      	beq.n	800687e <__ieee754_pow+0x97e>
 800686a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	f7fa f89b 	bl	80009ac <__aeabi_dcmplt>
 8006876:	3800      	subs	r0, #0
 8006878:	bf18      	it	ne
 800687a:	2001      	movne	r0, #1
 800687c:	e453      	b.n	8006126 <__ieee754_pow+0x226>
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	f7f9 fc69 	bl	8000158 <__aeabi_dsub>
 8006886:	4642      	mov	r2, r8
 8006888:	464b      	mov	r3, r9
 800688a:	f7fa f8a3 	bl	80009d4 <__aeabi_dcmpge>
 800688e:	2800      	cmp	r0, #0
 8006890:	f43f aefa 	beq.w	8006688 <__ieee754_pow+0x788>
 8006894:	e7e9      	b.n	800686a <__ieee754_pow+0x96a>
 8006896:	f04f 0a00 	mov.w	sl, #0
 800689a:	e720      	b.n	80066de <__ieee754_pow+0x7de>
 800689c:	4621      	mov	r1, r4
 800689e:	e7d6      	b.n	800684e <__ieee754_pow+0x94e>
 80068a0:	f04f 0b00 	mov.w	fp, #0
 80068a4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006920 <__ieee754_pow+0xa20>
 80068a8:	f7ff bbba 	b.w	8006020 <__ieee754_pow+0x120>
 80068ac:	f04f 0b00 	mov.w	fp, #0
 80068b0:	f04f 0c00 	mov.w	ip, #0
 80068b4:	f7ff bbb4 	b.w	8006020 <__ieee754_pow+0x120>
 80068b8:	4640      	mov	r0, r8
 80068ba:	4649      	mov	r1, r9
 80068bc:	f7ff bb3d 	b.w	8005f3a <__ieee754_pow+0x3a>
 80068c0:	9200      	str	r2, [sp, #0]
 80068c2:	f7ff bb89 	b.w	8005fd8 <__ieee754_pow+0xd8>
 80068c6:	2300      	movs	r3, #0
 80068c8:	f7ff bb73 	b.w	8005fb2 <__ieee754_pow+0xb2>
 80068cc:	f3af 8000 	nop.w
 80068d0:	652b82fe 	.word	0x652b82fe
 80068d4:	3c971547 	.word	0x3c971547
 80068d8:	00000000 	.word	0x00000000
 80068dc:	3fe62e43 	.word	0x3fe62e43
 80068e0:	fefa39ef 	.word	0xfefa39ef
 80068e4:	3fe62e42 	.word	0x3fe62e42
 80068e8:	0ca86c39 	.word	0x0ca86c39
 80068ec:	be205c61 	.word	0xbe205c61
 80068f0:	72bea4d0 	.word	0x72bea4d0
 80068f4:	3e663769 	.word	0x3e663769
 80068f8:	c5d26bf1 	.word	0xc5d26bf1
 80068fc:	3ebbbd41 	.word	0x3ebbbd41
 8006900:	af25de2c 	.word	0xaf25de2c
 8006904:	3f11566a 	.word	0x3f11566a
 8006908:	16bebd93 	.word	0x16bebd93
 800690c:	3f66c16c 	.word	0x3f66c16c
 8006910:	5555553e 	.word	0x5555553e
 8006914:	3fc55555 	.word	0x3fc55555
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	000fffff 	.word	0x000fffff
 8006920:	3ff00000 	.word	0x3ff00000
 8006924:	4090cbff 	.word	0x4090cbff
 8006928:	3f6f3400 	.word	0x3f6f3400

0800692c <__ieee754_sqrt>:
 800692c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006a88 <__ieee754_sqrt+0x15c>
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	ea3c 0c01 	bics.w	ip, ip, r1
 8006938:	4606      	mov	r6, r0
 800693a:	460d      	mov	r5, r1
 800693c:	460c      	mov	r4, r1
 800693e:	460a      	mov	r2, r1
 8006940:	4607      	mov	r7, r0
 8006942:	4603      	mov	r3, r0
 8006944:	d10f      	bne.n	8006966 <__ieee754_sqrt+0x3a>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	f7f9 fdbd 	bl	80004c8 <__aeabi_dmul>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4630      	mov	r0, r6
 8006954:	4629      	mov	r1, r5
 8006956:	f7f9 fc01 	bl	800015c <__adddf3>
 800695a:	4606      	mov	r6, r0
 800695c:	460d      	mov	r5, r1
 800695e:	4630      	mov	r0, r6
 8006960:	4629      	mov	r1, r5
 8006962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006966:	2900      	cmp	r1, #0
 8006968:	dc0e      	bgt.n	8006988 <__ieee754_sqrt+0x5c>
 800696a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800696e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006972:	d0f4      	beq.n	800695e <__ieee754_sqrt+0x32>
 8006974:	b141      	cbz	r1, 8006988 <__ieee754_sqrt+0x5c>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	f7f9 fbed 	bl	8000158 <__aeabi_dsub>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	f7f9 fecb 	bl	800071c <__aeabi_ddiv>
 8006986:	e7e8      	b.n	800695a <__ieee754_sqrt+0x2e>
 8006988:	1521      	asrs	r1, r4, #20
 800698a:	d075      	beq.n	8006a78 <__ieee754_sqrt+0x14c>
 800698c:	07cc      	lsls	r4, r1, #31
 800698e:	f04f 0400 	mov.w	r4, #0
 8006992:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006996:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800699a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800699e:	bf5e      	ittt	pl
 80069a0:	0fd9      	lsrpl	r1, r3, #31
 80069a2:	005b      	lslpl	r3, r3, #1
 80069a4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80069a8:	0fd9      	lsrs	r1, r3, #31
 80069aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80069ae:	2516      	movs	r5, #22
 80069b0:	4620      	mov	r0, r4
 80069b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b6:	107f      	asrs	r7, r7, #1
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	1846      	adds	r6, r0, r1
 80069bc:	4296      	cmp	r6, r2
 80069be:	bfde      	ittt	le
 80069c0:	1b92      	suble	r2, r2, r6
 80069c2:	1870      	addle	r0, r6, r1
 80069c4:	1864      	addle	r4, r4, r1
 80069c6:	0052      	lsls	r2, r2, #1
 80069c8:	3d01      	subs	r5, #1
 80069ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80069ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80069d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80069d6:	d1f0      	bne.n	80069ba <__ieee754_sqrt+0x8e>
 80069d8:	4629      	mov	r1, r5
 80069da:	f04f 0e20 	mov.w	lr, #32
 80069de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80069e2:	4282      	cmp	r2, r0
 80069e4:	eb06 0c05 	add.w	ip, r6, r5
 80069e8:	dc02      	bgt.n	80069f0 <__ieee754_sqrt+0xc4>
 80069ea:	d113      	bne.n	8006a14 <__ieee754_sqrt+0xe8>
 80069ec:	459c      	cmp	ip, r3
 80069ee:	d811      	bhi.n	8006a14 <__ieee754_sqrt+0xe8>
 80069f0:	f1bc 0f00 	cmp.w	ip, #0
 80069f4:	eb0c 0506 	add.w	r5, ip, r6
 80069f8:	da43      	bge.n	8006a82 <__ieee754_sqrt+0x156>
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	db41      	blt.n	8006a82 <__ieee754_sqrt+0x156>
 80069fe:	f100 0801 	add.w	r8, r0, #1
 8006a02:	1a12      	subs	r2, r2, r0
 8006a04:	4640      	mov	r0, r8
 8006a06:	459c      	cmp	ip, r3
 8006a08:	bf88      	it	hi
 8006a0a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006a0e:	eba3 030c 	sub.w	r3, r3, ip
 8006a12:	4431      	add	r1, r6
 8006a14:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006a18:	f1be 0e01 	subs.w	lr, lr, #1
 8006a1c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a24:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a28:	d1db      	bne.n	80069e2 <__ieee754_sqrt+0xb6>
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	d006      	beq.n	8006a3c <__ieee754_sqrt+0x110>
 8006a2e:	1c48      	adds	r0, r1, #1
 8006a30:	bf0b      	itete	eq
 8006a32:	4671      	moveq	r1, lr
 8006a34:	3101      	addne	r1, #1
 8006a36:	3401      	addeq	r4, #1
 8006a38:	f021 0101 	bicne.w	r1, r1, #1
 8006a3c:	1063      	asrs	r3, r4, #1
 8006a3e:	0849      	lsrs	r1, r1, #1
 8006a40:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006a44:	07e2      	lsls	r2, r4, #31
 8006a46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006a4a:	bf48      	it	mi
 8006a4c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006a50:	460e      	mov	r6, r1
 8006a52:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006a56:	e782      	b.n	800695e <__ieee754_sqrt+0x32>
 8006a58:	0ada      	lsrs	r2, r3, #11
 8006a5a:	3815      	subs	r0, #21
 8006a5c:	055b      	lsls	r3, r3, #21
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	d0fa      	beq.n	8006a58 <__ieee754_sqrt+0x12c>
 8006a62:	02d5      	lsls	r5, r2, #11
 8006a64:	d50a      	bpl.n	8006a7c <__ieee754_sqrt+0x150>
 8006a66:	f1c1 0420 	rsb	r4, r1, #32
 8006a6a:	fa23 f404 	lsr.w	r4, r3, r4
 8006a6e:	1e4d      	subs	r5, r1, #1
 8006a70:	408b      	lsls	r3, r1
 8006a72:	4322      	orrs	r2, r4
 8006a74:	1b41      	subs	r1, r0, r5
 8006a76:	e789      	b.n	800698c <__ieee754_sqrt+0x60>
 8006a78:	4608      	mov	r0, r1
 8006a7a:	e7f0      	b.n	8006a5e <__ieee754_sqrt+0x132>
 8006a7c:	0052      	lsls	r2, r2, #1
 8006a7e:	3101      	adds	r1, #1
 8006a80:	e7ef      	b.n	8006a62 <__ieee754_sqrt+0x136>
 8006a82:	4680      	mov	r8, r0
 8006a84:	e7bd      	b.n	8006a02 <__ieee754_sqrt+0xd6>
 8006a86:	bf00      	nop
 8006a88:	7ff00000 	.word	0x7ff00000

08006a8c <with_errno>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	4616      	mov	r6, r2
 8006a94:	f7ff f998 	bl	8005dc8 <__errno>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	6006      	str	r6, [r0, #0]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}

08006aa0 <xflow>:
 8006aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aa2:	4615      	mov	r5, r2
 8006aa4:	461c      	mov	r4, r3
 8006aa6:	b180      	cbz	r0, 8006aca <xflow+0x2a>
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006aae:	e9cd 0100 	strd	r0, r1, [sp]
 8006ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	4621      	mov	r1, r4
 8006aba:	f7f9 fd05 	bl	80004c8 <__aeabi_dmul>
 8006abe:	2222      	movs	r2, #34	; 0x22
 8006ac0:	b003      	add	sp, #12
 8006ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac6:	f7ff bfe1 	b.w	8006a8c <with_errno>
 8006aca:	4610      	mov	r0, r2
 8006acc:	4619      	mov	r1, r3
 8006ace:	e7ee      	b.n	8006aae <xflow+0xe>

08006ad0 <__math_uflow>:
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ad6:	f7ff bfe3 	b.w	8006aa0 <xflow>

08006ada <__math_oflow>:
 8006ada:	2200      	movs	r2, #0
 8006adc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006ae0:	f7ff bfde 	b.w	8006aa0 <xflow>

08006ae4 <fabs>:
 8006ae4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ae8:	4770      	bx	lr

08006aea <finite>:
 8006aea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006aee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006af2:	0fc0      	lsrs	r0, r0, #31
 8006af4:	4770      	bx	lr
	...

08006af8 <scalbn>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	4617      	mov	r7, r2
 8006b04:	460b      	mov	r3, r1
 8006b06:	b996      	cbnz	r6, 8006b2e <scalbn+0x36>
 8006b08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b0c:	4303      	orrs	r3, r0
 8006b0e:	d039      	beq.n	8006b84 <scalbn+0x8c>
 8006b10:	4b33      	ldr	r3, [pc, #204]	; (8006be0 <scalbn+0xe8>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	f7f9 fcd8 	bl	80004c8 <__aeabi_dmul>
 8006b18:	4b32      	ldr	r3, [pc, #200]	; (8006be4 <scalbn+0xec>)
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	429f      	cmp	r7, r3
 8006b1e:	460d      	mov	r5, r1
 8006b20:	da0f      	bge.n	8006b42 <scalbn+0x4a>
 8006b22:	a32b      	add	r3, pc, #172	; (adr r3, 8006bd0 <scalbn+0xd8>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fcce 	bl	80004c8 <__aeabi_dmul>
 8006b2c:	e006      	b.n	8006b3c <scalbn+0x44>
 8006b2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006b32:	4296      	cmp	r6, r2
 8006b34:	d10a      	bne.n	8006b4c <scalbn+0x54>
 8006b36:	4602      	mov	r2, r0
 8006b38:	f7f9 fb10 	bl	800015c <__adddf3>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	e020      	b.n	8006b84 <scalbn+0x8c>
 8006b42:	460b      	mov	r3, r1
 8006b44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006b48:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006b4c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006b50:	19b9      	adds	r1, r7, r6
 8006b52:	4291      	cmp	r1, r2
 8006b54:	dd0e      	ble.n	8006b74 <scalbn+0x7c>
 8006b56:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006b5a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006b5e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006b62:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006b66:	4820      	ldr	r0, [pc, #128]	; (8006be8 <scalbn+0xf0>)
 8006b68:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006b6c:	a31a      	add	r3, pc, #104	; (adr r3, 8006bd8 <scalbn+0xe0>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	e7d9      	b.n	8006b28 <scalbn+0x30>
 8006b74:	2900      	cmp	r1, #0
 8006b76:	dd08      	ble.n	8006b8a <scalbn+0x92>
 8006b78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006b8e:	da12      	bge.n	8006bb6 <scalbn+0xbe>
 8006b90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b94:	429f      	cmp	r7, r3
 8006b96:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006b9a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006b9e:	dcdc      	bgt.n	8006b5a <scalbn+0x62>
 8006ba0:	a30b      	add	r3, pc, #44	; (adr r3, 8006bd0 <scalbn+0xd8>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006baa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006bae:	480f      	ldr	r0, [pc, #60]	; (8006bec <scalbn+0xf4>)
 8006bb0:	f041 011f 	orr.w	r1, r1, #31
 8006bb4:	e7b8      	b.n	8006b28 <scalbn+0x30>
 8006bb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bba:	3136      	adds	r1, #54	; 0x36
 8006bbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <scalbn+0xf8>)
 8006bcc:	e7ac      	b.n	8006b28 <scalbn+0x30>
 8006bce:	bf00      	nop
 8006bd0:	c2f8f359 	.word	0xc2f8f359
 8006bd4:	01a56e1f 	.word	0x01a56e1f
 8006bd8:	8800759c 	.word	0x8800759c
 8006bdc:	7e37e43c 	.word	0x7e37e43c
 8006be0:	43500000 	.word	0x43500000
 8006be4:	ffff3cb0 	.word	0xffff3cb0
 8006be8:	8800759c 	.word	0x8800759c
 8006bec:	c2f8f359 	.word	0xc2f8f359
 8006bf0:	3c900000 	.word	0x3c900000

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
