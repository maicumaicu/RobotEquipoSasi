
Bluepill v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fbc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080090d0  080090d0  000190d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009188  08009188  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009188  08009188  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009188  08009188  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08009190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004050  200000f0  0800927c  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004140  0800927c  00024140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001193a  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee0  00000000  00000000  00031a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00034930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00035c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fac  00000000  00000000  00036dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d43  00000000  00000000  00050d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ef7  00000000  00000000  00067aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb9a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  000fb9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080090b4 	.word	0x080090b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	080090b4 	.word	0x080090b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e016      	b.n	80011d8 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011b0:	3301      	adds	r3, #1
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d20b      	bcs.n	80011d2 <GetPage+0x36>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d304      	bcc.n	80011d2 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	e006      	b.n	80011e0 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b7f      	cmp	r3, #127	; 0x7f
 80011dc:	dde5      	ble.n	80011aa <GetPage+0xe>
	  }
  }

  return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80011fe:	f004 fe2b 	bl	8005e58 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff ffca 	bl	800119c <GetPage>
 8001208:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001216:	69f8      	ldr	r0, [r7, #28]
 8001218:	f7ff ffc0 	bl	800119c <GetPage>
 800121c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	0a9b      	lsrs	r3, r3, #10
 8001232:	3301      	adds	r3, #1
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001236:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <Flash_Write_Data+0xb4>)
 8001240:	f004 fefc 	bl	800603c <HAL_FLASHEx_Erase>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01f      	beq.n	800128a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800124a:	f004 fe3b 	bl	8005ec4 <HAL_FLASH_GetError>
 800124e:	4603      	mov	r3, r0
 8001250:	e022      	b.n	8001298 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	461c      	mov	r4, r3
 8001260:	4615      	mov	r5, r2
 8001262:	4622      	mov	r2, r4
 8001264:	462b      	mov	r3, r5
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	2002      	movs	r0, #2
 800126a:	f004 fd85 	bl	8005d78 <HAL_FLASH_Program>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3304      	adds	r3, #4
 8001278:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	e003      	b.n	800128a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001282:	f004 fe1f 	bl	8005ec4 <HAL_FLASH_GetError>
 8001286:	4603      	mov	r3, r0
 8001288:	e006      	b.n	8001298 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	429a      	cmp	r2, r3
 8001290:	dbdf      	blt.n	8001252 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001292:	f004 fe07 	bl	8005ea4 <HAL_FLASH_Lock>

	   return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	2000010c 	.word	0x2000010c

080012a4 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3304      	adds	r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	80fa      	strh	r2, [r7, #6]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d000      	beq.n	80012d2 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80012d0:	e7ef      	b.n	80012b2 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80012d2:	bf00      	nop
	}
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <Convert_To_Str>:
void Convert_To_Str (uint32_t *Data, char *Buf)
{
 80012de:	b590      	push	{r4, r7, lr}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7fe ff31 	bl	8000150 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	089c      	lsrs	r4, r3, #2
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff2c 	bl	8000150 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4423      	add	r3, r4
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e01b      	b.n	800134c <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da00      	bge.n	800131c <Convert_To_Str+0x3e>
 800131a:	3303      	adds	r3, #3
 800131c:	109b      	asrs	r3, r3, #2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4259      	negs	r1, r3
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	f001 0103 	and.w	r1, r1, #3
 8001332:	bf58      	it	pl
 8001334:	424b      	negpl	r3, r1
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	fa22 f103 	lsr.w	r1, r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbdf      	blt.n	8001314 <Convert_To_Str+0x36>
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
	...

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001364:	f003 fde8 	bl	8004f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001368:	f000 f89a 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136c:	f000 fb02 	bl	8001974 <MX_GPIO_Init>
  MX_DMA_Init();
 8001370:	f000 fae2 	bl	8001938 <MX_DMA_Init>
  MX_ADC1_Init();
 8001374:	f000 f8f0 	bl	8001558 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001378:	f000 f986 	bl	8001688 <MX_TIM1_Init>
  MX_TIM3_Init();
 800137c:	f000 f9dc 	bl	8001738 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001380:	f000 fa2e 	bl	80017e0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001384:	f000 faae 	bl	80018e4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001388:	f000 f950 	bl	800162c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	btns[0].Port = BTN1_GPIO_Port;
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <main+0x10c>)
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <main+0x110>)
 8001390:	601a      	str	r2, [r3, #0]
	btns[0].pin = BTN1_Pin;
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <main+0x10c>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	809a      	strh	r2, [r3, #4]
	btns[0].estado = ESPERA;
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <main+0x10c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
	btns[0].flag = 0;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <main+0x10c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
	btns[1].Port = BTN2_GPIO_Port;
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <main+0x10c>)
 80013a8:	4a31      	ldr	r2, [pc, #196]	; (8001470 <main+0x110>)
 80013aa:	611a      	str	r2, [r3, #16]
	btns[1].pin = BTN2_Pin;
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <main+0x10c>)
 80013ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b2:	829a      	strh	r2, [r3, #20]
	btns[1].estado = ESPERA;
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <main+0x10c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	btns[1].flag = 0;
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <main+0x10c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
	btns[2].Port = BTN3_GPIO_Port;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <main+0x10c>)
 80013c2:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <main+0x110>)
 80013c4:	621a      	str	r2, [r3, #32]
	btns[2].pin = BTN3_Pin;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <main+0x10c>)
 80013c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013cc:	849a      	strh	r2, [r3, #36]	; 0x24
	btns[2].estado = ESPERA;
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <main+0x10c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
	btns[2].flag = 0;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <main+0x10c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80013da:	2108      	movs	r1, #8
 80013dc:	4825      	ldr	r0, [pc, #148]	; (8001474 <main+0x114>)
 80013de:	f005 ff45 	bl	800726c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013e2:	210c      	movs	r1, #12
 80013e4:	4823      	ldr	r0, [pc, #140]	; (8001474 <main+0x114>)
 80013e6:	f005 ff41 	bl	800726c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013ea:	213c      	movs	r1, #60	; 0x3c
 80013ec:	4822      	ldr	r0, [pc, #136]	; (8001478 <main+0x118>)
 80013ee:	f006 f881 	bl	80074f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013f2:	213c      	movs	r1, #60	; 0x3c
 80013f4:	4821      	ldr	r0, [pc, #132]	; (800147c <main+0x11c>)
 80013f6:	f006 f87d 	bl	80074f4 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(STBY, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <main+0x110>)
 8001400:	f005 f85f 	bl	80064c2 <HAL_GPIO_WritePin>
	TIM4->CCR3 = 10000;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <main+0x120>)
 8001406:	f242 7210 	movw	r2, #10000	; 0x2710
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 10000;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <main+0x120>)
 800140e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
	xSpeed = 15000;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <main+0x124>)
 8001416:	f643 2298 	movw	r2, #15000	; 0x3a98
 800141a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800141c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001420:	4919      	ldr	r1, [pc, #100]	; (8001488 <main+0x128>)
 8001422:	481a      	ldr	r0, [pc, #104]	; (800148c <main+0x12c>)
 8001424:	f003 fec2 	bl	80051ac <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <main+0x110>)
 8001430:	f005 f847 	bl	80064c2 <HAL_GPIO_WritePin>
	TIM3->CNT = 100;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <main+0x130>)
 8001436:	2264      	movs	r2, #100	; 0x64
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CNT = 100;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <main+0x134>)
 800143c:	2264      	movs	r2, #100	; 0x64
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	offset = 25.1;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <main+0x138>)
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <main+0x13c>)
 8001444:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <main+0x110>)
 800144e:	f005 f838 	bl	80064c2 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		mainMachine();
 8001452:	f000 fcdd 	bl	8001e10 <mainMachine>
		 ticksNow = HAL_GetTick();
		 }*/
		//intUartSend(TIM1->CNT);
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);*/
		btnMachine(0);
 8001456:	2000      	movs	r0, #0
 8001458:	f001 ffba 	bl	80033d0 <btnMachine>
		btnMachine(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f001 ffb7 	bl	80033d0 <btnMachine>
		btnMachine(2);
 8001462:	2002      	movs	r0, #2
 8001464:	f001 ffb4 	bl	80033d0 <btnMachine>
		mainMachine();
 8001468:	e7f3      	b.n	8001452 <main+0xf2>
 800146a:	bf00      	nop
 800146c:	20002360 	.word	0x20002360
 8001470:	40010c00 	.word	0x40010c00
 8001474:	20000274 	.word	0x20000274
 8001478:	200001e4 	.word	0x200001e4
 800147c:	2000022c 	.word	0x2000022c
 8001480:	40000800 	.word	0x40000800
 8001484:	200040c0 	.word	0x200040c0
 8001488:	20000300 	.word	0x20000300
 800148c:	2000011c 	.word	0x2000011c
 8001490:	40000400 	.word	0x40000400
 8001494:	40012c00 	.word	0x40012c00
 8001498:	200040d0 	.word	0x200040d0
 800149c:	41c8cccd 	.word	0x41c8cccd

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 ff14 	bl	80082dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014de:	2301      	movs	r3, #1
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 f940 	bl	800677c <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001502:	f002 f811 	bl	8003528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fbac 	bl	8006c80 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800152e:	f001 fffb 	bl	8003528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001532:	2302      	movs	r3, #2
 8001534:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f005 fd36 	bl	8006fb0 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800154a:	f001 ffed 	bl	8003528 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <MX_ADC1_Init+0xcc>)
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <MX_ADC1_Init+0xd0>)
 800156c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001578:	2201      	movs	r2, #1
 800157a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <MX_ADC1_Init+0xcc>)
 800157e:	2200      	movs	r2, #0
 8001580:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001584:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001588:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_ADC1_Init+0xcc>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001592:	2204      	movs	r2, #4
 8001594:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_ADC1_Init+0xcc>)
 8001598:	f003 fd30 	bl	8004ffc <HAL_ADC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80015a2:	f001 ffc1 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	481b      	ldr	r0, [pc, #108]	; (8001624 <MX_ADC1_Init+0xcc>)
 80015b8:	f003 fee8 	bl	800538c <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f001 ffb1 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <MX_ADC1_Init+0xcc>)
 80015d4:	f003 feda 	bl	800538c <HAL_ADC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80015de:	f001 ffa3 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e6:	2303      	movs	r3, #3
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_ADC1_Init+0xcc>)
 80015f0:	f003 fecc 	bl	800538c <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80015fa:	f001 ff95 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015fe:	2303      	movs	r3, #3
 8001600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001602:	2304      	movs	r3, #4
 8001604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_ADC1_Init+0xcc>)
 800160c:	f003 febe 	bl	800538c <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001616:	f001 ff87 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000011c 	.word	0x2000011c
 8001628:	40012400 	.word	0x40012400

0800162c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	; (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C1_Init+0x50>)
 800166a:	f004 ff43 	bl	80064f4 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f001 ff58 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000190 	.word	0x20000190
 8001680:	40005400 	.word	0x40005400
 8001684:	000186a0 	.word	0x000186a0

08001688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 fe20 	bl	80082dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <MX_TIM1_Init+0xac>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d0:	2303      	movs	r3, #3
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d8:	2301      	movs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016e0:	230a      	movs	r3, #10
 80016e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e8:	2301      	movs	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016f0:	230a      	movs	r3, #10
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM1_Init+0xa8>)
 80016fc:	f005 fe58 	bl	80073b0 <HAL_TIM_Encoder_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001706:	f001 ff0f 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM1_Init+0xa8>)
 8001718:	f006 fba0 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001722:	f001 ff01 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	; 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001e4 	.word	0x200001e4
 8001734:	40012c00 	.word	0x40012c00

08001738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2224      	movs	r2, #36	; 0x24
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f006 fdc8 	bl	80082dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001756:	4a21      	ldr	r2, [pc, #132]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_TIM3_Init+0xa0>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800177a:	2303      	movs	r3, #3
 800177c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800178a:	230a      	movs	r3, #10
 800178c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_TIM3_Init+0xa0>)
 80017a6:	f005 fe03 	bl	80073b0 <HAL_TIM_Encoder_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f001 feba 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM3_Init+0xa0>)
 80017c2:	f006 fb4b 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017cc:	f001 feac 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000022c 	.word	0x2000022c
 80017dc:	40000400 	.word	0x40000400

080017e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <MX_TIM4_Init+0x100>)
 8001814:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <MX_TIM4_Init+0xfc>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001828:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <MX_TIM4_Init+0xfc>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001836:	4829      	ldr	r0, [pc, #164]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001838:	f005 fc70 	bl	800711c <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001842:	f001 fe71 	bl	8003528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800184c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001850:	4619      	mov	r1, r3
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001854:	f005 ff9a 	bl	800778c <HAL_TIM_ConfigClockSource>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800185e:	f001 fe63 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001862:	481e      	ldr	r0, [pc, #120]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001864:	f005 fca9 	bl	80071ba <HAL_TIM_PWM_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800186e:	f001 fe5b 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	4619      	mov	r1, r3
 8001880:	4816      	ldr	r0, [pc, #88]	; (80018dc <MX_TIM4_Init+0xfc>)
 8001882:	f006 faeb 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800188c:	f001 fe4c 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001890:	2360      	movs	r3, #96	; 0x60
 8001892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2208      	movs	r2, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM4_Init+0xfc>)
 80018a8:	f005 feb2 	bl	8007610 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80018b2:	f001 fe39 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	220c      	movs	r2, #12
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <MX_TIM4_Init+0xfc>)
 80018be:	f005 fea7 	bl	8007610 <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80018c8:	f001 fe2e 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_TIM4_Init+0xfc>)
 80018ce:	f002 fe13 	bl	80044f8 <HAL_TIM_MspPostInit>

}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	; 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000274 	.word	0x20000274
 80018e0:	40000800 	.word	0x40000800

080018e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_USART3_UART_Init+0x50>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 80018f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART3_UART_Init+0x4c>)
 800191c:	f006 fafc 	bl	8007f18 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001926:	f001 fdff 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200002bc 	.word	0x200002bc
 8001934:	40004800 	.word	0x40004800

08001938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_DMA_Init+0x38>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <MX_DMA_Init+0x38>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6153      	str	r3, [r2, #20]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_DMA_Init+0x38>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	200b      	movs	r0, #11
 800195c:	f003 ffe7 	bl	800592e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001960:	200b      	movs	r0, #11
 8001962:	f004 f800 	bl	8005966 <HAL_NVIC_EnableIRQ>

}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <MX_GPIO_Init+0x114>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a3e      	ldr	r2, [pc, #248]	; (8001a88 <MX_GPIO_Init+0x114>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <MX_GPIO_Init+0x114>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a0:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019a6:	f043 0320 	orr.w	r3, r3, #32
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019d6:	f043 0308 	orr.w	r3, r3, #8
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	4827      	ldr	r0, [pc, #156]	; (8001a8c <MX_GPIO_Init+0x118>)
 80019f0:	f004 fd67 	bl	80064c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|STBY_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f248 0138 	movw	r1, #32824	; 0x8038
 80019fa:	4825      	ldr	r0, [pc, #148]	; (8001a90 <MX_GPIO_Init+0x11c>)
 80019fc:	f004 fd61 	bl	80064c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001a06:	4823      	ldr	r0, [pc, #140]	; (8001a94 <MX_GPIO_Init+0x120>)
 8001a08:	f004 fd5b 	bl	80064c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4619      	mov	r1, r3
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <MX_GPIO_Init+0x118>)
 8001a26:	f004 fbb1 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001a2a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MX_GPIO_Init+0x11c>)
 8001a40:	f004 fba4 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin STBY_Pin AIN1_Pin AIN2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|STBY_Pin|AIN1_Pin|AIN2_Pin;
 8001a44:	f248 0338 	movw	r3, #32824	; 0x8038
 8001a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_GPIO_Init+0x11c>)
 8001a5e:	f004 fb95 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin;
 8001a62:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_GPIO_Init+0x120>)
 8001a7c:	f004 fb86 	bl	800618c <HAL_GPIO_Init>

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40010800 	.word	0x40010800

08001a98 <intUartSend>:

/* USER CODE BEGIN 4 */

void intUartSend(float entero) {
 8001a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a9c:	b088      	sub	sp, #32
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	int d;
	int u;
	int de1;
	int de2;

	m = abs(entero / 1000);
 8001aa2:	497d      	ldr	r1, [pc, #500]	; (8001c98 <intUartSend+0x200>)
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fa21 	bl	8000eec <__aeabi_fdiv>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fb2f 	bl	8001110 <__aeabi_f2iz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bfb8      	it	lt
 8001ab8:	425b      	neglt	r3, r3
 8001aba:	61fb      	str	r3, [r7, #28]
	c = abs(entero / 100) - m * 10;
 8001abc:	4977      	ldr	r1, [pc, #476]	; (8001c9c <intUartSend+0x204>)
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fa14 	bl	8000eec <__aeabi_fdiv>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fb22 	bl	8001110 <__aeabi_f2iz>
 8001acc:	4603      	mov	r3, r0
 8001ace:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ad2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f06f 0109 	mvn.w	r1, #9
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
	d = abs(entero / 10) - (m * 100 + c * 10);
 8001ae4:	496e      	ldr	r1, [pc, #440]	; (8001ca0 <intUartSend+0x208>)
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fa00 	bl	8000eec <__aeabi_fdiv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fb0e 	bl	8001110 <__aeabi_f2iz>
 8001af4:	4603      	mov	r3, r0
 8001af6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001afa:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	2264      	movs	r2, #100	; 0x64
 8001b02:	fb02 f003 	mul.w	r0, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4403      	add	r3, r0
 8001b12:	1acb      	subs	r3, r1, r3
 8001b14:	617b      	str	r3, [r7, #20]
	u = abs(entero) - (m * 1000 + c * 100 + d * 10);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fafa 	bl	8001110 <__aeabi_f2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001b22:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b2c:	fb03 f202 	mul.w	r2, r3, r2
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2064      	movs	r0, #100	; 0x64
 8001b34:	fb00 f303 	mul.w	r3, r0, r3
 8001b38:	18d0      	adds	r0, r2, r3
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4403      	add	r3, r0
 8001b46:	1acb      	subs	r3, r1, r3
 8001b48:	613b      	str	r3, [r7, #16]
	if (entero > 0) {
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fad4 	bl	80010fc <__aeabi_fcmpgt>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80aa 	beq.w	8001cb0 <intUartSend+0x218>
		de1 = (entero - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b62:	fb03 f202 	mul.w	r2, r3, r2
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2164      	movs	r1, #100	; 0x64
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	18d1      	adds	r1, r2, r3
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	18ca      	adds	r2, r1, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f8ab 	bl	8000cdc <__aeabi_i2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe fff0 	bl	8000b70 <__aeabi_fsub>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4943      	ldr	r1, [pc, #268]	; (8001ca0 <intUartSend+0x208>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f8f5 	bl	8000d84 <__aeabi_fmul>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fab7 	bl	8001110 <__aeabi_f2iz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]
		de2 = (entero - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1)) * 100;
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fc3e 	bl	8000428 <__aeabi_f2d>
 8001bac:	4604      	mov	r4, r0
 8001bae:	460d      	mov	r5, r1
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb6:	fb03 f202 	mul.w	r2, r3, r2
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2164      	movs	r1, #100	; 0x64
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	18d1      	adds	r1, r2, r3
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	18ca      	adds	r2, r1, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc15 	bl	8000404 <__aeabi_i2d>
 8001bda:	4680      	mov	r8, r0
 8001bdc:	4689      	mov	r9, r1
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7fe fc10 	bl	8000404 <__aeabi_i2d>
 8001be4:	a32a      	add	r3, pc, #168	; (adr r3, 8001c90 <intUartSend+0x1f8>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fc75 	bl	80004d8 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	f7fe fab9 	bl	800016c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fab1 	bl	8000168 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <intUartSend+0x20c>)
 8001c14:	f7fe fc60 	bl	80004d8 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff0a 	bl	8000a38 <__aeabi_d2iz>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = m + '0';
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3330      	adds	r3, #48	; 0x30
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <intUartSend+0x210>)
 8001c32:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = c + '0';
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	3330      	adds	r3, #48	; 0x30
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <intUartSend+0x210>)
 8001c3e:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = d + '0';
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3330      	adds	r3, #48	; 0x30
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <intUartSend+0x210>)
 8001c4a:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = u + '0';
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3330      	adds	r3, #48	; 0x30
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <intUartSend+0x210>)
 8001c56:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = ',';
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <intUartSend+0x210>)
 8001c5a:	222c      	movs	r2, #44	; 0x2c
 8001c5c:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = de1 + '0';
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3330      	adds	r3, #48	; 0x30
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <intUartSend+0x210>)
 8001c68:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de2 + '0';
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3330      	adds	r3, #48	; 0x30
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <intUartSend+0x210>)
 8001c74:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = '\n';
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <intUartSend+0x210>)
 8001c78:	220a      	movs	r2, #10
 8001c7a:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <intUartSend+0x210>)
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <intUartSend+0x214>)
 8001c84:	f006 f995 	bl	8007fb2 <HAL_UART_Transmit>
	 TX_BUFFER[4] = ',';
	 TX_BUFFER[5] = de1 + '0';
	 TX_BUFFER[6] = de2 + '0';
	 TX_BUFFER[7] = '\n';
	 HAL_UART_Transmit(&huart3, TX_BUFFER, 8, 100);*/
}
 8001c88:	e0b1      	b.n	8001dee <intUartSend+0x356>
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fb99999 	.word	0x3fb99999
 8001c98:	447a0000 	.word	0x447a0000
 8001c9c:	42c80000 	.word	0x42c80000
 8001ca0:	41200000 	.word	0x41200000
 8001ca4:	40590000 	.word	0x40590000
 8001ca8:	2000233c 	.word	0x2000233c
 8001cac:	200002bc 	.word	0x200002bc
		de1 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u)) * 10;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cbc:	fb03 f202 	mul.w	r2, r3, r2
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2164      	movs	r1, #100	; 0x64
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	18d1      	adds	r1, r2, r3
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	18ca      	adds	r2, r1, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fffe 	bl	8000cdc <__aeabi_i2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7fe ff43 	bl	8000b70 <__aeabi_fsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4944      	ldr	r1, [pc, #272]	; (8001e00 <intUartSend+0x368>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f848 	bl	8000d84 <__aeabi_fmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fa0a 	bl	8001110 <__aeabi_f2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb8e 	bl	8000428 <__aeabi_f2d>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460d      	mov	r5, r1
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d16:	fb03 f202 	mul.w	r2, r3, r2
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2164      	movs	r1, #100	; 0x64
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	18d1      	adds	r1, r2, r3
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	18ca      	adds	r2, r1, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fb65 	bl	8000404 <__aeabi_i2d>
 8001d3a:	4680      	mov	r8, r0
 8001d3c:	4689      	mov	r9, r1
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7fe fb60 	bl	8000404 <__aeabi_i2d>
 8001d44:	a32c      	add	r3, pc, #176	; (adr r3, 8001df8 <intUartSend+0x360>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fbc5 	bl	80004d8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f7fe fa09 	bl	800016c <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	4629      	mov	r1, r5
 8001d62:	f7fe fa01 	bl	8000168 <__aeabi_dsub>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
				* 100;
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <intUartSend+0x36c>)
 8001d74:	f7fe fbb0 	bl	80004d8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
		de2 = ((-(entero)) - (m * 1000 + c * 100 + d * 10 + u + de1 * 0.1))
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fe5a 	bl	8000a38 <__aeabi_d2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60bb      	str	r3, [r7, #8]
		TX_BUFFER[0] = '-';
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <intUartSend+0x370>)
 8001d8a:	222d      	movs	r2, #45	; 0x2d
 8001d8c:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = m + '0';
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3330      	adds	r3, #48	; 0x30
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <intUartSend+0x370>)
 8001d98:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = c + '0';
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3330      	adds	r3, #48	; 0x30
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <intUartSend+0x370>)
 8001da4:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = d + '0';
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3330      	adds	r3, #48	; 0x30
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <intUartSend+0x370>)
 8001db0:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = u + '0';
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3330      	adds	r3, #48	; 0x30
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <intUartSend+0x370>)
 8001dbc:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = ',';
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <intUartSend+0x370>)
 8001dc0:	222c      	movs	r2, #44	; 0x2c
 8001dc2:	715a      	strb	r2, [r3, #5]
		TX_BUFFER[6] = de1 + '0';
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3330      	adds	r3, #48	; 0x30
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <intUartSend+0x370>)
 8001dce:	719a      	strb	r2, [r3, #6]
		TX_BUFFER[7] = de2 + '0';
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3330      	adds	r3, #48	; 0x30
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <intUartSend+0x370>)
 8001dda:	71da      	strb	r2, [r3, #7]
		TX_BUFFER[8] = '\n';
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <intUartSend+0x370>)
 8001dde:	220a      	movs	r2, #10
 8001de0:	721a      	strb	r2, [r3, #8]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 9, 100);
 8001de2:	2364      	movs	r3, #100	; 0x64
 8001de4:	2209      	movs	r2, #9
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <intUartSend+0x370>)
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <intUartSend+0x374>)
 8001dea:	f006 f8e2 	bl	8007fb2 <HAL_UART_Transmit>
}
 8001dee:	bf00      	nop
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	3fb99999 	.word	0x3fb99999
 8001e00:	41200000 	.word	0x41200000
 8001e04:	40590000 	.word	0x40590000
 8001e08:	2000233c 	.word	0x2000233c
 8001e0c:	200002bc 	.word	0x200002bc

08001e10 <mainMachine>:

void mainMachine() {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	switch (mainState) {
 8001e14:	4b90      	ldr	r3, [pc, #576]	; (8002058 <mainMachine+0x248>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	f200 81ad 	bhi.w	8002178 <mainMachine+0x368>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <mainMachine+0x14>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001fdf 	.word	0x08001fdf
 8001e2c:	080020d1 	.word	0x080020d1
 8001e30:	0800216f 	.word	0x0800216f
 8001e34:	08001fd9 	.word	0x08001fd9
	case SETUP:
		actual.x = ALTO;
 8001e38:	4b88      	ldr	r3, [pc, #544]	; (800205c <mainMachine+0x24c>)
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
		actual.y = ANCHO;
 8001e3e:	4b87      	ldr	r3, [pc, #540]	; (800205c <mainMachine+0x24c>)
 8001e40:	2208      	movs	r2, #8
 8001e42:	605a      	str	r2, [r3, #4]
		/*visual.x = 0;
		 visual.y = 0;*/
		resetAxis(direcciones);
 8001e44:	4886      	ldr	r0, [pc, #536]	; (8002060 <mainMachine+0x250>)
 8001e46:	f001 fc5e 	bl	8003706 <resetAxis>
		movimientoFlag = 0;
 8001e4a:	4b86      	ldr	r3, [pc, #536]	; (8002064 <mainMachine+0x254>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
		finishFlag = 0;
 8001e50:	4b85      	ldr	r3, [pc, #532]	; (8002068 <mainMachine+0x258>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
		/*if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		 } else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		 }*/
		if (btns[0].flag == 1) {
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <mainMachine+0x25c>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d13e      	bne.n	8001edc <mainMachine+0xcc>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e64:	4882      	ldr	r0, [pc, #520]	; (8002070 <mainMachine+0x260>)
 8001e66:	f004 fb2c 	bl	80064c2 <HAL_GPIO_WritePin>
			choice = SLOW;
 8001e6a:	4b82      	ldr	r3, [pc, #520]	; (8002074 <mainMachine+0x264>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[SLOW];
 8001e70:	4b81      	ldr	r3, [pc, #516]	; (8002078 <mainMachine+0x268>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a81      	ldr	r2, [pc, #516]	; (800207c <mainMachine+0x26c>)
 8001e76:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[SLOW];
 8001e78:	4b81      	ldr	r3, [pc, #516]	; (8002080 <mainMachine+0x270>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e80:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[SLOW];
 8001e82:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <mainMachine+0x270>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[SLOW];
 8001e8c:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <mainMachine+0x274>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a7d      	ldr	r2, [pc, #500]	; (8002088 <mainMachine+0x278>)
 8001e92:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[SLOW];
 8001e94:	4b7d      	ldr	r3, [pc, #500]	; (800208c <mainMachine+0x27c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7d      	ldr	r2, [pc, #500]	; (8002090 <mainMachine+0x280>)
 8001e9a:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[SLOW];
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <mainMachine+0x284>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a7d      	ldr	r2, [pc, #500]	; (8002098 <mainMachine+0x288>)
 8001ea2:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[SLOW];
 8001ea4:	4b7d      	ldr	r3, [pc, #500]	; (800209c <mainMachine+0x28c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7d      	ldr	r2, [pc, #500]	; (80020a0 <mainMachine+0x290>)
 8001eaa:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[SLOW];
 8001eac:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <mainMachine+0x294>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7d      	ldr	r2, [pc, #500]	; (80020a8 <mainMachine+0x298>)
 8001eb2:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[SLOW];
 8001eb4:	4b7d      	ldr	r3, [pc, #500]	; (80020ac <mainMachine+0x29c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a7d      	ldr	r2, [pc, #500]	; (80020b0 <mainMachine+0x2a0>)
 8001eba:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001ebc:	4b7d      	ldr	r3, [pc, #500]	; (80020b4 <mainMachine+0x2a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d108      	bne.n	8001ed6 <mainMachine+0xc6>
				mainState = CALIBRATE;
 8001ec4:	4b64      	ldr	r3, [pc, #400]	; (8002058 <mainMachine+0x248>)
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	601a      	str	r2, [r3, #0]
				t++;
 8001eca:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <mainMachine+0x2a4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a78      	ldr	r2, [pc, #480]	; (80020b4 <mainMachine+0x2a4>)
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e002      	b.n	8001edc <mainMachine+0xcc>
			} else {
				mainState = MAPPING;
 8001ed6:	4b60      	ldr	r3, [pc, #384]	; (8002058 <mainMachine+0x248>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
			}

		}
		if (btns[1].flag == 1) {
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <mainMachine+0x25c>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d134      	bne.n	8001f4e <mainMachine+0x13e>
			// Set The LED ON!
			choice = FAST;
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <mainMachine+0x264>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <mainMachine+0x268>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a63      	ldr	r2, [pc, #396]	; (800207c <mainMachine+0x26c>)
 8001ef0:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001ef2:	4b63      	ldr	r3, [pc, #396]	; (8002080 <mainMachine+0x270>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001efc:	4b60      	ldr	r3, [pc, #384]	; (8002080 <mainMachine+0x270>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[FAST];
 8001f06:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <mainMachine+0x274>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a5f      	ldr	r2, [pc, #380]	; (8002088 <mainMachine+0x278>)
 8001f0c:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[FAST];
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <mainMachine+0x27c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <mainMachine+0x280>)
 8001f14:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[FAST];
 8001f16:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <mainMachine+0x284>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a5f      	ldr	r2, [pc, #380]	; (8002098 <mainMachine+0x288>)
 8001f1c:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[FAST];
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <mainMachine+0x28c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a5f      	ldr	r2, [pc, #380]	; (80020a0 <mainMachine+0x290>)
 8001f24:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[FAST];
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <mainMachine+0x294>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a5f      	ldr	r2, [pc, #380]	; (80020a8 <mainMachine+0x298>)
 8001f2c:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[FAST];
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <mainMachine+0x29c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a5f      	ldr	r2, [pc, #380]	; (80020b0 <mainMachine+0x2a0>)
 8001f34:	6013      	str	r3, [r2, #0]
			mainState = RACING;
 8001f36:	4b48      	ldr	r3, [pc, #288]	; (8002058 <mainMachine+0x248>)
 8001f38:	2203      	movs	r2, #3
 8001f3a:	601a      	str	r2, [r3, #0]
			Flash_Read_Data(0x0801FC00, Rx_Data, 2);
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	495e      	ldr	r1, [pc, #376]	; (80020b8 <mainMachine+0x2a8>)
 8001f40:	485e      	ldr	r0, [pc, #376]	; (80020bc <mainMachine+0x2ac>)
 8001f42:	f7ff f9af 	bl	80012a4 <Flash_Read_Data>
			Convert_To_Str(Rx_Data, string);
 8001f46:	495e      	ldr	r1, [pc, #376]	; (80020c0 <mainMachine+0x2b0>)
 8001f48:	485b      	ldr	r0, [pc, #364]	; (80020b8 <mainMachine+0x2a8>)
 8001f4a:	f7ff f9c8 	bl	80012de <Convert_To_Str>
			//directions = ReadRun();
			//ShowRun();
		}
		if (btns[2].flag == 1) {
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <mainMachine+0x25c>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	f040 810f 	bne.w	8002176 <mainMachine+0x366>
			// Set The LED ON!
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5e:	4859      	ldr	r0, [pc, #356]	; (80020c4 <mainMachine+0x2b4>)
 8001f60:	f004 faaf 	bl	80064c2 <HAL_GPIO_WritePin>
			choice = FAST;
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <mainMachine+0x264>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
			velocity = velocityChoice[FAST];
 8001f6a:	4b43      	ldr	r3, [pc, #268]	; (8002078 <mainMachine+0x268>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a43      	ldr	r2, [pc, #268]	; (800207c <mainMachine+0x26c>)
 8001f70:	6013      	str	r3, [r2, #0]
			TIM2->CCR3 = baseChoice[FAST];
 8001f72:	4b43      	ldr	r3, [pc, #268]	; (8002080 <mainMachine+0x270>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = baseChoice[FAST];
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <mainMachine+0x270>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
			KPT = KPTchoice[FAST];
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <mainMachine+0x274>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a3f      	ldr	r2, [pc, #252]	; (8002088 <mainMachine+0x278>)
 8001f8c:	6013      	str	r3, [r2, #0]
			KDT = KDTchoice[FAST];
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <mainMachine+0x27c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <mainMachine+0x280>)
 8001f94:	6013      	str	r3, [r2, #0]
			KPA = KPAchoice[FAST];
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <mainMachine+0x284>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <mainMachine+0x288>)
 8001f9c:	6013      	str	r3, [r2, #0]
			KDA = KDAchoice[FAST];
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	; (800209c <mainMachine+0x28c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <mainMachine+0x290>)
 8001fa4:	6013      	str	r3, [r2, #0]
			KPP = KPPchoice[FAST];
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <mainMachine+0x294>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <mainMachine+0x298>)
 8001fac:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[FAST];
 8001fae:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <mainMachine+0x29c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	; (80020b0 <mainMachine+0x2a0>)
 8001fb4:	6013      	str	r3, [r2, #0]
			if (t == 0) {
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <mainMachine+0x2a4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d108      	bne.n	8001fd0 <mainMachine+0x1c0>
				mainState = CALIBRATE;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <mainMachine+0x248>)
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	601a      	str	r2, [r3, #0]
				t++;
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <mainMachine+0x2a4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <mainMachine+0x2a4>)
 8001fcc:	6013      	str	r3, [r2, #0]
			} else {
				mainState = MAPPING;
			}
		}
		//confirmacionCentrado();
		break;
 8001fce:	e0d2      	b.n	8002176 <mainMachine+0x366>
				mainState = MAPPING;
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <mainMachine+0x248>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
		break;
 8001fd6:	e0ce      	b.n	8002176 <mainMachine+0x366>
	case CALIBRATE:
		calibrateMachine();
 8001fd8:	f000 f8e2 	bl	80021a0 <calibrateMachine>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		break;
 8001fdc:	e0cc      	b.n	8002178 <mainMachine+0x368>
	case MAPPING:
		if (finishFlag == 0) {
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <mainMachine+0x258>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <mainMachine+0x1dc>
			robotMachine();
 8001fe6:	f000 f9bb 	bl	8002360 <robotMachine>
			finishFlag = 0;
			resetAxis(direcciones);
			PrintMap();
			mainState = RESOLUTION;
		}
		break;
 8001fea:	e0c5      	b.n	8002178 <mainMachine+0x368>
			TX_BUFFER[0] = 'X';
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <mainMachine+0x2b8>)
 8001fee:	2258      	movs	r2, #88	; 0x58
 8001ff0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8001ff2:	2364      	movs	r3, #100	; 0x64
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4934      	ldr	r1, [pc, #208]	; (80020c8 <mainMachine+0x2b8>)
 8001ff8:	4834      	ldr	r0, [pc, #208]	; (80020cc <mainMachine+0x2bc>)
 8001ffa:	f005 ffda 	bl	8007fb2 <HAL_UART_Transmit>
			intUartSend(actual.x);
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <mainMachine+0x24c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fe6a 	bl	8000cdc <__aeabi_i2f>
 8002008:	4603      	mov	r3, r0
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fd44 	bl	8001a98 <intUartSend>
			TX_BUFFER[0] = 'Y';
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <mainMachine+0x2b8>)
 8002012:	2259      	movs	r2, #89	; 0x59
 8002014:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	2201      	movs	r2, #1
 800201a:	492b      	ldr	r1, [pc, #172]	; (80020c8 <mainMachine+0x2b8>)
 800201c:	482b      	ldr	r0, [pc, #172]	; (80020cc <mainMachine+0x2bc>)
 800201e:	f005 ffc8 	bl	8007fb2 <HAL_UART_Transmit>
			intUartSend(actual.y);
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <mainMachine+0x24c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fe58 	bl	8000cdc <__aeabi_i2f>
 800202c:	4603      	mov	r3, r0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fd32 	bl	8001a98 <intUartSend>
			actual.x = ALTO;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <mainMachine+0x24c>)
 8002036:	2208      	movs	r2, #8
 8002038:	601a      	str	r2, [r3, #0]
			actual.y = ANCHO;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <mainMachine+0x24c>)
 800203c:	2208      	movs	r2, #8
 800203e:	605a      	str	r2, [r3, #4]
			finishFlag = 0;
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <mainMachine+0x258>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
			resetAxis(direcciones);
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <mainMachine+0x250>)
 8002048:	f001 fb5d 	bl	8003706 <resetAxis>
			PrintMap();
 800204c:	f001 f8e0 	bl	8003210 <PrintMap>
			mainState = RESOLUTION;
 8002050:	4b01      	ldr	r3, [pc, #4]	; (8002058 <mainMachine+0x248>)
 8002052:	2202      	movs	r2, #2
 8002054:	601a      	str	r2, [r3, #0]
		break;
 8002056:	e08f      	b.n	8002178 <mainMachine+0x368>
 8002058:	2000239c 	.word	0x2000239c
 800205c:	2000248c 	.word	0x2000248c
 8002060:	20002310 	.word	0x20002310
 8002064:	20002358 	.word	0x20002358
 8002068:	20002354 	.word	0x20002354
 800206c:	20002360 	.word	0x20002360
 8002070:	40010c00 	.word	0x40010c00
 8002074:	20002320 	.word	0x20002320
 8002078:	20000044 	.word	0x20000044
 800207c:	200040b4 	.word	0x200040b4
 8002080:	2000004c 	.word	0x2000004c
 8002084:	20000000 	.word	0x20000000
 8002088:	2000409c 	.word	0x2000409c
 800208c:	20000008 	.word	0x20000008
 8002090:	200040a0 	.word	0x200040a0
 8002094:	20000010 	.word	0x20000010
 8002098:	200040a4 	.word	0x200040a4
 800209c:	20000018 	.word	0x20000018
 80020a0:	200040a8 	.word	0x200040a8
 80020a4:	20000020 	.word	0x20000020
 80020a8:	200040ac 	.word	0x200040ac
 80020ac:	20000030 	.word	0x20000030
 80020b0:	200040b0 	.word	0x200040b0
 80020b4:	200040b8 	.word	0x200040b8
 80020b8:	200023c0 	.word	0x200023c0
 80020bc:	0801fc00 	.word	0x0801fc00
 80020c0:	20002428 	.word	0x20002428
 80020c4:	40011000 	.word	0x40011000
 80020c8:	2000233c 	.word	0x2000233c
 80020cc:	200002bc 	.word	0x200002bc
	case RESOLUTION:
		if (Map[actual.x][actual.y].final == 0) {
 80020d0:	4b2a      	ldr	r3, [pc, #168]	; (800217c <mainMachine+0x36c>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <mainMachine+0x36c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4829      	ldr	r0, [pc, #164]	; (8002180 <mainMachine+0x370>)
 80020da:	461a      	mov	r2, r3
 80020dc:	00d2      	lsls	r2, r2, #3
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	0093      	lsls	r3, r2, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	460b      	mov	r3, r1
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	019b      	lsls	r3, r3, #6
 80020ec:	4413      	add	r3, r2
 80020ee:	4403      	add	r3, r0
 80020f0:	3314      	adds	r3, #20
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12c      	bne.n	8002152 <mainMachine+0x342>
			addDirection(actual.x, actual.y);
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <mainMachine+0x36c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <mainMachine+0x36c>)
 80020fe:	6852      	ldr	r2, [r2, #4]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fb32 	bl	800276c <addDirection>
			TX_BUFFER[0] = 'X';
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <mainMachine+0x374>)
 800210a:	2258      	movs	r2, #88	; 0x58
 800210c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 800210e:	2364      	movs	r3, #100	; 0x64
 8002110:	2201      	movs	r2, #1
 8002112:	491c      	ldr	r1, [pc, #112]	; (8002184 <mainMachine+0x374>)
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <mainMachine+0x378>)
 8002116:	f005 ff4c 	bl	8007fb2 <HAL_UART_Transmit>
			intUartSend(actual.x);
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <mainMachine+0x36c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fddc 	bl	8000cdc <__aeabi_i2f>
 8002124:	4603      	mov	r3, r0
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fcb6 	bl	8001a98 <intUartSend>
			TX_BUFFER[0] = 'Y';
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <mainMachine+0x374>)
 800212e:	2259      	movs	r2, #89	; 0x59
 8002130:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8002132:	2364      	movs	r3, #100	; 0x64
 8002134:	2201      	movs	r2, #1
 8002136:	4913      	ldr	r1, [pc, #76]	; (8002184 <mainMachine+0x374>)
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <mainMachine+0x378>)
 800213a:	f005 ff3a 	bl	8007fb2 <HAL_UART_Transmit>
			intUartSend(actual.y);
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <mainMachine+0x36c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fdca 	bl	8000cdc <__aeabi_i2f>
 8002148:	4603      	mov	r3, r0
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fca4 	bl	8001a98 <intUartSend>
			directions[directionsSize] = 'o';
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
			mainState = SETUP;
		}

		break;
 8002150:	e012      	b.n	8002178 <mainMachine+0x368>
			directions[directionsSize] = 'o';
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <mainMachine+0x37c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <mainMachine+0x380>)
 8002158:	216f      	movs	r1, #111	; 0x6f
 800215a:	54d1      	strb	r1, [r2, r3]
			Flash_Write_Data(0x0801FC00, (uint32_t*) directions, 25);
 800215c:	2219      	movs	r2, #25
 800215e:	490c      	ldr	r1, [pc, #48]	; (8002190 <mainMachine+0x380>)
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <mainMachine+0x384>)
 8002162:	f7ff f843 	bl	80011ec <Flash_Write_Data>
			mainState = SETUP;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <mainMachine+0x388>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
		break;
 800216c:	e004      	b.n	8002178 <mainMachine+0x368>
	case RACING:
		runDirections(string);
 800216e:	480b      	ldr	r0, [pc, #44]	; (800219c <mainMachine+0x38c>)
 8002170:	f000 fa9e 	bl	80026b0 <runDirections>
		break;
 8002174:	e000      	b.n	8002178 <mainMachine+0x368>
		break;
 8002176:	bf00      	nop
	}

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000248c 	.word	0x2000248c
 8002180:	2000249c 	.word	0x2000249c
 8002184:	2000233c 	.word	0x2000233c
 8002188:	200002bc 	.word	0x200002bc
 800218c:	2000234c 	.word	0x2000234c
 8002190:	200023a4 	.word	0x200023a4
 8002194:	0801fc00 	.word	0x0801fc00
 8002198:	2000239c 	.word	0x2000239c
 800219c:	20002428 	.word	0x20002428

080021a0 <calibrateMachine>:

void calibrateMachine() {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	switch (calState) {
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <calibrateMachine+0x1a0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	f200 80c6 	bhi.w	800233a <calibrateMachine+0x19a>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <calibrateMachine+0x14>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	080021c5 	.word	0x080021c5
 80021b8:	0800225d 	.word	0x0800225d
 80021bc:	080022a5 	.word	0x080022a5
 80021c0:	080022ed 	.word	0x080022ed
	case CENTER:
		intUartSend(Sensors[1] - Sensors[3]);
 80021c4:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <calibrateMachine+0x1a4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a5e      	ldr	r2, [pc, #376]	; (8002344 <calibrateMachine+0x1a4>)
 80021ca:	68d2      	ldr	r2, [r2, #12]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fcce 	bl	8000b70 <__aeabi_fsub>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc5e 	bl	8001a98 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e2:	4859      	ldr	r0, [pc, #356]	; (8002348 <calibrateMachine+0x1a8>)
 80021e4:	f004 f96d 	bl	80064c2 <HAL_GPIO_WritePin>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 80021e8:	4b56      	ldr	r3, [pc, #344]	; (8002344 <calibrateMachine+0x1a4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a55      	ldr	r2, [pc, #340]	; (8002344 <calibrateMachine+0x1a4>)
 80021ee:	68d2      	ldr	r2, [r2, #12]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fcbc 	bl	8000b70 <__aeabi_fsub>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe ff5e 	bl	80010c0 <__aeabi_fcmplt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d100      	bne.n	800220c <calibrateMachine+0x6c>
			}
		}
		/*runMotor(ADELANTE, MOTOR_A);
		 runMotor(ADELANTE, MOTOR_B);
		 StraightFlag = 1;*/
		break;
 800220a:	e08f      	b.n	800232c <calibrateMachine+0x18c>
		if (Sensors[1] - Sensors[3] < 0.5 && Sensors[1] - Sensors[3] > -0.5) {
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <calibrateMachine+0x1a4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <calibrateMachine+0x1a4>)
 8002212:	68d2      	ldr	r2, [r2, #12]
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fcaa 	bl	8000b70 <__aeabi_fsub>
 800221c:	4603      	mov	r3, r0
 800221e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ff6a 	bl	80010fc <__aeabi_fcmpgt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d100      	bne.n	8002230 <calibrateMachine+0x90>
		break;
 800222e:	e07d      	b.n	800232c <calibrateMachine+0x18c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002236:	4844      	ldr	r0, [pc, #272]	; (8002348 <calibrateMachine+0x1a8>)
 8002238:	f004 f943 	bl	80064c2 <HAL_GPIO_WritePin>
			if (btns[0].flag == 1) {
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <calibrateMachine+0x1ac>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d173      	bne.n	800232c <calibrateMachine+0x18c>
				CenterDistanceRight = Sensors[3];
 8002244:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <calibrateMachine+0x1a4>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a41      	ldr	r2, [pc, #260]	; (8002350 <calibrateMachine+0x1b0>)
 800224a:	6013      	str	r3, [r2, #0]
				CenterDistanceLeft = Sensors[1];
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <calibrateMachine+0x1a4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a40      	ldr	r2, [pc, #256]	; (8002354 <calibrateMachine+0x1b4>)
 8002252:	6013      	str	r3, [r2, #0]
				calState = LEFT;
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <calibrateMachine+0x1a0>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]
		break;
 800225a:	e067      	b.n	800232c <calibrateMachine+0x18c>
	case LEFT:
		intUartSend((Sensors[3]));
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <calibrateMachine+0x1a4>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc19 	bl	8001a98 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226c:	4836      	ldr	r0, [pc, #216]	; (8002348 <calibrateMachine+0x1a8>)
 800226e:	f004 f928 	bl	80064c2 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <calibrateMachine+0x1ac>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d15a      	bne.n	8002330 <calibrateMachine+0x190>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002280:	4831      	ldr	r0, [pc, #196]	; (8002348 <calibrateMachine+0x1a8>)
 8002282:	f004 f91e 	bl	80064c2 <HAL_GPIO_WritePin>
			maxDistance[1] = Sensors[3] + 2;
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <calibrateMachine+0x1a4>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fc70 	bl	8000b74 <__addsf3>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <calibrateMachine+0x1b8>)
 800229a:	605a      	str	r2, [r3, #4]
			calState = RIGHT;
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <calibrateMachine+0x1a0>)
 800229e:	2202      	movs	r2, #2
 80022a0:	601a      	str	r2, [r3, #0]
		}
		break;
 80022a2:	e045      	b.n	8002330 <calibrateMachine+0x190>
	case RIGHT:
		intUartSend((Sensors[1]));
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <calibrateMachine+0x1a4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fbf5 	bl	8001a98 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022b4:	4824      	ldr	r0, [pc, #144]	; (8002348 <calibrateMachine+0x1a8>)
 80022b6:	f004 f904 	bl	80064c2 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <calibrateMachine+0x1ac>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d138      	bne.n	8002334 <calibrateMachine+0x194>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <calibrateMachine+0x1a8>)
 80022ca:	f004 f8fa 	bl	80064c2 <HAL_GPIO_WritePin>
			maxDistance[2] = Sensors[1] + 2;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <calibrateMachine+0x1a4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fc4c 	bl	8000b74 <__addsf3>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <calibrateMachine+0x1b8>)
 80022e2:	609a      	str	r2, [r3, #8]
			calState = FORWARD;
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <calibrateMachine+0x1a0>)
 80022e6:	2203      	movs	r2, #3
 80022e8:	601a      	str	r2, [r3, #0]
		}
		break;
 80022ea:	e023      	b.n	8002334 <calibrateMachine+0x194>
	case FORWARD:
		intUartSend((Sensors[2]));
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <calibrateMachine+0x1a4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fbd1 	bl	8001a98 <intUartSend>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fc:	4812      	ldr	r0, [pc, #72]	; (8002348 <calibrateMachine+0x1a8>)
 80022fe:	f004 f8e0 	bl	80064c2 <HAL_GPIO_WritePin>
		if (btns[0].flag == 1) {
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <calibrateMachine+0x1ac>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d116      	bne.n	8002338 <calibrateMachine+0x198>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <calibrateMachine+0x1a8>)
 8002312:	f004 f8d6 	bl	80064c2 <HAL_GPIO_WritePin>
			maxDistance[0] = Sensors[2];
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <calibrateMachine+0x1a4>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <calibrateMachine+0x1b8>)
 800231c:	6013      	str	r3, [r2, #0]
			mainState = SETUP;
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <calibrateMachine+0x1bc>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
			calState = CENTER;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <calibrateMachine+0x1a0>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
		}
		break;
 800232a:	e005      	b.n	8002338 <calibrateMachine+0x198>
		break;
 800232c:	bf00      	nop
 800232e:	e004      	b.n	800233a <calibrateMachine+0x19a>
		break;
 8002330:	bf00      	nop
 8002332:	e002      	b.n	800233a <calibrateMachine+0x19a>
		break;
 8002334:	bf00      	nop
 8002336:	e000      	b.n	800233a <calibrateMachine+0x19a>
		break;
 8002338:	bf00      	nop
	}
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20002330 	.word	0x20002330
 8002344:	20002300 	.word	0x20002300
 8002348:	40011000 	.word	0x40011000
 800234c:	20002360 	.word	0x20002360
 8002350:	20002328 	.word	0x20002328
 8002354:	2000232c 	.word	0x2000232c
 8002358:	20002390 	.word	0x20002390
 800235c:	2000239c 	.word	0x2000239c

08002360 <robotMachine>:

void robotMachine() {
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	af00      	add	r7, sp, #0
	switch (robotState) {
 8002364:	4bb5      	ldr	r3, [pc, #724]	; (800263c <robotMachine+0x2dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	f000 8183 	beq.w	8002674 <robotMachine+0x314>
 800236e:	2b02      	cmp	r3, #2
 8002370:	f300 8193 	bgt.w	800269a <robotMachine+0x33a>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <robotMachine+0x20>
 8002378:	2b01      	cmp	r3, #1
 800237a:	f000 8125 	beq.w	80025c8 <robotMachine+0x268>
			robotState = READING;
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
	}
}
 800237e:	e18c      	b.n	800269a <robotMachine+0x33a>
		TX_BUFFER[0] = 'X';
 8002380:	4baf      	ldr	r3, [pc, #700]	; (8002640 <robotMachine+0x2e0>)
 8002382:	2258      	movs	r2, #88	; 0x58
 8002384:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = actual.x + '0';
 8002386:	4baf      	ldr	r3, [pc, #700]	; (8002644 <robotMachine+0x2e4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3330      	adds	r3, #48	; 0x30
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4bab      	ldr	r3, [pc, #684]	; (8002640 <robotMachine+0x2e0>)
 8002392:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002394:	4baa      	ldr	r3, [pc, #680]	; (8002640 <robotMachine+0x2e0>)
 8002396:	220a      	movs	r2, #10
 8002398:	709a      	strb	r2, [r3, #2]
		TX_BUFFER[3] = 'Y';
 800239a:	4ba9      	ldr	r3, [pc, #676]	; (8002640 <robotMachine+0x2e0>)
 800239c:	2259      	movs	r2, #89	; 0x59
 800239e:	70da      	strb	r2, [r3, #3]
		TX_BUFFER[4] = actual.y + '0';
 80023a0:	4ba8      	ldr	r3, [pc, #672]	; (8002644 <robotMachine+0x2e4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3330      	adds	r3, #48	; 0x30
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4ba5      	ldr	r3, [pc, #660]	; (8002640 <robotMachine+0x2e0>)
 80023ac:	711a      	strb	r2, [r3, #4]
		TX_BUFFER[5] = '\n';
 80023ae:	4ba4      	ldr	r3, [pc, #656]	; (8002640 <robotMachine+0x2e0>)
 80023b0:	220a      	movs	r2, #10
 80023b2:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 6, 100);
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	2206      	movs	r2, #6
 80023b8:	49a1      	ldr	r1, [pc, #644]	; (8002640 <robotMachine+0x2e0>)
 80023ba:	48a3      	ldr	r0, [pc, #652]	; (8002648 <robotMachine+0x2e8>)
 80023bc:	f005 fdf9 	bl	8007fb2 <HAL_UART_Transmit>
		Map[actual.x][actual.y].visitado++;
 80023c0:	4ba0      	ldr	r3, [pc, #640]	; (8002644 <robotMachine+0x2e4>)
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	4b9f      	ldr	r3, [pc, #636]	; (8002644 <robotMachine+0x2e4>)
 80023c6:	6858      	ldr	r0, [r3, #4]
 80023c8:	4ca0      	ldr	r4, [pc, #640]	; (800264c <robotMachine+0x2ec>)
 80023ca:	4602      	mov	r2, r0
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	1a12      	subs	r2, r2, r0
 80023d0:	0093      	lsls	r3, r2, #2
 80023d2:	461a      	mov	r2, r3
 80023d4:	460b      	mov	r3, r1
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a5b      	subs	r3, r3, r1
 80023da:	019b      	lsls	r3, r3, #6
 80023dc:	4413      	add	r3, r2
 80023de:	4423      	add	r3, r4
 80023e0:	3310      	adds	r3, #16
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5c      	adds	r4, r3, #1
 80023e6:	4d99      	ldr	r5, [pc, #612]	; (800264c <robotMachine+0x2ec>)
 80023e8:	4602      	mov	r2, r0
 80023ea:	00d2      	lsls	r2, r2, #3
 80023ec:	1a12      	subs	r2, r2, r0
 80023ee:	0093      	lsls	r3, r2, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	460b      	mov	r3, r1
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	1a5b      	subs	r3, r3, r1
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	4413      	add	r3, r2
 80023fc:	442b      	add	r3, r5
 80023fe:	3310      	adds	r3, #16
 8002400:	601c      	str	r4, [r3, #0]
		if (Map[actual.x][actual.y].visitado == 1) {
 8002402:	4b90      	ldr	r3, [pc, #576]	; (8002644 <robotMachine+0x2e4>)
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <robotMachine+0x2e4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4890      	ldr	r0, [pc, #576]	; (800264c <robotMachine+0x2ec>)
 800240c:	461a      	mov	r2, r3
 800240e:	00d2      	lsls	r2, r2, #3
 8002410:	1ad2      	subs	r2, r2, r3
 8002412:	0093      	lsls	r3, r2, #2
 8002414:	461a      	mov	r2, r3
 8002416:	460b      	mov	r3, r1
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	4413      	add	r3, r2
 8002420:	4403      	add	r3, r0
 8002422:	3310      	adds	r3, #16
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d136      	bne.n	8002498 <robotMachine+0x138>
			runMotor(OFF, MOTOR_A);
 800242a:	2100      	movs	r1, #0
 800242c:	2005      	movs	r0, #5
 800242e:	f001 f8a9 	bl	8003584 <runMotor>
			runMotor(OFF, MOTOR_B);
 8002432:	2101      	movs	r1, #1
 8002434:	2005      	movs	r0, #5
 8002436:	f001 f8a5 	bl	8003584 <runMotor>
			CreateNode(&Map[actual.x][actual.y], Sensors, direcciones,
 800243a:	4b82      	ldr	r3, [pc, #520]	; (8002644 <robotMachine+0x2e4>)
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	4b81      	ldr	r3, [pc, #516]	; (8002644 <robotMachine+0x2e4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	00d2      	lsls	r2, r2, #3
 8002446:	1ad2      	subs	r2, r2, r3
 8002448:	0093      	lsls	r3, r2, #2
 800244a:	461a      	mov	r2, r3
 800244c:	460b      	mov	r3, r1
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a5b      	subs	r3, r3, r1
 8002452:	019b      	lsls	r3, r3, #6
 8002454:	4413      	add	r3, r2
 8002456:	4a7d      	ldr	r2, [pc, #500]	; (800264c <robotMachine+0x2ec>)
 8002458:	1898      	adds	r0, r3, r2
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <robotMachine+0x2f0>)
 800245c:	4a7d      	ldr	r2, [pc, #500]	; (8002654 <robotMachine+0x2f4>)
 800245e:	497e      	ldr	r1, [pc, #504]	; (8002658 <robotMachine+0x2f8>)
 8002460:	f001 fd36 	bl	8003ed0 <CreateNode>
			if (q == 1) {
 8002464:	4b7d      	ldr	r3, [pc, #500]	; (800265c <robotMachine+0x2fc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d115      	bne.n	8002498 <robotMachine+0x138>
				Map[actual.x][actual.y].Lados[direcciones[ATRAS]] = 1;
 800246c:	4b75      	ldr	r3, [pc, #468]	; (8002644 <robotMachine+0x2e4>)
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	4b74      	ldr	r3, [pc, #464]	; (8002644 <robotMachine+0x2e4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a77      	ldr	r2, [pc, #476]	; (8002654 <robotMachine+0x2f4>)
 8002476:	6890      	ldr	r0, [r2, #8]
 8002478:	4c74      	ldr	r4, [pc, #464]	; (800264c <robotMachine+0x2ec>)
 800247a:	461a      	mov	r2, r3
 800247c:	00d2      	lsls	r2, r2, #3
 800247e:	1ad2      	subs	r2, r2, r3
 8002480:	460b      	mov	r3, r1
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	1a5b      	subs	r3, r3, r1
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	4403      	add	r3, r0
 800248c:	2201      	movs	r2, #1
 800248e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
				q = 0;
 8002492:	4b72      	ldr	r3, [pc, #456]	; (800265c <robotMachine+0x2fc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <robotMachine+0x2e4>)
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	4b69      	ldr	r3, [pc, #420]	; (8002644 <robotMachine+0x2e4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	486a      	ldr	r0, [pc, #424]	; (800264c <robotMachine+0x2ec>)
 80024a2:	461a      	mov	r2, r3
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	0093      	lsls	r3, r2, #2
 80024aa:	461a      	mov	r2, r3
 80024ac:	460b      	mov	r3, r1
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a5b      	subs	r3, r3, r1
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	4413      	add	r3, r2
 80024b6:	4403      	add	r3, r0
 80024b8:	330c      	adds	r3, #12
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fc0d 	bl	8000cdc <__aeabi_i2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fae7 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 80024ca:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <robotMachine+0x2e4>)
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <robotMachine+0x2e4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	485e      	ldr	r0, [pc, #376]	; (800264c <robotMachine+0x2ec>)
 80024d4:	461a      	mov	r2, r3
 80024d6:	00d2      	lsls	r2, r2, #3
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	0093      	lsls	r3, r2, #2
 80024dc:	461a      	mov	r2, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	1a5b      	subs	r3, r3, r1
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	4413      	add	r3, r2
 80024e8:	4403      	add	r3, r0
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fbf5 	bl	8000cdc <__aeabi_i2f>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff facf 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 80024fa:	4b52      	ldr	r3, [pc, #328]	; (8002644 <robotMachine+0x2e4>)
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <robotMachine+0x2e4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4852      	ldr	r0, [pc, #328]	; (800264c <robotMachine+0x2ec>)
 8002504:	461a      	mov	r2, r3
 8002506:	00d2      	lsls	r2, r2, #3
 8002508:	1ad2      	subs	r2, r2, r3
 800250a:	0093      	lsls	r3, r2, #2
 800250c:	461a      	mov	r2, r3
 800250e:	460b      	mov	r3, r1
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a5b      	subs	r3, r3, r1
 8002514:	019b      	lsls	r3, r3, #6
 8002516:	4413      	add	r3, r2
 8002518:	4403      	add	r3, r0
 800251a:	3304      	adds	r3, #4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fbdc 	bl	8000cdc <__aeabi_i2f>
 8002524:	4603      	mov	r3, r0
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fab6 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 800252c:	4b45      	ldr	r3, [pc, #276]	; (8002644 <robotMachine+0x2e4>)
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <robotMachine+0x2e4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4845      	ldr	r0, [pc, #276]	; (800264c <robotMachine+0x2ec>)
 8002536:	461a      	mov	r2, r3
 8002538:	00d2      	lsls	r2, r2, #3
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	0093      	lsls	r3, r2, #2
 800253e:	461a      	mov	r2, r3
 8002540:	460b      	mov	r3, r1
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1a5b      	subs	r3, r3, r1
 8002546:	019b      	lsls	r3, r3, #6
 8002548:	4413      	add	r3, r2
 800254a:	4403      	add	r3, r0
 800254c:	3308      	adds	r3, #8
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fbc3 	bl	8000cdc <__aeabi_i2f>
 8002556:	4603      	mov	r3, r0
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fa9d 	bl	8001a98 <intUartSend>
		valueCNY = NEGRO;			//Sensors[0];
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <robotMachine+0x300>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]
		if (valueCNY == BLANCO) {
 8002564:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <robotMachine+0x300>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d116      	bne.n	800259a <robotMachine+0x23a>
			Map[actual.x][actual.y].final = 1;
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <robotMachine+0x2e4>)
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <robotMachine+0x2e4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4835      	ldr	r0, [pc, #212]	; (800264c <robotMachine+0x2ec>)
 8002576:	461a      	mov	r2, r3
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	1ad2      	subs	r2, r2, r3
 800257c:	0093      	lsls	r3, r2, #2
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a5b      	subs	r3, r3, r1
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	4413      	add	r3, r2
 800258a:	4403      	add	r3, r0
 800258c:	3314      	adds	r3, #20
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
			finishFlag = 1;
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <robotMachine+0x304>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
		break;
 8002598:	e07f      	b.n	800269a <robotMachine+0x33a>
			Map[actual.x][actual.y].final = 0;
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <robotMachine+0x2e4>)
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <robotMachine+0x2e4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	482a      	ldr	r0, [pc, #168]	; (800264c <robotMachine+0x2ec>)
 80025a4:	461a      	mov	r2, r3
 80025a6:	00d2      	lsls	r2, r2, #3
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	0093      	lsls	r3, r2, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a5b      	subs	r3, r3, r1
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	4413      	add	r3, r2
 80025b8:	4403      	add	r3, r0
 80025ba:	3314      	adds	r3, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
			robotState = CHOOSING;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <robotMachine+0x2dc>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
		break;
 80025c6:	e068      	b.n	800269a <robotMachine+0x33a>
		movimiento = ChooseNextNode(actual.x, actual.y);
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <robotMachine+0x2e4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <robotMachine+0x2e4>)
 80025ce:	6852      	ldr	r2, [r2, #4]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f99e 	bl	8002914 <ChooseNextNode>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a23      	ldr	r2, [pc, #140]	; (8002668 <robotMachine+0x308>)
 80025dc:	6013      	str	r3, [r2, #0]
		TX_BUFFER[0] = 'M';
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <robotMachine+0x2e0>)
 80025e0:	224d      	movs	r2, #77	; 0x4d
 80025e2:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = movimiento + '0';
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <robotMachine+0x308>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3330      	adds	r3, #48	; 0x30
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <robotMachine+0x2e0>)
 80025f0:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <robotMachine+0x2e0>)
 80025f4:	220a      	movs	r2, #10
 80025f6:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80025f8:	2364      	movs	r3, #100	; 0x64
 80025fa:	2203      	movs	r2, #3
 80025fc:	4910      	ldr	r1, [pc, #64]	; (8002640 <robotMachine+0x2e0>)
 80025fe:	4812      	ldr	r0, [pc, #72]	; (8002648 <robotMachine+0x2e8>)
 8002600:	f005 fcd7 	bl	8007fb2 <HAL_UART_Transmit>
		TX_BUFFER[0] = '*';
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <robotMachine+0x2e0>)
 8002606:	222a      	movs	r2, #42	; 0x2a
 8002608:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '*';
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <robotMachine+0x2e0>)
 800260c:	222a      	movs	r2, #42	; 0x2a
 800260e:	705a      	strb	r2, [r3, #1]
		TX_BUFFER[2] = '\n';
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <robotMachine+0x2e0>)
 8002612:	220a      	movs	r2, #10
 8002614:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 8002616:	2364      	movs	r3, #100	; 0x64
 8002618:	2203      	movs	r2, #3
 800261a:	4909      	ldr	r1, [pc, #36]	; (8002640 <robotMachine+0x2e0>)
 800261c:	480a      	ldr	r0, [pc, #40]	; (8002648 <robotMachine+0x2e8>)
 800261e:	f005 fcc8 	bl	8007fb2 <HAL_UART_Transmit>
		movimientoFlag = 0;
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <robotMachine+0x30c>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
		ticksNow = HAL_GetTick();
 8002628:	f002 fcde 	bl	8004fe8 <HAL_GetTick>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <robotMachine+0x310>)
 8002632:	601a      	str	r2, [r3, #0]
		robotState = MOVING;
 8002634:	4b01      	ldr	r3, [pc, #4]	; (800263c <robotMachine+0x2dc>)
 8002636:	2202      	movs	r2, #2
 8002638:	601a      	str	r2, [r3, #0]
		break;
 800263a:	e02e      	b.n	800269a <robotMachine+0x33a>
 800263c:	200023a0 	.word	0x200023a0
 8002640:	2000233c 	.word	0x2000233c
 8002644:	2000248c 	.word	0x2000248c
 8002648:	200002bc 	.word	0x200002bc
 800264c:	2000249c 	.word	0x2000249c
 8002650:	20002390 	.word	0x20002390
 8002654:	20002310 	.word	0x20002310
 8002658:	20002300 	.word	0x20002300
 800265c:	2000006c 	.word	0x2000006c
 8002660:	2000235c 	.word	0x2000235c
 8002664:	20002354 	.word	0x20002354
 8002668:	20002350 	.word	0x20002350
 800266c:	20002358 	.word	0x20002358
 8002670:	20002324 	.word	0x20002324
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267a:	4809      	ldr	r0, [pc, #36]	; (80026a0 <robotMachine+0x340>)
 800267c:	f003 ff21 	bl	80064c2 <HAL_GPIO_WritePin>
		movementMachine(movimiento);
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <robotMachine+0x344>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f001 f857 	bl	8003738 <movementMachine>
		if (movimientoFlag == 1) {
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <robotMachine+0x348>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <robotMachine+0x338>
			robotState = READING;
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <robotMachine+0x34c>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
		break;
 8002698:	bf00      	nop
}
 800269a:	bf00      	nop
 800269c:	bdb0      	pop	{r4, r5, r7, pc}
 800269e:	bf00      	nop
 80026a0:	40011000 	.word	0x40011000
 80026a4:	20002350 	.word	0x20002350
 80026a8:	20002358 	.word	0x20002358
 80026ac:	200023a0 	.word	0x200023a0

080026b0 <runDirections>:

void runDirections(char moves[100]) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	if (moves[m] == 'a') {
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <runDirections+0xac>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b61      	cmp	r3, #97	; 0x61
 80026c6:	d103      	bne.n	80026d0 <runDirections+0x20>
		movementMachine(ADELANTE);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f001 f835 	bl	8003738 <movementMachine>
 80026ce:	e026      	b.n	800271e <runDirections+0x6e>
	} else if (moves[m] == 'd') {
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <runDirections+0xac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d103      	bne.n	80026e8 <runDirections+0x38>
		movementMachine(DERECHA);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f001 f829 	bl	8003738 <movementMachine>
 80026e6:	e01a      	b.n	800271e <runDirections+0x6e>
	} else if (moves[m] == 'i') {
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <runDirections+0xac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b69      	cmp	r3, #105	; 0x69
 80026f6:	d103      	bne.n	8002700 <runDirections+0x50>
		movementMachine(IZQUIERDA);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f001 f81d 	bl	8003738 <movementMachine>
 80026fe:	e00e      	b.n	800271e <runDirections+0x6e>
	} else if (moves[m] == 'o') {
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <runDirections+0xac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b6f      	cmp	r3, #111	; 0x6f
 800270e:	d103      	bne.n	8002718 <runDirections+0x68>
		movementMachine(OFF);
 8002710:	2005      	movs	r0, #5
 8002712:	f001 f811 	bl	8003738 <movementMachine>
 8002716:	e002      	b.n	800271e <runDirections+0x6e>
	} else {
		movementMachine(SUPER);
 8002718:	2004      	movs	r0, #4
 800271a:	f001 f80d 	bl	8003738 <movementMachine>
	}
	TX_BUFFER[0] = moves[m];
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <runDirections+0xac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <runDirections+0xb0>)
 800272c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 800272e:	2364      	movs	r3, #100	; 0x64
 8002730:	2201      	movs	r2, #1
 8002732:	490b      	ldr	r1, [pc, #44]	; (8002760 <runDirections+0xb0>)
 8002734:	480b      	ldr	r0, [pc, #44]	; (8002764 <runDirections+0xb4>)
 8002736:	f005 fc3c 	bl	8007fb2 <HAL_UART_Transmit>
	if (movimientoFlag == 1) {
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <runDirections+0xb8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <runDirections+0xa2>
		m++;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <runDirections+0xac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <runDirections+0xac>)
 800274a:	6013      	str	r3, [r2, #0]
		movimientoFlag = 0;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <runDirections+0xb8>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
	}
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20002348 	.word	0x20002348
 8002760:	2000233c 	.word	0x2000233c
 8002764:	200002bc 	.word	0x200002bc
 8002768:	20002358 	.word	0x20002358

0800276c <addDirection>:

void addDirection(int x, int y) {
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002776:	4b60      	ldr	r3, [pc, #384]	; (80028f8 <addDirection+0x18c>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	4c60      	ldr	r4, [pc, #384]	; (80028fc <addDirection+0x190>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	461a      	mov	r2, r3
 8002782:	00d2      	lsls	r2, r2, #3
 8002784:	1ad2      	subs	r2, r2, r3
 8002786:	460b      	mov	r3, r1
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	1a5b      	subs	r3, r3, r1
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	4403      	add	r3, r0
 8002792:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00b      	beq.n	80027b2 <addDirection+0x46>
		//Map[x][y].Lados[direcciones[ADELANTE]] = 2;
		moveNode(direcciones[ADELANTE], &actual);
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <addDirection+0x18c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4958      	ldr	r1, [pc, #352]	; (8002900 <addDirection+0x194>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 fb63 	bl	8003e6c <moveNode>
		directions[directionsSize] = 'a';
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <addDirection+0x198>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a57      	ldr	r2, [pc, #348]	; (8002908 <addDirection+0x19c>)
 80027ac:	2161      	movs	r1, #97	; 0x61
 80027ae:	54d1      	strb	r1, [r2, r3]
 80027b0:	e042      	b.n	8002838 <addDirection+0xcc>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 80027b2:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <addDirection+0x18c>)
 80027b4:	6858      	ldr	r0, [r3, #4]
 80027b6:	4c51      	ldr	r4, [pc, #324]	; (80028fc <addDirection+0x190>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	461a      	mov	r2, r3
 80027be:	00d2      	lsls	r2, r2, #3
 80027c0:	1ad2      	subs	r2, r2, r3
 80027c2:	460b      	mov	r3, r1
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	1a5b      	subs	r3, r3, r1
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4413      	add	r3, r2
 80027cc:	4403      	add	r3, r0
 80027ce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d00f      	beq.n	80027f6 <addDirection+0x8a>
		//Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
		moveNode(direcciones[IZQUIERDA], &actual);
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <addDirection+0x18c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4949      	ldr	r1, [pc, #292]	; (8002900 <addDirection+0x194>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fb45 	bl	8003e6c <moveNode>
		rotateAxis(IZQUIERDA, direcciones);
 80027e2:	4945      	ldr	r1, [pc, #276]	; (80028f8 <addDirection+0x18c>)
 80027e4:	2001      	movs	r0, #1
 80027e6:	f000 ff39 	bl	800365c <rotateAxis>
		directions[directionsSize] = 'i';
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <addDirection+0x198>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a46      	ldr	r2, [pc, #280]	; (8002908 <addDirection+0x19c>)
 80027f0:	2169      	movs	r1, #105	; 0x69
 80027f2:	54d1      	strb	r1, [r2, r3]
 80027f4:	e020      	b.n	8002838 <addDirection+0xcc>
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 80027f6:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <addDirection+0x18c>)
 80027f8:	68d8      	ldr	r0, [r3, #12]
 80027fa:	4c40      	ldr	r4, [pc, #256]	; (80028fc <addDirection+0x190>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	461a      	mov	r2, r3
 8002802:	00d2      	lsls	r2, r2, #3
 8002804:	1ad2      	subs	r2, r2, r3
 8002806:	460b      	mov	r3, r1
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a5b      	subs	r3, r3, r1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	4403      	add	r3, r0
 8002812:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d00e      	beq.n	8002838 <addDirection+0xcc>
		//Map[x][y].Lados[direcciones[DERECHA]] = 2;
		moveNode(direcciones[DERECHA], &actual);
 800281a:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <addDirection+0x18c>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4938      	ldr	r1, [pc, #224]	; (8002900 <addDirection+0x194>)
 8002820:	4618      	mov	r0, r3
 8002822:	f001 fb23 	bl	8003e6c <moveNode>
		rotateAxis(DERECHA, direcciones);
 8002826:	4934      	ldr	r1, [pc, #208]	; (80028f8 <addDirection+0x18c>)
 8002828:	2003      	movs	r0, #3
 800282a:	f000 ff17 	bl	800365c <rotateAxis>
		directions[directionsSize] = 'd';
 800282e:	4b35      	ldr	r3, [pc, #212]	; (8002904 <addDirection+0x198>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a35      	ldr	r2, [pc, #212]	; (8002908 <addDirection+0x19c>)
 8002834:	2164      	movs	r1, #100	; 0x64
 8002836:	54d1      	strb	r1, [r2, r3]
	}
	intUartSend(Map[x][y].Lados[direcciones[ADELANTE]]);
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <addDirection+0x18c>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	4c2f      	ldr	r4, [pc, #188]	; (80028fc <addDirection+0x190>)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	00d2      	lsls	r2, r2, #3
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	460b      	mov	r3, r1
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a5b      	subs	r3, r3, r1
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4413      	add	r3, r2
 8002852:	4403      	add	r3, r0
 8002854:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fa3f 	bl	8000cdc <__aeabi_i2f>
 800285e:	4603      	mov	r3, r0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f919 	bl	8001a98 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[IZQUIERDA]]);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <addDirection+0x18c>)
 8002868:	6858      	ldr	r0, [r3, #4]
 800286a:	4c24      	ldr	r4, [pc, #144]	; (80028fc <addDirection+0x190>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	461a      	mov	r2, r3
 8002872:	00d2      	lsls	r2, r2, #3
 8002874:	1ad2      	subs	r2, r2, r3
 8002876:	460b      	mov	r3, r1
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a5b      	subs	r3, r3, r1
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	4403      	add	r3, r0
 8002882:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fa28 	bl	8000cdc <__aeabi_i2f>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f902 	bl	8001a98 <intUartSend>
	intUartSend(Map[x][y].Lados[direcciones[DERECHA]]);
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <addDirection+0x18c>)
 8002896:	68d8      	ldr	r0, [r3, #12]
 8002898:	4c18      	ldr	r4, [pc, #96]	; (80028fc <addDirection+0x190>)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	00d2      	lsls	r2, r2, #3
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a5b      	subs	r3, r3, r1
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	4403      	add	r3, r0
 80028b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fa11 	bl	8000cdc <__aeabi_i2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f8eb 	bl	8001a98 <intUartSend>
	TX_BUFFER[0] = 'D';
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <addDirection+0x1a0>)
 80028c4:	2244      	movs	r2, #68	; 0x44
 80028c6:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = directions[directionsSize];
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <addDirection+0x198>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <addDirection+0x19c>)
 80028ce:	5cd2      	ldrb	r2, [r2, r3]
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <addDirection+0x1a0>)
 80028d2:	705a      	strb	r2, [r3, #1]
	TX_BUFFER[2] = '\n';
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <addDirection+0x1a0>)
 80028d6:	220a      	movs	r2, #10
 80028d8:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart3, TX_BUFFER, 3, 100);
 80028da:	2364      	movs	r3, #100	; 0x64
 80028dc:	2203      	movs	r2, #3
 80028de:	490b      	ldr	r1, [pc, #44]	; (800290c <addDirection+0x1a0>)
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <addDirection+0x1a4>)
 80028e2:	f005 fb66 	bl	8007fb2 <HAL_UART_Transmit>
	directionsSize++;
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <addDirection+0x198>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a05      	ldr	r2, [pc, #20]	; (8002904 <addDirection+0x198>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	20002310 	.word	0x20002310
 80028fc:	2000249c 	.word	0x2000249c
 8002900:	2000248c 	.word	0x2000248c
 8002904:	2000234c 	.word	0x2000234c
 8002908:	200023a4 	.word	0x200023a4
 800290c:	2000233c 	.word	0x2000233c
 8002910:	200002bc 	.word	0x200002bc

08002914 <ChooseNextNode>:

int ChooseNextNode(int x, int y) {
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] == 0) {
 800291e:	4bb2      	ldr	r3, [pc, #712]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	4cb2      	ldr	r4, [pc, #712]	; (8002bec <ChooseNextNode+0x2d8>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	461a      	mov	r2, r3
 800292a:	00d2      	lsls	r2, r2, #3
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	460b      	mov	r3, r1
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a5b      	subs	r3, r3, r1
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	4403      	add	r3, r0
 800293a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80b3 	bne.w	8002aaa <ChooseNextNode+0x196>
		TX_BUFFER[0] = 'A';
 8002944:	4baa      	ldr	r3, [pc, #680]	; (8002bf0 <ChooseNextNode+0x2dc>)
 8002946:	2241      	movs	r2, #65	; 0x41
 8002948:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 800294a:	4ba9      	ldr	r3, [pc, #676]	; (8002bf0 <ChooseNextNode+0x2dc>)
 800294c:	220a      	movs	r2, #10
 800294e:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002950:	2364      	movs	r3, #100	; 0x64
 8002952:	2202      	movs	r2, #2
 8002954:	49a6      	ldr	r1, [pc, #664]	; (8002bf0 <ChooseNextNode+0x2dc>)
 8002956:	48a7      	ldr	r0, [pc, #668]	; (8002bf4 <ChooseNextNode+0x2e0>)
 8002958:	f005 fb2b 	bl	8007fb2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[ADELANTE]] = 2;
 800295c:	4ba2      	ldr	r3, [pc, #648]	; (8002be8 <ChooseNextNode+0x2d4>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4ca2      	ldr	r4, [pc, #648]	; (8002bec <ChooseNextNode+0x2d8>)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	00d2      	lsls	r2, r2, #3
 800296a:	1ad2      	subs	r2, r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	1a5b      	subs	r3, r3, r1
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	4413      	add	r3, r2
 8002976:	4403      	add	r3, r0
 8002978:	2202      	movs	r2, #2
 800297a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(5000);
		 }*/
		if (Map[x][y].Lados[direcciones[ATRAS]] != 1)
 800297e:	4b9a      	ldr	r3, [pc, #616]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002980:	6898      	ldr	r0, [r3, #8]
 8002982:	4c9a      	ldr	r4, [pc, #616]	; (8002bec <ChooseNextNode+0x2d8>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	461a      	mov	r2, r3
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	1ad2      	subs	r2, r2, r3
 800298e:	460b      	mov	r3, r1
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a5b      	subs	r3, r3, r1
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	4403      	add	r3, r0
 800299a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d010      	beq.n	80029c4 <ChooseNextNode+0xb0>
			Map[x][y].Lados[direcciones[ATRAS]] = 2;
 80029a2:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <ChooseNextNode+0x2d4>)
 80029a4:	6898      	ldr	r0, [r3, #8]
 80029a6:	4c91      	ldr	r4, [pc, #580]	; (8002bec <ChooseNextNode+0x2d8>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	461a      	mov	r2, r3
 80029ae:	00d2      	lsls	r2, r2, #3
 80029b0:	1ad2      	subs	r2, r2, r3
 80029b2:	460b      	mov	r3, r1
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	1a5b      	subs	r3, r3, r1
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	4413      	add	r3, r2
 80029bc:	4403      	add	r3, r0
 80029be:	2202      	movs	r2, #2
 80029c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		last.x = actual.x;
 80029c4:	4b8c      	ldr	r3, [pc, #560]	; (8002bf8 <ChooseNextNode+0x2e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a8c      	ldr	r2, [pc, #560]	; (8002bfc <ChooseNextNode+0x2e8>)
 80029ca:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 80029cc:	4b8a      	ldr	r3, [pc, #552]	; (8002bf8 <ChooseNextNode+0x2e4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <ChooseNextNode+0x2e8>)
 80029d2:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 80029d4:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <ChooseNextNode+0x2e4>)
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	4b87      	ldr	r3, [pc, #540]	; (8002bf8 <ChooseNextNode+0x2e4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4883      	ldr	r0, [pc, #524]	; (8002bec <ChooseNextNode+0x2d8>)
 80029de:	461a      	mov	r2, r3
 80029e0:	00d2      	lsls	r2, r2, #3
 80029e2:	1ad2      	subs	r2, r2, r3
 80029e4:	0093      	lsls	r3, r2, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	460b      	mov	r3, r1
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a5b      	subs	r3, r3, r1
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	4413      	add	r3, r2
 80029f2:	4403      	add	r3, r0
 80029f4:	330c      	adds	r3, #12
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe f96f 	bl	8000cdc <__aeabi_i2f>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f849 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002a06:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4877      	ldr	r0, [pc, #476]	; (8002bec <ChooseNextNode+0x2d8>)
 8002a10:	461a      	mov	r2, r3
 8002a12:	00d2      	lsls	r2, r2, #3
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	0093      	lsls	r3, r2, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	1a5b      	subs	r3, r3, r1
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	4413      	add	r3, r2
 8002a24:	4403      	add	r3, r0
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f957 	bl	8000cdc <__aeabi_i2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f831 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	486b      	ldr	r0, [pc, #428]	; (8002bec <ChooseNextNode+0x2d8>)
 8002a40:	461a      	mov	r2, r3
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	1ad2      	subs	r2, r2, r3
 8002a46:	0093      	lsls	r3, r2, #2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a5b      	subs	r3, r3, r1
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	4413      	add	r3, r2
 8002a54:	4403      	add	r3, r0
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f93e 	bl	8000cdc <__aeabi_i2f>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f818 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002a68:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	4b62      	ldr	r3, [pc, #392]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	485e      	ldr	r0, [pc, #376]	; (8002bec <ChooseNextNode+0x2d8>)
 8002a72:	461a      	mov	r2, r3
 8002a74:	00d2      	lsls	r2, r2, #3
 8002a76:	1ad2      	subs	r2, r2, r3
 8002a78:	0093      	lsls	r3, r2, #2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a5b      	subs	r3, r3, r1
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	4413      	add	r3, r2
 8002a86:	4403      	add	r3, r0
 8002a88:	3308      	adds	r3, #8
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f925 	bl	8000cdc <__aeabi_i2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe ffff 	bl	8001a98 <intUartSend>
		moveNode(direcciones[ADELANTE], &actual);
 8002a9a:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4956      	ldr	r1, [pc, #344]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f9e3 	bl	8003e6c <moveNode>
		return ADELANTE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e162      	b.n	8002d70 <ChooseNextNode+0x45c>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] == 0) {
 8002aaa:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002aac:	6858      	ldr	r0, [r3, #4]
 8002aae:	4c4f      	ldr	r4, [pc, #316]	; (8002bec <ChooseNextNode+0x2d8>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	00d2      	lsls	r2, r2, #3
 8002ab8:	1ad2      	subs	r2, r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a5b      	subs	r3, r3, r1
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4403      	add	r3, r0
 8002ac6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8098 	bne.w	8002c00 <ChooseNextNode+0x2ec>
		TX_BUFFER[0] = 'I';
 8002ad0:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <ChooseNextNode+0x2dc>)
 8002ad2:	2249      	movs	r2, #73	; 0x49
 8002ad4:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <ChooseNextNode+0x2dc>)
 8002ad8:	220a      	movs	r2, #10
 8002ada:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002adc:	2364      	movs	r3, #100	; 0x64
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4943      	ldr	r1, [pc, #268]	; (8002bf0 <ChooseNextNode+0x2dc>)
 8002ae2:	4844      	ldr	r0, [pc, #272]	; (8002bf4 <ChooseNextNode+0x2e0>)
 8002ae4:	f005 fa65 	bl	8007fb2 <HAL_UART_Transmit>
		Map[x][y].Lados[direcciones[IZQUIERDA]] = 2;
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002aea:	6858      	ldr	r0, [r3, #4]
 8002aec:	4c3f      	ldr	r4, [pc, #252]	; (8002bec <ChooseNextNode+0x2d8>)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	00d2      	lsls	r2, r2, #3
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	460b      	mov	r3, r1
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a5b      	subs	r3, r3, r1
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	4413      	add	r3, r2
 8002b02:	4403      	add	r3, r0
 8002b04:	2202      	movs	r2, #2
 8002b06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		 intUartSend(5000);
		 }*/
		/*if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
		 Map[x][y].Lados[direcciones[ATRAS]] = 2;
		 }*/
		last.x = actual.x;
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <ChooseNextNode+0x2e8>)
 8002b10:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <ChooseNextNode+0x2e8>)
 8002b18:	6053      	str	r3, [r2, #4]
		intUartSend(Map[x][y].Lados[DERECHA]);
 8002b1a:	4834      	ldr	r0, [pc, #208]	; (8002bec <ChooseNextNode+0x2d8>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	461a      	mov	r2, r3
 8002b22:	00d2      	lsls	r2, r2, #3
 8002b24:	1ad2      	subs	r2, r2, r3
 8002b26:	0093      	lsls	r3, r2, #2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a5b      	subs	r3, r3, r1
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	4413      	add	r3, r2
 8002b34:	4403      	add	r3, r0
 8002b36:	330c      	adds	r3, #12
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f8ce 	bl	8000cdc <__aeabi_i2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ffa8 	bl	8001a98 <intUartSend>
		intUartSend(Map[x][y].Lados[ADELANTE]);
 8002b48:	4828      	ldr	r0, [pc, #160]	; (8002bec <ChooseNextNode+0x2d8>)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	00d2      	lsls	r2, r2, #3
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	0093      	lsls	r3, r2, #2
 8002b56:	461a      	mov	r2, r3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a5b      	subs	r3, r3, r1
 8002b5e:	019b      	lsls	r3, r3, #6
 8002b60:	4413      	add	r3, r2
 8002b62:	4403      	add	r3, r0
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f8b8 	bl	8000cdc <__aeabi_i2f>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe ff92 	bl	8001a98 <intUartSend>
		intUartSend(Map[x][y].Lados[IZQUIERDA]);
 8002b74:	481d      	ldr	r0, [pc, #116]	; (8002bec <ChooseNextNode+0x2d8>)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	00d2      	lsls	r2, r2, #3
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	0093      	lsls	r3, r2, #2
 8002b82:	461a      	mov	r2, r3
 8002b84:	460b      	mov	r3, r1
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a5b      	subs	r3, r3, r1
 8002b8a:	019b      	lsls	r3, r3, #6
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4403      	add	r3, r0
 8002b90:	3304      	adds	r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f8a1 	bl	8000cdc <__aeabi_i2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe ff7b 	bl	8001a98 <intUartSend>
		intUartSend(Map[x][y].Lados[ATRAS]);
 8002ba2:	4812      	ldr	r0, [pc, #72]	; (8002bec <ChooseNextNode+0x2d8>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	00d2      	lsls	r2, r2, #3
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	0093      	lsls	r3, r2, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a5b      	subs	r3, r3, r1
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	4413      	add	r3, r2
 8002bbc:	4403      	add	r3, r0
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe f88a 	bl	8000cdc <__aeabi_i2f>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe ff64 	bl	8001a98 <intUartSend>
		moveNode(direcciones[IZQUIERDA], &actual);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <ChooseNextNode+0x2e4>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 f948 	bl	8003e6c <moveNode>
		rotateAxis(IZQUIERDA, direcciones);
 8002bdc:	4902      	ldr	r1, [pc, #8]	; (8002be8 <ChooseNextNode+0x2d4>)
 8002bde:	2001      	movs	r0, #1
 8002be0:	f000 fd3c 	bl	800365c <rotateAxis>
		return IZQUIERDA;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0c3      	b.n	8002d70 <ChooseNextNode+0x45c>
 8002be8:	20002310 	.word	0x20002310
 8002bec:	2000249c 	.word	0x2000249c
 8002bf0:	2000233c 	.word	0x2000233c
 8002bf4:	200002bc 	.word	0x200002bc
 8002bf8:	2000248c 	.word	0x2000248c
 8002bfc:	20002494 	.word	0x20002494
	} else if (Map[x][y].Lados[direcciones[DERECHA]] == 0) {
 8002c00:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <ChooseNextNode+0x464>)
 8002c02:	68d8      	ldr	r0, [r3, #12]
 8002c04:	4c5d      	ldr	r4, [pc, #372]	; (8002d7c <ChooseNextNode+0x468>)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	00d2      	lsls	r2, r2, #3
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	460b      	mov	r3, r1
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a5b      	subs	r3, r3, r1
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	4403      	add	r3, r0
 8002c1c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8094 	bne.w	8002d4e <ChooseNextNode+0x43a>
		TX_BUFFER[0] = 'D';
 8002c26:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <ChooseNextNode+0x46c>)
 8002c28:	2244      	movs	r2, #68	; 0x44
 8002c2a:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <ChooseNextNode+0x46c>)
 8002c2e:	220a      	movs	r2, #10
 8002c30:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002c32:	2364      	movs	r3, #100	; 0x64
 8002c34:	2202      	movs	r2, #2
 8002c36:	4952      	ldr	r1, [pc, #328]	; (8002d80 <ChooseNextNode+0x46c>)
 8002c38:	4852      	ldr	r0, [pc, #328]	; (8002d84 <ChooseNextNode+0x470>)
 8002c3a:	f005 f9ba 	bl	8007fb2 <HAL_UART_Transmit>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(5000);
		 }*/
		Map[x][y].Lados[direcciones[DERECHA]] = 2;
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <ChooseNextNode+0x464>)
 8002c40:	68d8      	ldr	r0, [r3, #12]
 8002c42:	4c4e      	ldr	r4, [pc, #312]	; (8002d7c <ChooseNextNode+0x468>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	00d2      	lsls	r2, r2, #3
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	460b      	mov	r3, r1
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a5b      	subs	r3, r3, r1
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	4403      	add	r3, r0
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		/*if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
		 intUartSend(Map[x][y].Lados[direcciones[ATRAS]]);
		 Map[x][y].Lados[direcciones[ATRAS]] = 2;
		 }*/
		last.x = actual.x;
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <ChooseNextNode+0x474>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <ChooseNextNode+0x478>)
 8002c66:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002c68:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <ChooseNextNode+0x474>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <ChooseNextNode+0x478>)
 8002c6e:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002c70:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <ChooseNextNode+0x474>)
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <ChooseNextNode+0x474>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4840      	ldr	r0, [pc, #256]	; (8002d7c <ChooseNextNode+0x468>)
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	00d2      	lsls	r2, r2, #3
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	0093      	lsls	r3, r2, #2
 8002c82:	461a      	mov	r2, r3
 8002c84:	460b      	mov	r3, r1
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a5b      	subs	r3, r3, r1
 8002c8a:	019b      	lsls	r3, r3, #6
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4403      	add	r3, r0
 8002c90:	330c      	adds	r3, #12
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe f821 	bl	8000cdc <__aeabi_i2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fefb 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <ChooseNextNode+0x474>)
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <ChooseNextNode+0x474>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4834      	ldr	r0, [pc, #208]	; (8002d7c <ChooseNextNode+0x468>)
 8002cac:	461a      	mov	r2, r3
 8002cae:	00d2      	lsls	r2, r2, #3
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	0093      	lsls	r3, r2, #2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	1a5b      	subs	r3, r3, r1
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4403      	add	r3, r0
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f809 	bl	8000cdc <__aeabi_i2f>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fee3 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <ChooseNextNode+0x474>)
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <ChooseNextNode+0x474>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4828      	ldr	r0, [pc, #160]	; (8002d7c <ChooseNextNode+0x468>)
 8002cdc:	461a      	mov	r2, r3
 8002cde:	00d2      	lsls	r2, r2, #3
 8002ce0:	1ad2      	subs	r2, r2, r3
 8002ce2:	0093      	lsls	r3, r2, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a5b      	subs	r3, r3, r1
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	4413      	add	r3, r2
 8002cf0:	4403      	add	r3, r0
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fff0 	bl	8000cdc <__aeabi_i2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe feca 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <ChooseNextNode+0x474>)
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <ChooseNextNode+0x474>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	481b      	ldr	r0, [pc, #108]	; (8002d7c <ChooseNextNode+0x468>)
 8002d0e:	461a      	mov	r2, r3
 8002d10:	00d2      	lsls	r2, r2, #3
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	0093      	lsls	r3, r2, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	460b      	mov	r3, r1
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a5b      	subs	r3, r3, r1
 8002d1e:	019b      	lsls	r3, r3, #6
 8002d20:	4413      	add	r3, r2
 8002d22:	4403      	add	r3, r0
 8002d24:	3308      	adds	r3, #8
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd ffd7 	bl	8000cdc <__aeabi_i2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe feb1 	bl	8001a98 <intUartSend>
		moveNode(direcciones[DERECHA], &actual);
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <ChooseNextNode+0x464>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4913      	ldr	r1, [pc, #76]	; (8002d88 <ChooseNextNode+0x474>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f895 	bl	8003e6c <moveNode>
		rotateAxis(DERECHA, direcciones);
 8002d42:	490d      	ldr	r1, [pc, #52]	; (8002d78 <ChooseNextNode+0x464>)
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 fc89 	bl	800365c <rotateAxis>
		return DERECHA;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e010      	b.n	8002d70 <ChooseNextNode+0x45c>
	} else {
		TX_BUFFER[0] = 'O';
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <ChooseNextNode+0x46c>)
 8002d50:	224f      	movs	r2, #79	; 0x4f
 8002d52:	701a      	strb	r2, [r3, #0]
		TX_BUFFER[1] = '\n';
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <ChooseNextNode+0x46c>)
 8002d56:	220a      	movs	r2, #10
 8002d58:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8002d5a:	2364      	movs	r3, #100	; 0x64
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <ChooseNextNode+0x46c>)
 8002d60:	4808      	ldr	r0, [pc, #32]	; (8002d84 <ChooseNextNode+0x470>)
 8002d62:	f005 f926 	bl	8007fb2 <HAL_UART_Transmit>
		return SearchAvailableNode(x, y);
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f811 	bl	8002d90 <SearchAvailableNode>
 8002d6e:	4603      	mov	r3, r0
	}

}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd90      	pop	{r4, r7, pc}
 8002d78:	20002310 	.word	0x20002310
 8002d7c:	2000249c 	.word	0x2000249c
 8002d80:	2000233c 	.word	0x2000233c
 8002d84:	200002bc 	.word	0x200002bc
 8002d88:	2000248c 	.word	0x2000248c
 8002d8c:	20002494 	.word	0x20002494

08002d90 <SearchAvailableNode>:

int SearchAvailableNode(int x, int y) {
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
	if (Map[x][y].Lados[direcciones[ADELANTE]] != 1) {
 8002d9a:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <SearchAvailableNode+0x228>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	4c87      	ldr	r4, [pc, #540]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	00d2      	lsls	r2, r2, #3
 8002da8:	1ad2      	subs	r2, r2, r3
 8002daa:	460b      	mov	r3, r1
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	1a5b      	subs	r3, r3, r1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	4413      	add	r3, r2
 8002db4:	4403      	add	r3, r0
 8002db6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d072      	beq.n	8002ea4 <SearchAvailableNode+0x114>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(4000);
		 }*/
		last.x = actual.x;
 8002dbe:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a80      	ldr	r2, [pc, #512]	; (8002fc4 <SearchAvailableNode+0x234>)
 8002dc4:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002dc6:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a7e      	ldr	r2, [pc, #504]	; (8002fc4 <SearchAvailableNode+0x234>)
 8002dcc:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002dce:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4879      	ldr	r0, [pc, #484]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002dd8:	461a      	mov	r2, r3
 8002dda:	00d2      	lsls	r2, r2, #3
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	0093      	lsls	r3, r2, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	460b      	mov	r3, r1
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a5b      	subs	r3, r3, r1
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	4413      	add	r3, r2
 8002dec:	4403      	add	r3, r0
 8002dee:	330c      	adds	r3, #12
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ff72 	bl	8000cdc <__aeabi_i2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fe4c 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	486c      	ldr	r0, [pc, #432]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	00d2      	lsls	r2, r2, #3
 8002e0e:	1ad2      	subs	r2, r2, r3
 8002e10:	0093      	lsls	r3, r2, #2
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a5b      	subs	r3, r3, r1
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4403      	add	r3, r0
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd ff5a 	bl	8000cdc <__aeabi_i2f>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fe34 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002e30:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4860      	ldr	r0, [pc, #384]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	00d2      	lsls	r2, r2, #3
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	0093      	lsls	r3, r2, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a5b      	subs	r3, r3, r1
 8002e4a:	019b      	lsls	r3, r3, #6
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4403      	add	r3, r0
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff41 	bl	8000cdc <__aeabi_i2f>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fe1b 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002e62:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4854      	ldr	r0, [pc, #336]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	00d2      	lsls	r2, r2, #3
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	0093      	lsls	r3, r2, #2
 8002e74:	461a      	mov	r2, r3
 8002e76:	460b      	mov	r3, r1
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a5b      	subs	r3, r3, r1
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	4413      	add	r3, r2
 8002e80:	4403      	add	r3, r0
 8002e82:	3308      	adds	r3, #8
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd ff28 	bl	8000cdc <__aeabi_i2f>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fe02 	bl	8001a98 <intUartSend>
		moveNode(direcciones[ADELANTE], &actual);
 8002e94:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <SearchAvailableNode+0x228>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4949      	ldr	r1, [pc, #292]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 ffe6 	bl	8003e6c <moveNode>

		return ADELANTE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e1a8      	b.n	80031f6 <SearchAvailableNode+0x466>
	} else if (Map[x][y].Lados[direcciones[IZQUIERDA]] != 1) {
 8002ea4:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <SearchAvailableNode+0x228>)
 8002ea6:	6858      	ldr	r0, [r3, #4]
 8002ea8:	4c44      	ldr	r4, [pc, #272]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	00d2      	lsls	r2, r2, #3
 8002eb2:	1ad2      	subs	r2, r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a5b      	subs	r3, r3, r1
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4403      	add	r3, r0
 8002ec0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d07f      	beq.n	8002fc8 <SearchAvailableNode+0x238>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(4000);
		 }*/
		last.x = actual.x;
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <SearchAvailableNode+0x234>)
 8002ece:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <SearchAvailableNode+0x234>)
 8002ed6:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4836      	ldr	r0, [pc, #216]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	1ad2      	subs	r2, r2, r3
 8002ee8:	0093      	lsls	r3, r2, #2
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a5b      	subs	r3, r3, r1
 8002ef2:	019b      	lsls	r3, r3, #6
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4403      	add	r3, r0
 8002ef8:	330c      	adds	r3, #12
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd feed 	bl	8000cdc <__aeabi_i2f>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fdc7 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	482a      	ldr	r0, [pc, #168]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002f14:	461a      	mov	r2, r3
 8002f16:	00d2      	lsls	r2, r2, #3
 8002f18:	1ad2      	subs	r2, r2, r3
 8002f1a:	0093      	lsls	r3, r2, #2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	460b      	mov	r3, r1
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a5b      	subs	r3, r3, r1
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	4413      	add	r3, r2
 8002f28:	4403      	add	r3, r0
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fed5 	bl	8000cdc <__aeabi_i2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fdaf 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	481e      	ldr	r0, [pc, #120]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002f44:	461a      	mov	r2, r3
 8002f46:	00d2      	lsls	r2, r2, #3
 8002f48:	1ad2      	subs	r2, r2, r3
 8002f4a:	0093      	lsls	r3, r2, #2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	460b      	mov	r3, r1
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	1a5b      	subs	r3, r3, r1
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	4413      	add	r3, r2
 8002f58:	4403      	add	r3, r0
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd febc 	bl	8000cdc <__aeabi_i2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fd96 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4811      	ldr	r0, [pc, #68]	; (8002fbc <SearchAvailableNode+0x22c>)
 8002f76:	461a      	mov	r2, r3
 8002f78:	00d2      	lsls	r2, r2, #3
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	0093      	lsls	r3, r2, #2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a5b      	subs	r3, r3, r1
 8002f86:	019b      	lsls	r3, r3, #6
 8002f88:	4413      	add	r3, r2
 8002f8a:	4403      	add	r3, r0
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fea3 	bl	8000cdc <__aeabi_i2f>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe fd7d 	bl	8001a98 <intUartSend>
		moveNode(direcciones[IZQUIERDA], &actual);
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <SearchAvailableNode+0x228>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <SearchAvailableNode+0x230>)
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 ff61 	bl	8003e6c <moveNode>

		rotateAxis(IZQUIERDA, direcciones);
 8002faa:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <SearchAvailableNode+0x228>)
 8002fac:	2001      	movs	r0, #1
 8002fae:	f000 fb55 	bl	800365c <rotateAxis>
		return IZQUIERDA;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e11f      	b.n	80031f6 <SearchAvailableNode+0x466>
 8002fb6:	bf00      	nop
 8002fb8:	20002310 	.word	0x20002310
 8002fbc:	2000249c 	.word	0x2000249c
 8002fc0:	2000248c 	.word	0x2000248c
 8002fc4:	20002494 	.word	0x20002494
	} else if (Map[x][y].Lados[direcciones[DERECHA]] != 1) {
 8002fc8:	4b8d      	ldr	r3, [pc, #564]	; (8003200 <SearchAvailableNode+0x470>)
 8002fca:	68d8      	ldr	r0, [r3, #12]
 8002fcc:	4c8d      	ldr	r4, [pc, #564]	; (8003204 <SearchAvailableNode+0x474>)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	00d2      	lsls	r2, r2, #3
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	1a5b      	subs	r3, r3, r1
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4403      	add	r3, r0
 8002fe4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d076      	beq.n	80030da <SearchAvailableNode+0x34a>
		/*if (Map[x][y].visitado > 1) {
		 EliminateNode(&Map[actual.x][actual.y], &Map[last.x][last.y],
		 direcciones[ATRAS]);
		 intUartSend(4000);
		 }*/
		last.x = actual.x;
 8002fec:	4b86      	ldr	r3, [pc, #536]	; (8003208 <SearchAvailableNode+0x478>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a86      	ldr	r2, [pc, #536]	; (800320c <SearchAvailableNode+0x47c>)
 8002ff2:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8002ff4:	4b84      	ldr	r3, [pc, #528]	; (8003208 <SearchAvailableNode+0x478>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a84      	ldr	r2, [pc, #528]	; (800320c <SearchAvailableNode+0x47c>)
 8002ffa:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 8002ffc:	4b82      	ldr	r3, [pc, #520]	; (8003208 <SearchAvailableNode+0x478>)
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	4b81      	ldr	r3, [pc, #516]	; (8003208 <SearchAvailableNode+0x478>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	487f      	ldr	r0, [pc, #508]	; (8003204 <SearchAvailableNode+0x474>)
 8003006:	461a      	mov	r2, r3
 8003008:	00d2      	lsls	r2, r2, #3
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	0093      	lsls	r3, r2, #2
 800300e:	461a      	mov	r2, r3
 8003010:	460b      	mov	r3, r1
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a5b      	subs	r3, r3, r1
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	4413      	add	r3, r2
 800301a:	4403      	add	r3, r0
 800301c:	330c      	adds	r3, #12
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fe5b 	bl	8000cdc <__aeabi_i2f>
 8003026:	4603      	mov	r3, r0
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fd35 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <SearchAvailableNode+0x478>)
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	4b75      	ldr	r3, [pc, #468]	; (8003208 <SearchAvailableNode+0x478>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4873      	ldr	r0, [pc, #460]	; (8003204 <SearchAvailableNode+0x474>)
 8003038:	461a      	mov	r2, r3
 800303a:	00d2      	lsls	r2, r2, #3
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	0093      	lsls	r3, r2, #2
 8003040:	461a      	mov	r2, r3
 8003042:	460b      	mov	r3, r1
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	1a5b      	subs	r3, r3, r1
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	4413      	add	r3, r2
 800304c:	4403      	add	r3, r0
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fe43 	bl	8000cdc <__aeabi_i2f>
 8003056:	4603      	mov	r3, r0
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fd1d 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <SearchAvailableNode+0x478>)
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	4b69      	ldr	r3, [pc, #420]	; (8003208 <SearchAvailableNode+0x478>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4867      	ldr	r0, [pc, #412]	; (8003204 <SearchAvailableNode+0x474>)
 8003068:	461a      	mov	r2, r3
 800306a:	00d2      	lsls	r2, r2, #3
 800306c:	1ad2      	subs	r2, r2, r3
 800306e:	0093      	lsls	r3, r2, #2
 8003070:	461a      	mov	r2, r3
 8003072:	460b      	mov	r3, r1
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	1a5b      	subs	r3, r3, r1
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	4413      	add	r3, r2
 800307c:	4403      	add	r3, r0
 800307e:	3304      	adds	r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fe2a 	bl	8000cdc <__aeabi_i2f>
 8003088:	4603      	mov	r3, r0
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fd04 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 8003090:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <SearchAvailableNode+0x478>)
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <SearchAvailableNode+0x478>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	485a      	ldr	r0, [pc, #360]	; (8003204 <SearchAvailableNode+0x474>)
 800309a:	461a      	mov	r2, r3
 800309c:	00d2      	lsls	r2, r2, #3
 800309e:	1ad2      	subs	r2, r2, r3
 80030a0:	0093      	lsls	r3, r2, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	1a5b      	subs	r3, r3, r1
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	4413      	add	r3, r2
 80030ae:	4403      	add	r3, r0
 80030b0:	3308      	adds	r3, #8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fe11 	bl	8000cdc <__aeabi_i2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fceb 	bl	8001a98 <intUartSend>
		moveNode(direcciones[DERECHA], &actual);
 80030c2:	4b4f      	ldr	r3, [pc, #316]	; (8003200 <SearchAvailableNode+0x470>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	4950      	ldr	r1, [pc, #320]	; (8003208 <SearchAvailableNode+0x478>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fecf 	bl	8003e6c <moveNode>
		rotateAxis(DERECHA, direcciones);
 80030ce:	494c      	ldr	r1, [pc, #304]	; (8003200 <SearchAvailableNode+0x470>)
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 fac3 	bl	800365c <rotateAxis>
		return DERECHA;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e08d      	b.n	80031f6 <SearchAvailableNode+0x466>
	} else if (Map[x][y].Lados[direcciones[ATRAS]] != 1) {
 80030da:	4b49      	ldr	r3, [pc, #292]	; (8003200 <SearchAvailableNode+0x470>)
 80030dc:	6898      	ldr	r0, [r3, #8]
 80030de:	4c49      	ldr	r4, [pc, #292]	; (8003204 <SearchAvailableNode+0x474>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	461a      	mov	r2, r3
 80030e6:	00d2      	lsls	r2, r2, #3
 80030e8:	1ad2      	subs	r2, r2, r3
 80030ea:	460b      	mov	r3, r1
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	1a5b      	subs	r3, r3, r1
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4413      	add	r3, r2
 80030f4:	4403      	add	r3, r0
 80030f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d07a      	beq.n	80031f4 <SearchAvailableNode+0x464>
		last.x = actual.x;
 80030fe:	4b42      	ldr	r3, [pc, #264]	; (8003208 <SearchAvailableNode+0x478>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a42      	ldr	r2, [pc, #264]	; (800320c <SearchAvailableNode+0x47c>)
 8003104:	6013      	str	r3, [r2, #0]
		last.y = actual.y;
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <SearchAvailableNode+0x478>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a40      	ldr	r2, [pc, #256]	; (800320c <SearchAvailableNode+0x47c>)
 800310c:	6053      	str	r3, [r2, #4]
		intUartSend(Map[actual.x][actual.y].Lados[DERECHA]);
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <SearchAvailableNode+0x478>)
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <SearchAvailableNode+0x478>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	483b      	ldr	r0, [pc, #236]	; (8003204 <SearchAvailableNode+0x474>)
 8003118:	461a      	mov	r2, r3
 800311a:	00d2      	lsls	r2, r2, #3
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	0093      	lsls	r3, r2, #2
 8003120:	461a      	mov	r2, r3
 8003122:	460b      	mov	r3, r1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a5b      	subs	r3, r3, r1
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	4413      	add	r3, r2
 800312c:	4403      	add	r3, r0
 800312e:	330c      	adds	r3, #12
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fdd2 	bl	8000cdc <__aeabi_i2f>
 8003138:	4603      	mov	r3, r0
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fcac 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ADELANTE]);
 8003140:	4b31      	ldr	r3, [pc, #196]	; (8003208 <SearchAvailableNode+0x478>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <SearchAvailableNode+0x478>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	482e      	ldr	r0, [pc, #184]	; (8003204 <SearchAvailableNode+0x474>)
 800314a:	461a      	mov	r2, r3
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	0093      	lsls	r3, r2, #2
 8003152:	461a      	mov	r2, r3
 8003154:	460b      	mov	r3, r1
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a5b      	subs	r3, r3, r1
 800315a:	019b      	lsls	r3, r3, #6
 800315c:	4413      	add	r3, r2
 800315e:	4403      	add	r3, r0
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fdba 	bl	8000cdc <__aeabi_i2f>
 8003168:	4603      	mov	r3, r0
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc94 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[IZQUIERDA]);
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <SearchAvailableNode+0x478>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <SearchAvailableNode+0x478>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4822      	ldr	r0, [pc, #136]	; (8003204 <SearchAvailableNode+0x474>)
 800317a:	461a      	mov	r2, r3
 800317c:	00d2      	lsls	r2, r2, #3
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	0093      	lsls	r3, r2, #2
 8003182:	461a      	mov	r2, r3
 8003184:	460b      	mov	r3, r1
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a5b      	subs	r3, r3, r1
 800318a:	019b      	lsls	r3, r3, #6
 800318c:	4413      	add	r3, r2
 800318e:	4403      	add	r3, r0
 8003190:	3304      	adds	r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fda1 	bl	8000cdc <__aeabi_i2f>
 800319a:	4603      	mov	r3, r0
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fc7b 	bl	8001a98 <intUartSend>
		intUartSend(Map[actual.x][actual.y].Lados[ATRAS]);
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <SearchAvailableNode+0x478>)
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <SearchAvailableNode+0x478>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4816      	ldr	r0, [pc, #88]	; (8003204 <SearchAvailableNode+0x474>)
 80031ac:	461a      	mov	r2, r3
 80031ae:	00d2      	lsls	r2, r2, #3
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	0093      	lsls	r3, r2, #2
 80031b4:	461a      	mov	r2, r3
 80031b6:	460b      	mov	r3, r1
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a5b      	subs	r3, r3, r1
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	4413      	add	r3, r2
 80031c0:	4403      	add	r3, r0
 80031c2:	3308      	adds	r3, #8
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fd88 	bl	8000cdc <__aeabi_i2f>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fc62 	bl	8001a98 <intUartSend>
		//Map[x][y].Lados[direcciones[ATRAS]] = 2;
		moveNode(direcciones[ATRAS], &actual);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <SearchAvailableNode+0x470>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	490b      	ldr	r1, [pc, #44]	; (8003208 <SearchAvailableNode+0x478>)
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fe46 	bl	8003e6c <moveNode>

		rotateAxis(DERECHA, direcciones);
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <SearchAvailableNode+0x470>)
 80031e2:	2003      	movs	r0, #3
 80031e4:	f000 fa3a 	bl	800365c <rotateAxis>
		rotateAxis(DERECHA, direcciones);
 80031e8:	4905      	ldr	r1, [pc, #20]	; (8003200 <SearchAvailableNode+0x470>)
 80031ea:	2003      	movs	r0, #3
 80031ec:	f000 fa36 	bl	800365c <rotateAxis>
		return ATRAS;
 80031f0:	2302      	movs	r3, #2
 80031f2:	e000      	b.n	80031f6 <SearchAvailableNode+0x466>
	}
	return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	bf00      	nop
 8003200:	20002310 	.word	0x20002310
 8003204:	2000249c 	.word	0x2000249c
 8003208:	2000248c 	.word	0x2000248c
 800320c:	20002494 	.word	0x20002494

08003210 <PrintMap>:
 for (int i = 0; i < 4; i++) {
 direcciones[i] = i;
 }
 }*/

void PrintMap() {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
	for (int i = 0; i < alto; i++) {
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	e032      	b.n	8003282 <PrintMap+0x72>
		for (int j = 0; j < ancho; j++) {
 800321c:	2300      	movs	r3, #0
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	e020      	b.n	8003264 <PrintMap+0x54>
			//SerialBT.print(Map[i][j].visitado);
			//SerialBT.print(" ");
			TX_BUFFER[0] = Map[i][j].visitado + '0';
 8003222:	481c      	ldr	r0, [pc, #112]	; (8003294 <PrintMap+0x84>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	461a      	mov	r2, r3
 800322a:	00d2      	lsls	r2, r2, #3
 800322c:	1ad2      	subs	r2, r2, r3
 800322e:	0093      	lsls	r3, r2, #2
 8003230:	461a      	mov	r2, r3
 8003232:	460b      	mov	r3, r1
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1a5b      	subs	r3, r3, r1
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	4413      	add	r3, r2
 800323c:	4403      	add	r3, r0
 800323e:	3310      	adds	r3, #16
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	3330      	adds	r3, #48	; 0x30
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <PrintMap+0x88>)
 800324a:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = ' ';
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <PrintMap+0x88>)
 800324e:	2220      	movs	r2, #32
 8003250:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&huart3, TX_BUFFER, 2, 100);
 8003252:	2364      	movs	r3, #100	; 0x64
 8003254:	2202      	movs	r2, #2
 8003256:	4910      	ldr	r1, [pc, #64]	; (8003298 <PrintMap+0x88>)
 8003258:	4810      	ldr	r0, [pc, #64]	; (800329c <PrintMap+0x8c>)
 800325a:	f004 feaa 	bl	8007fb2 <HAL_UART_Transmit>
		for (int j = 0; j < ancho; j++) {
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	dddb      	ble.n	8003222 <PrintMap+0x12>
		}
		TX_BUFFER[0] = '\n';
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <PrintMap+0x88>)
 800326c:	220a      	movs	r2, #10
 800326e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, TX_BUFFER, 1, 100);
 8003270:	2364      	movs	r3, #100	; 0x64
 8003272:	2201      	movs	r2, #1
 8003274:	4908      	ldr	r1, [pc, #32]	; (8003298 <PrintMap+0x88>)
 8003276:	4809      	ldr	r0, [pc, #36]	; (800329c <PrintMap+0x8c>)
 8003278:	f004 fe9b 	bl	8007fb2 <HAL_UART_Transmit>
	for (int i = 0; i < alto; i++) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3301      	adds	r3, #1
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	ddc9      	ble.n	800321c <PrintMap+0xc>
	}
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	2000249c 	.word	0x2000249c
 8003298:	2000233c 	.word	0x2000233c
 800329c:	200002bc 	.word	0x200002bc

080032a0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 100; i++) {
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e029      	b.n	8003302 <HAL_ADC_ConvCpltCallback+0x62>
		CNY70[i] = adc_buf[i * 4];
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_ADC_ConvCpltCallback+0xb0>)
 80032b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032b8:	4926      	ldr	r1, [pc, #152]	; (8003354 <HAL_ADC_ConvCpltCallback+0xb4>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_1[i] = adc_buf[i * 4 + 1];
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_ADC_ConvCpltCallback+0xb0>)
 80032c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032cc:	4922      	ldr	r1, [pc, #136]	; (8003358 <HAL_ADC_ConvCpltCallback+0xb8>)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_2[i] = adc_buf[i * 4 + 2];
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_ADC_ConvCpltCallback+0xb0>)
 80032dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032e0:	491e      	ldr	r1, [pc, #120]	; (800335c <HAL_ADC_ConvCpltCallback+0xbc>)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SHARP_3[i] = adc_buf[i * 4 + 3];
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3303      	adds	r3, #3
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_ADC_ConvCpltCallback+0xb0>)
 80032f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032f4:	491a      	ldr	r1, [pc, #104]	; (8003360 <HAL_ADC_ConvCpltCallback+0xc0>)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b63      	cmp	r3, #99	; 0x63
 8003306:	ddd2      	ble.n	80032ae <HAL_ADC_ConvCpltCallback+0xe>
	}
	Sensors[0] = lecturaCNY70(100, CNY70);
 8003308:	4912      	ldr	r1, [pc, #72]	; (8003354 <HAL_ADC_ConvCpltCallback+0xb4>)
 800330a:	2064      	movs	r0, #100	; 0x64
 800330c:	f000 ff68 	bl	80041e0 <lecturaCNY70>
 8003310:	4603      	mov	r3, r0
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fce2 	bl	8000cdc <__aeabi_i2f>
 8003318:	4603      	mov	r3, r0
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <HAL_ADC_ConvCpltCallback+0xc4>)
 800331c:	6013      	str	r3, [r2, #0]
	Sensors[1] = lecSensor(100, SHARP_1);
 800331e:	490e      	ldr	r1, [pc, #56]	; (8003358 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003320:	2064      	movs	r0, #100	; 0x64
 8003322:	f000 fec1 	bl	80040a8 <lecSensor>
 8003326:	4603      	mov	r3, r0
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <HAL_ADC_ConvCpltCallback+0xc4>)
 800332a:	6053      	str	r3, [r2, #4]
	Sensors[2] = lecSensor(100, SHARP_2);
 800332c:	490b      	ldr	r1, [pc, #44]	; (800335c <HAL_ADC_ConvCpltCallback+0xbc>)
 800332e:	2064      	movs	r0, #100	; 0x64
 8003330:	f000 feba 	bl	80040a8 <lecSensor>
 8003334:	4603      	mov	r3, r0
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003338:	6093      	str	r3, [r2, #8]
	Sensors[3] = lecSensor(100, SHARP_3);
 800333a:	4909      	ldr	r1, [pc, #36]	; (8003360 <HAL_ADC_ConvCpltCallback+0xc0>)
 800333c:	2064      	movs	r0, #100	; 0x64
 800333e:	f000 feb3 	bl	80040a8 <lecSensor>
 8003342:	4603      	mov	r3, r0
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003346:	60d3      	str	r3, [r2, #12]

}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000300 	.word	0x20000300
 8003354:	20001300 	.word	0x20001300
 8003358:	20001700 	.word	0x20001700
 800335c:	20001b00 	.word	0x20001b00
 8003360:	20001f00 	.word	0x20001f00
 8003364:	20002300 	.word	0x20002300

08003368 <MAP>:

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
		uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
	return ((((au32_IN - au32_INmin) * (au32_OUTmax - au32_OUTmin))
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	1a8a      	subs	r2, r1, r2
 8003382:	fb03 f202 	mul.w	r2, r3, r2
			/ (au32_INmax - au32_INmin)) + au32_OUTmin);
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1acb      	subs	r3, r1, r3
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4413      	add	r3, r2
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <constrain>:

int constrain(int x, int a, int b) {
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
	if (x < a) {
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	da01      	bge.n	80033b6 <constrain+0x18>
		return a;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	e006      	b.n	80033c4 <constrain+0x26>
	} else if (b < x) {
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	da01      	bge.n	80033c2 <constrain+0x24>
		return b;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	e000      	b.n	80033c4 <constrain+0x26>
	} else
		return x;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <btnMachine>:

void btnMachine(int index) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	switch (btns[index].estado) {
 80033d8:	4a50      	ldr	r2, [pc, #320]	; (800351c <btnMachine+0x14c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4413      	add	r3, r2
 80033e0:	3308      	adds	r3, #8
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d069      	beq.n	80034bc <btnMachine+0xec>
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	f300 8092 	bgt.w	8003512 <btnMachine+0x142>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <btnMachine+0x28>
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d02c      	beq.n	8003450 <btnMachine+0x80>
			btns[index].flag = 1;
			btns[index].estado = ESPERA;
		}
		break;
	}
}
 80033f6:	e08c      	b.n	8003512 <btnMachine+0x142>
		btns[index].flag = 0;
 80033f8:	4a48      	ldr	r2, [pc, #288]	; (800351c <btnMachine+0x14c>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	330c      	adds	r3, #12
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8003406:	4a45      	ldr	r2, [pc, #276]	; (800351c <btnMachine+0x14c>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	4413      	add	r3, r2
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4942      	ldr	r1, [pc, #264]	; (800351c <btnMachine+0x14c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	440b      	add	r3, r1
 8003418:	3304      	adds	r3, #4
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f003 f838 	bl	8006494 <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <btnMachine+0x150>)
 800342a:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0) {
 800342c:	4b3c      	ldr	r3, [pc, #240]	; (8003520 <btnMachine+0x150>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d169      	bne.n	8003508 <btnMachine+0x138>
			ticks = HAL_GetTick();
 8003434:	f001 fdd8 	bl	8004fe8 <HAL_GetTick>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <btnMachine+0x154>)
 800343e:	601a      	str	r2, [r3, #0]
			btns[index].estado = CONFIRMACION;
 8003440:	4a36      	ldr	r2, [pc, #216]	; (800351c <btnMachine+0x14c>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	3308      	adds	r3, #8
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]
		break;
 800344e:	e05b      	b.n	8003508 <btnMachine+0x138>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 8003450:	4a32      	ldr	r2, [pc, #200]	; (800351c <btnMachine+0x14c>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	4413      	add	r3, r2
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4930      	ldr	r1, [pc, #192]	; (800351c <btnMachine+0x14c>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	440b      	add	r3, r1
 8003462:	3304      	adds	r3, #4
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f003 f813 	bl	8006494 <HAL_GPIO_ReadPin>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <btnMachine+0x150>)
 8003474:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 0 && HAL_GetTick() >= ticks + TICKS_BTN) {
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <btnMachine+0x150>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <btnMachine+0xcc>
 800347e:	f001 fdb3 	bl	8004fe8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <btnMachine+0x154>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3319      	adds	r3, #25
 800348a:	429a      	cmp	r2, r3
 800348c:	d306      	bcc.n	800349c <btnMachine+0xcc>
			btns[index].estado = LIBERACION;
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <btnMachine+0x14c>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	4413      	add	r3, r2
 8003496:	3308      	adds	r3, #8
 8003498:	2202      	movs	r2, #2
 800349a:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1 && ticks < TICKS_BTN) {
 800349c:	4b20      	ldr	r3, [pc, #128]	; (8003520 <btnMachine+0x150>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d133      	bne.n	800350c <btnMachine+0x13c>
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <btnMachine+0x154>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	dc2f      	bgt.n	800350c <btnMachine+0x13c>
			btns[index].estado = ESPERA;
 80034ac:	4a1b      	ldr	r2, [pc, #108]	; (800351c <btnMachine+0x14c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4413      	add	r3, r2
 80034b4:	3308      	adds	r3, #8
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
		break;
 80034ba:	e027      	b.n	800350c <btnMachine+0x13c>
		lecturaBtn = HAL_GPIO_ReadPin(btns[index].Port, btns[index].pin);
 80034bc:	4a17      	ldr	r2, [pc, #92]	; (800351c <btnMachine+0x14c>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	4413      	add	r3, r2
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4915      	ldr	r1, [pc, #84]	; (800351c <btnMachine+0x14c>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	440b      	add	r3, r1
 80034ce:	3304      	adds	r3, #4
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f002 ffdd 	bl	8006494 <HAL_GPIO_ReadPin>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <btnMachine+0x150>)
 80034e0:	601a      	str	r2, [r3, #0]
		if (lecturaBtn == 1) {
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <btnMachine+0x150>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d112      	bne.n	8003510 <btnMachine+0x140>
			btns[index].flag = 1;
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <btnMachine+0x14c>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	4413      	add	r3, r2
 80034f2:	330c      	adds	r3, #12
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
			btns[index].estado = ESPERA;
 80034f8:	4a08      	ldr	r2, [pc, #32]	; (800351c <btnMachine+0x14c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	3308      	adds	r3, #8
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
		break;
 8003506:	e003      	b.n	8003510 <btnMachine+0x140>
		break;
 8003508:	bf00      	nop
 800350a:	e002      	b.n	8003512 <btnMachine+0x142>
		break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <btnMachine+0x142>
		break;
 8003510:	bf00      	nop
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20002360 	.word	0x20002360
 8003520:	20002338 	.word	0x20002338
 8003524:	20002334 	.word	0x20002334

08003528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003530:	e7fe      	b.n	8003530 <Error_Handler+0x8>
 8003532:	0000      	movs	r0, r0
 8003534:	0000      	movs	r0, r0
	...

08003538 <calcularDistancia>:
 */
#include "motors.h"

int counterD, counterI;

float calcularDistancia(int counter) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((counter) * 2.51 / 10);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fc ff5f 	bl	8000404 <__aeabi_i2d>
 8003546:	a30c      	add	r3, pc, #48	; (adr r3, 8003578 <calcularDistancia+0x40>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fc ffc4 	bl	80004d8 <__aeabi_dmul>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <calcularDistancia+0x48>)
 800355e:	f7fd f8e5 	bl	800072c <__aeabi_ddiv>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f7fd faad 	bl	8000ac8 <__aeabi_d2f>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	e147ae14 	.word	0xe147ae14
 800357c:	4004147a 	.word	0x4004147a
 8003580:	40240000 	.word	0x40240000

08003584 <runMotor>:
	} else {
		TIM4->CCR3 = power;
	}
}

void runMotor(int dir, int motor) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
	switch (dir) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d03f      	beq.n	8003614 <runMotor+0x90>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b05      	cmp	r3, #5
 8003598:	dc57      	bgt.n	800364a <runMotor+0xc6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <runMotor+0x24>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d01b      	beq.n	80035de <runMotor+0x5a>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
		}
		break;
	}
}
 80035a6:	e050      	b.n	800364a <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <runMotor+0x40>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_SET);
 80035ae:	2201      	movs	r2, #1
 80035b0:	2110      	movs	r1, #16
 80035b2:	4828      	ldr	r0, [pc, #160]	; (8003654 <runMotor+0xd0>)
 80035b4:	f002 ff85 	bl	80064c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2120      	movs	r1, #32
 80035bc:	4825      	ldr	r0, [pc, #148]	; (8003654 <runMotor+0xd0>)
 80035be:	f002 ff80 	bl	80064c2 <HAL_GPIO_WritePin>
		break;
 80035c2:	e042      	b.n	800364a <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_SET);
 80035c4:	2201      	movs	r2, #1
 80035c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ca:	4823      	ldr	r0, [pc, #140]	; (8003658 <runMotor+0xd4>)
 80035cc:	f002 ff79 	bl	80064c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035d6:	4820      	ldr	r0, [pc, #128]	; (8003658 <runMotor+0xd4>)
 80035d8:	f002 ff73 	bl	80064c2 <HAL_GPIO_WritePin>
		break;
 80035dc:	e035      	b.n	800364a <runMotor+0xc6>
		if (motor == MOTOR_A) {
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <runMotor+0x76>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2110      	movs	r1, #16
 80035e8:	481a      	ldr	r0, [pc, #104]	; (8003654 <runMotor+0xd0>)
 80035ea:	f002 ff6a 	bl	80064c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_SET);
 80035ee:	2201      	movs	r2, #1
 80035f0:	2120      	movs	r1, #32
 80035f2:	4818      	ldr	r0, [pc, #96]	; (8003654 <runMotor+0xd0>)
 80035f4:	f002 ff65 	bl	80064c2 <HAL_GPIO_WritePin>
		break;
 80035f8:	e027      	b.n	800364a <runMotor+0xc6>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 80035fa:	2200      	movs	r2, #0
 80035fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003600:	4815      	ldr	r0, [pc, #84]	; (8003658 <runMotor+0xd4>)
 8003602:	f002 ff5e 	bl	80064c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_SET);
 8003606:	2201      	movs	r2, #1
 8003608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800360c:	4812      	ldr	r0, [pc, #72]	; (8003658 <runMotor+0xd4>)
 800360e:	f002 ff58 	bl	80064c2 <HAL_GPIO_WritePin>
		break;
 8003612:	e01a      	b.n	800364a <runMotor+0xc6>
		if (motor == MOTOR_A) {
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <runMotor+0xac>
			HAL_GPIO_WritePin(AIN1, GPIO_PIN_RESET);
 800361a:	2200      	movs	r2, #0
 800361c:	2110      	movs	r1, #16
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <runMotor+0xd0>)
 8003620:	f002 ff4f 	bl	80064c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AIN2, GPIO_PIN_RESET);
 8003624:	2200      	movs	r2, #0
 8003626:	2120      	movs	r1, #32
 8003628:	480a      	ldr	r0, [pc, #40]	; (8003654 <runMotor+0xd0>)
 800362a:	f002 ff4a 	bl	80064c2 <HAL_GPIO_WritePin>
		break;
 800362e:	e00b      	b.n	8003648 <runMotor+0xc4>
			HAL_GPIO_WritePin(BIN1, GPIO_PIN_RESET);
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003636:	4808      	ldr	r0, [pc, #32]	; (8003658 <runMotor+0xd4>)
 8003638:	f002 ff43 	bl	80064c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BIN2, GPIO_PIN_RESET);
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <runMotor+0xd4>)
 8003644:	f002 ff3d 	bl	80064c2 <HAL_GPIO_WritePin>
		break;
 8003648:	bf00      	nop
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40010c00 	.word	0x40010c00
 8003658:	40010800 	.word	0x40010800

0800365c <rotateAxis>:
#include "defs.h"
#include "main.h"

float offset = 0;
int giro = 0;
void rotateAxis(int direccion, int direcciones[4]) {
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
	switch (direccion) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d025      	beq.n	80036b8 <rotateAxis+0x5c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d144      	bne.n	80036fc <rotateAxis+0xa0>
	case DERECHA:
		for (int i = 0; i < 4; i++) {
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e01b      	b.n	80036b0 <rotateAxis+0x54>
			direcciones[i] = direcciones[i] - 1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	4413      	add	r3, r2
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	6839      	ldr	r1, [r7, #0]
 8003688:	440b      	add	r3, r1
 800368a:	3a01      	subs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
			if (direcciones[i] == -1) {
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4413      	add	r3, r2
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d105      	bne.n	80036aa <rotateAxis+0x4e>
				direcciones[i] = 3;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	2203      	movs	r2, #3
 80036a8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	dde0      	ble.n	8003678 <rotateAxis+0x1c>
			}
		}
		break;
 80036b6:	e021      	b.n	80036fc <rotateAxis+0xa0>
	case IZQUIERDA:
		for (int j = 0; j < 4; j++) {
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	e01a      	b.n	80036f4 <rotateAxis+0x98>
			direcciones[j] = direcciones[j] + 1;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	4413      	add	r3, r2
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	440b      	add	r3, r1
 80036d0:	3201      	adds	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
			if (direcciones[j] == 4) {
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d105      	bne.n	80036ee <rotateAxis+0x92>
				direcciones[j] = 0;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	dde1      	ble.n	80036be <rotateAxis+0x62>
			}
		}
		break;
 80036fa:	bf00      	nop
	}
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <resetAxis>:

void resetAxis(int direcciones[4]) {
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e008      	b.n	8003726 <resetAxis+0x20>
		direcciones[i] = i;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b03      	cmp	r3, #3
 800372a:	ddf3      	ble.n	8003714 <resetAxis+0xe>
	}
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <movementMachine>:

void movementMachine(int move) {
 8003738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
	switch (movementState) {
 8003742:	4b7f      	ldr	r3, [pc, #508]	; (8003940 <movementMachine+0x208>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b05      	cmp	r3, #5
 8003748:	f200 8367 	bhi.w	8003e1a <movementMachine+0x6e2>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <movementMachine+0x1c>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	080037ab 	.word	0x080037ab
 8003758:	08003985 	.word	0x08003985
 800375c:	08003cc5 	.word	0x08003cc5
 8003760:	08003b23 	.word	0x08003b23
 8003764:	08003e1b 	.word	0x08003e1b
 8003768:	0800376d 	.word	0x0800376d
	case OFF:
		/*runMotor(OFF, MOTOR_A);
		runMotor(OFF, MOTOR_B);*/
		if (move != OFF) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b05      	cmp	r3, #5
 8003770:	f000 8352 	beq.w	8003e18 <movementMachine+0x6e0>
			movementState = move;
 8003774:	4a72      	ldr	r2, [pc, #456]	; (8003940 <movementMachine+0x208>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
			if (move != ADELANTE) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <movementMachine+0x5e>
				 /*TIM3->CNT = 3000;
				 TIM1->CNT = 3000;
				 offset = 753;*/
				TIM3->CNT = 0;
 8003780:	4b70      	ldr	r3, [pc, #448]	; (8003944 <movementMachine+0x20c>)
 8003782:	2200      	movs	r2, #0
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 0;
 8003786:	4b70      	ldr	r3, [pc, #448]	; (8003948 <movementMachine+0x210>)
 8003788:	2200      	movs	r2, #0
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 0;
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <movementMachine+0x214>)
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
				TIM1->CNT = 100;
				offset = 25.1;
			}
			//intUartSend(TIM3->CNT);
		}
		break;
 8003794:	e340      	b.n	8003e18 <movementMachine+0x6e0>
				TIM3->CNT = 100;
 8003796:	4b6b      	ldr	r3, [pc, #428]	; (8003944 <movementMachine+0x20c>)
 8003798:	2264      	movs	r2, #100	; 0x64
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->CNT = 100;
 800379c:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <movementMachine+0x210>)
 800379e:	2264      	movs	r2, #100	; 0x64
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
				offset = 25.1;
 80037a2:	4b6a      	ldr	r3, [pc, #424]	; (800394c <movementMachine+0x214>)
 80037a4:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <movementMachine+0x218>)
 80037a6:	601a      	str	r2, [r3, #0]
		break;
 80037a8:	e336      	b.n	8003e18 <movementMachine+0x6e0>
	case ADELANTE:
		//TIM4->CCR3 = xSpeed;
		//TIM4->CCR4 = xSpeed;
		intUartSend(TIM1->CNT);
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <movementMachine+0x210>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fa90 	bl	8000cd4 <__aeabi_ui2f>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe f96e 	bl	8001a98 <intUartSend>

		objectiveDistance = forwardChoice[choice] + offset;
 80037bc:	4b65      	ldr	r3, [pc, #404]	; (8003954 <movementMachine+0x21c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a65      	ldr	r2, [pc, #404]	; (8003958 <movementMachine+0x220>)
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fa88 	bl	8000cdc <__aeabi_i2f>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b5f      	ldr	r3, [pc, #380]	; (800394c <movementMachine+0x214>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7fd f9cd 	bl	8000b74 <__addsf3>
 80037da:	4603      	mov	r3, r0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fc97 	bl	8001110 <__aeabi_f2iz>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4a5d      	ldr	r2, [pc, #372]	; (800395c <movementMachine+0x224>)
 80037e6:	6013      	str	r3, [r2, #0]
		//acelerationObjective = offset;
		//if (Sensors[2] > 5) {
		if (((calcularDistancia((TIM3->CNT) >> 1)
 80037e8:	4b56      	ldr	r3, [pc, #344]	; (8003944 <movementMachine+0x20c>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fea2 	bl	8003538 <calcularDistancia>
 80037f4:	4604      	mov	r4, r0
				+ calcularDistancia((TIM1->CNT) >> 1)) / 2
 80037f6:	4b54      	ldr	r3, [pc, #336]	; (8003948 <movementMachine+0x210>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fe9b 	bl	8003538 <calcularDistancia>
 8003802:	4603      	mov	r3, r0
 8003804:	4619      	mov	r1, r3
 8003806:	4620      	mov	r0, r4
 8003808:	f7fd f9b4 	bl	8000b74 <__addsf3>
 800380c:	4603      	mov	r3, r0
 800380e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fb6a 	bl	8000eec <__aeabi_fdiv>
 8003818:	4603      	mov	r3, r0
 800381a:	461c      	mov	r4, r3
				< forwardChoice[choice] + offset
 800381c:	4b4d      	ldr	r3, [pc, #308]	; (8003954 <movementMachine+0x21c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <movementMachine+0x220>)
 8003822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fa58 	bl	8000cdc <__aeabi_i2f>
 800382c:	4602      	mov	r2, r0
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <movementMachine+0x214>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fd f99d 	bl	8000b74 <__addsf3>
 800383a:	4603      	mov	r3, r0
		if (((calcularDistancia((TIM3->CNT) >> 1)
 800383c:	4619      	mov	r1, r3
 800383e:	4620      	mov	r0, r4
 8003840:	f7fd fc3e 	bl	80010c0 <__aeabi_fcmplt>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d13e      	bne.n	80038c8 <movementMachine+0x190>
				|| (calcularDistancia((TIM3->CNT) >> 1)
 800384a:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <movementMachine+0x20c>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fe71 	bl	8003538 <calcularDistancia>
 8003856:	4604      	mov	r4, r0
						+ calcularDistancia((TIM1->CNT) >> 1)) / 2
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <movementMachine+0x210>)
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fe6a 	bl	8003538 <calcularDistancia>
 8003864:	4603      	mov	r3, r0
 8003866:	4619      	mov	r1, r3
 8003868:	4620      	mov	r0, r4
 800386a:	f7fd f983 	bl	8000b74 <__addsf3>
 800386e:	4603      	mov	r3, r0
 8003870:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fb39 	bl	8000eec <__aeabi_fdiv>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fdd3 	bl	8000428 <__aeabi_f2d>
 8003882:	4604      	mov	r4, r0
 8003884:	460d      	mov	r5, r1
						> forwardChoice[choice] + offset + 0.5 ) ){
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <movementMachine+0x21c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a33      	ldr	r2, [pc, #204]	; (8003958 <movementMachine+0x220>)
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fa23 	bl	8000cdc <__aeabi_i2f>
 8003896:	4602      	mov	r2, r0
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <movementMachine+0x214>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7fd f968 	bl	8000b74 <__addsf3>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fc fdbe 	bl	8000428 <__aeabi_f2d>
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <movementMachine+0x228>)
 80038b2:	f7fc fc5b 	bl	800016c <__adddf3>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
				|| (calcularDistancia((TIM3->CNT) >> 1)
 80038ba:	4620      	mov	r0, r4
 80038bc:	4629      	mov	r1, r5
 80038be:	f7fd f89b 	bl	80009f8 <__aeabi_dcmpgt>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <movementMachine+0x1d2>
			//moveStraight();
			StraightFlag = 1;
 80038c8:	4b26      	ldr	r3, [pc, #152]	; (8003964 <movementMachine+0x22c>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
			KPP = KPPchoice[SLOW];
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <movementMachine+0x230>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a26      	ldr	r2, [pc, #152]	; (800396c <movementMachine+0x234>)
 80038d4:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[SLOW];
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <movementMachine+0x238>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a26      	ldr	r2, [pc, #152]	; (8003974 <movementMachine+0x23c>)
 80038dc:	6013      	str	r3, [r2, #0]

			//intUartSend(objectiveDistance -(calcularDistancia(TIM3->CNT) + calcularDistancia(TIM1->CNT))/2);
			//intUartSend(1);
			if (direction == ADELANTE) {
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <movementMachine+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <movementMachine+0x1c0>
				runMotor(ADELANTE, MOTOR_A);
 80038e6:	2100      	movs	r1, #0
 80038e8:	2000      	movs	r0, #0
 80038ea:	f7ff fe4b 	bl	8003584 <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 80038ee:	2101      	movs	r1, #1
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7ff fe47 	bl	8003584 <runMotor>
			if (direction == ADELANTE) {
 80038f6:	e022      	b.n	800393e <movementMachine+0x206>
			} else {
				runMotor(ATRAS, MOTOR_A);
 80038f8:	2100      	movs	r1, #0
 80038fa:	2002      	movs	r0, #2
 80038fc:	f7ff fe42 	bl	8003584 <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003900:	2101      	movs	r1, #1
 8003902:	2002      	movs	r0, #2
 8003904:	f7ff fe3e 	bl	8003584 <runMotor>
			if (direction == ADELANTE) {
 8003908:	e019      	b.n	800393e <movementMachine+0x206>
			}

		} else {
			StraightFlag = 0;
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <movementMachine+0x22c>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
			movimientoFlag = 1;
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <movementMachine+0x244>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
			movementState = OFF;
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <movementMachine+0x208>)
 8003918:	2205      	movs	r2, #5
 800391a:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 800391c:	2100      	movs	r1, #0
 800391e:	2005      	movs	r0, #5
 8003920:	f7ff fe30 	bl	8003584 <runMotor>
			runMotor(OFF, MOTOR_B);
 8003924:	2101      	movs	r1, #1
 8003926:	2005      	movs	r0, #5
 8003928:	f7ff fe2c 	bl	8003584 <runMotor>
			intUartSend(offset);
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <movementMachine+0x214>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe f8b1 	bl	8001a98 <intUartSend>
			aceleration = ADELANTE;
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <movementMachine+0x248>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
		 movementState = OFF;
		 offset = (calcularDistancia((TIM3->CNT) >> 1)
		 + calcularDistancia((TIM1->CNT) >> 1)) / 2;

		 }*/
		break;
 800393c:	e26d      	b.n	8003e1a <movementMachine+0x6e2>
 800393e:	e26c      	b.n	8003e1a <movementMachine+0x6e2>
 8003940:	20000070 	.word	0x20000070
 8003944:	40000400 	.word	0x40000400
 8003948:	40012c00 	.word	0x40012c00
 800394c:	200040d0 	.word	0x200040d0
 8003950:	41c8cccd 	.word	0x41c8cccd
 8003954:	20002320 	.word	0x20002320
 8003958:	20000054 	.word	0x20000054
 800395c:	200040c4 	.word	0x200040c4
 8003960:	3fe00000 	.word	0x3fe00000
 8003964:	200040bc 	.word	0x200040bc
 8003968:	20000020 	.word	0x20000020
 800396c:	200040ac 	.word	0x200040ac
 8003970:	20000030 	.word	0x20000030
 8003974:	200040b0 	.word	0x200040b0
 8003978:	200040c8 	.word	0x200040c8
 800397c:	20002358 	.word	0x20002358
 8003980:	200040cc 	.word	0x200040cc
	case IZQUIERDA:
		TIM4->CCR3 = baseChoice[choice]
 8003984:	4bae      	ldr	r3, [pc, #696]	; (8003c40 <movementMachine+0x508>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4aae      	ldr	r2, [pc, #696]	; (8003c44 <movementMachine+0x50c>)
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- (calcularDistancia((TIM3->CNT) >> 1)
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fd38 	bl	8000404 <__aeabi_i2d>
 8003994:	4604      	mov	r4, r0
 8003996:	460d      	mov	r5, r1
 8003998:	4bab      	ldr	r3, [pc, #684]	; (8003c48 <movementMachine+0x510>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fdca 	bl	8003538 <calcularDistancia>
 80039a4:	4606      	mov	r6, r0
						* (baseChoice[choice] / LeftChoice[choice])
 80039a6:	4ba6      	ldr	r3, [pc, #664]	; (8003c40 <movementMachine+0x508>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4aa6      	ldr	r2, [pc, #664]	; (8003c44 <movementMachine+0x50c>)
 80039ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039b0:	4ba3      	ldr	r3, [pc, #652]	; (8003c40 <movementMachine+0x508>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	49a5      	ldr	r1, [pc, #660]	; (8003c4c <movementMachine+0x514>)
 80039b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd f98c 	bl	8000cdc <__aeabi_i2f>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7fd f9db 	bl	8000d84 <__aeabi_fmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fd29 	bl	8000428 <__aeabi_f2d>
 80039d6:	4680      	mov	r8, r0
 80039d8:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 80039da:	4b99      	ldr	r3, [pc, #612]	; (8003c40 <movementMachine+0x508>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a99      	ldr	r2, [pc, #612]	; (8003c44 <movementMachine+0x50c>)
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fd0d 	bl	8000404 <__aeabi_i2d>
 80039ea:	a393      	add	r3, pc, #588	; (adr r3, 8003c38 <movementMachine+0x500>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f7fc fe9c 	bl	800072c <__aeabi_ddiv>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4640      	mov	r0, r8
 80039fa:	4649      	mov	r1, r9
 80039fc:	f7fc fbb4 	bl	8000168 <__aeabi_dsub>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003a04:	4620      	mov	r0, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	f7fc fbae 	bl	8000168 <__aeabi_dsub>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
		TIM4->CCR3 = baseChoice[choice]
 8003a10:	4c8f      	ldr	r4, [pc, #572]	; (8003c50 <movementMachine+0x518>)
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f7fd f837 	bl	8000a88 <__aeabi_d2uiz>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	63e3      	str	r3, [r4, #60]	; 0x3c
		TIM4->CCR4 = baseChoice[choice]
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <movementMachine+0x508>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a88      	ldr	r2, [pc, #544]	; (8003c44 <movementMachine+0x50c>)
 8003a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fceb 	bl	8000404 <__aeabi_i2d>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <movementMachine+0x510>)
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd7d 	bl	8003538 <calcularDistancia>
 8003a3e:	4606      	mov	r6, r0
						* (baseChoice[choice] / LeftChoice[choice])
 8003a40:	4b7f      	ldr	r3, [pc, #508]	; (8003c40 <movementMachine+0x508>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7f      	ldr	r2, [pc, #508]	; (8003c44 <movementMachine+0x50c>)
 8003a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a4a:	4b7d      	ldr	r3, [pc, #500]	; (8003c40 <movementMachine+0x508>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	497f      	ldr	r1, [pc, #508]	; (8003c4c <movementMachine+0x514>)
 8003a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd f93f 	bl	8000cdc <__aeabi_i2f>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4619      	mov	r1, r3
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7fd f98e 	bl	8000d84 <__aeabi_fmul>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fcdc 	bl	8000428 <__aeabi_f2d>
 8003a70:	4680      	mov	r8, r0
 8003a72:	4689      	mov	r9, r1
						- baseChoice[choice] / 1.8);
 8003a74:	4b72      	ldr	r3, [pc, #456]	; (8003c40 <movementMachine+0x508>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a72      	ldr	r2, [pc, #456]	; (8003c44 <movementMachine+0x50c>)
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fcc0 	bl	8000404 <__aeabi_i2d>
 8003a84:	a36c      	add	r3, pc, #432	; (adr r3, 8003c38 <movementMachine+0x500>)
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f7fc fe4f 	bl	800072c <__aeabi_ddiv>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4640      	mov	r0, r8
 8003a94:	4649      	mov	r1, r9
 8003a96:	f7fc fb67 	bl	8000168 <__aeabi_dsub>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
				- (calcularDistancia((TIM3->CNT) >> 1)
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f7fc fb61 	bl	8000168 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
		TIM4->CCR4 = baseChoice[choice]
 8003aaa:	4c69      	ldr	r4, [pc, #420]	; (8003c50 <movementMachine+0x518>)
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7fc ffea 	bl	8000a88 <__aeabi_d2uiz>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	6423      	str	r3, [r4, #64]	; 0x40
		//intUartSend((TIM3->CNT));
		if (calcularDistancia((TIM3->CNT) >> 1) < LeftChoice[choice]) {
 8003ab8:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <movementMachine+0x510>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fd3a 	bl	8003538 <calcularDistancia>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <movementMachine+0x508>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a60      	ldr	r2, [pc, #384]	; (8003c4c <movementMachine+0x514>)
 8003acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fd f903 	bl	8000cdc <__aeabi_i2f>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7fd faf0 	bl	80010c0 <__aeabi_fcmplt>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <movementMachine+0x3c0>
			runMotor(ADELANTE, MOTOR_A);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff fd4b 	bl	8003584 <runMotor>
			runMotor(ATRAS, MOTOR_B);
 8003aee:	2101      	movs	r1, #1
 8003af0:	2002      	movs	r0, #2
 8003af2:	f7ff fd47 	bl	8003584 <runMotor>
			TIM1->CNT = 100;
			offset = 25.1;
			//giro = 1;
			//intUartSend(9);
		}
		break;
 8003af6:	e190      	b.n	8003e1a <movementMachine+0x6e2>
			movementState = ADELANTE;
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <movementMachine+0x51c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003afe:	2100      	movs	r1, #0
 8003b00:	2005      	movs	r0, #5
 8003b02:	f7ff fd3f 	bl	8003584 <runMotor>
			runMotor(OFF, MOTOR_B);
 8003b06:	2101      	movs	r1, #1
 8003b08:	2005      	movs	r0, #5
 8003b0a:	f7ff fd3b 	bl	8003584 <runMotor>
			TIM3->CNT = 100;
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <movementMachine+0x510>)
 8003b10:	2264      	movs	r2, #100	; 0x64
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <movementMachine+0x520>)
 8003b16:	2264      	movs	r2, #100	; 0x64
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003b1a:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <movementMachine+0x524>)
 8003b1c:	4a50      	ldr	r2, [pc, #320]	; (8003c60 <movementMachine+0x528>)
 8003b1e:	601a      	str	r2, [r3, #0]
		break;
 8003b20:	e17b      	b.n	8003e1a <movementMachine+0x6e2>
	case DERECHA:
		TIM4->CCR3 = xSpeed;
 8003b22:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <movementMachine+0x52c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <movementMachine+0x518>)
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = xSpeed;
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <movementMachine+0x52c>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <movementMachine+0x518>)
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
		//intUartSend(TIM1->CNT);
		objectiveDistance = RightChoice[choice] + offset;
 8003b32:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <movementMachine+0x508>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a4c      	ldr	r2, [pc, #304]	; (8003c68 <movementMachine+0x530>)
 8003b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd f8cd 	bl	8000cdc <__aeabi_i2f>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <movementMachine+0x524>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fd f812 	bl	8000b74 <__addsf3>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fadc 	bl	8001110 <__aeabi_f2iz>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4a44      	ldr	r2, [pc, #272]	; (8003c6c <movementMachine+0x534>)
 8003b5c:	6013      	str	r3, [r2, #0]
		if (calcularDistancia((TIM1->CNT) >> 1) < RightChoice[choice] + offset
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <movementMachine+0x520>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fce7 	bl	8003538 <calcularDistancia>
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <movementMachine+0x508>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <movementMachine+0x530>)
 8003b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd f8b0 	bl	8000cdc <__aeabi_i2f>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <movementMachine+0x524>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fc fff5 	bl	8000b74 <__addsf3>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7fd fa96 	bl	80010c0 <__aeabi_fcmplt>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d12c      	bne.n	8003bf4 <movementMachine+0x4bc>
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <movementMachine+0x520>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fcc9 	bl	8003538 <calcularDistancia>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fc3d 	bl	8000428 <__aeabi_f2d>
 8003bae:	4604      	mov	r4, r0
 8003bb0:	460d      	mov	r5, r1
						> RightChoice[choice] + offset + 0.5) {
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <movementMachine+0x508>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <movementMachine+0x530>)
 8003bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd f88d 	bl	8000cdc <__aeabi_i2f>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <movementMachine+0x524>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7fc ffd2 	bl	8000b74 <__addsf3>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fc28 	bl	8000428 <__aeabi_f2d>
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <movementMachine+0x538>)
 8003bde:	f7fc fac5 	bl	800016c <__adddf3>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003be6:	4620      	mov	r0, r4
 8003be8:	4629      	mov	r1, r5
 8003bea:	f7fc ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d04b      	beq.n	8003c8c <movementMachine+0x554>

			StraightFlag = 2;
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <movementMachine+0x53c>)
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	601a      	str	r2, [r3, #0]
			KPP = KPPchoice[TURN_90];
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <movementMachine+0x540>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <movementMachine+0x544>)
 8003c00:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[TURN_90];
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <movementMachine+0x548>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <movementMachine+0x54c>)
 8003c08:	6013      	str	r3, [r2, #0]
			if (direction == ADELANTE) {
 8003c0a:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <movementMachine+0x550>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <movementMachine+0x4ec>
				runMotor(ATRAS, MOTOR_A);
 8003c12:	2100      	movs	r1, #0
 8003c14:	2002      	movs	r0, #2
 8003c16:	f7ff fcb5 	bl	8003584 <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f7ff fcb1 	bl	8003584 <runMotor>
			if (direction == ADELANTE) {
 8003c22:	e04e      	b.n	8003cc2 <movementMachine+0x58a>
			} else {
				runMotor(ADELANTE, MOTOR_A);
 8003c24:	2100      	movs	r1, #0
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7ff fcac 	bl	8003584 <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	2002      	movs	r0, #2
 8003c30:	f7ff fca8 	bl	8003584 <runMotor>
			if (direction == ADELANTE) {
 8003c34:	e045      	b.n	8003cc2 <movementMachine+0x58a>
 8003c36:	bf00      	nop
 8003c38:	cccccccd 	.word	0xcccccccd
 8003c3c:	3ffccccc 	.word	0x3ffccccc
 8003c40:	20002320 	.word	0x20002320
 8003c44:	2000004c 	.word	0x2000004c
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	20000064 	.word	0x20000064
 8003c50:	40000800 	.word	0x40000800
 8003c54:	20000070 	.word	0x20000070
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	200040d0 	.word	0x200040d0
 8003c60:	41c8cccd 	.word	0x41c8cccd
 8003c64:	200040c0 	.word	0x200040c0
 8003c68:	2000005c 	.word	0x2000005c
 8003c6c:	200040c4 	.word	0x200040c4
 8003c70:	3fe00000 	.word	0x3fe00000
 8003c74:	200040bc 	.word	0x200040bc
 8003c78:	20000020 	.word	0x20000020
 8003c7c:	200040ac 	.word	0x200040ac
 8003c80:	20000030 	.word	0x20000030
 8003c84:	200040b0 	.word	0x200040b0
 8003c88:	200040c8 	.word	0x200040c8
			}
			//intUartSend("HOLA");
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c92:	4864      	ldr	r0, [pc, #400]	; (8003e24 <movementMachine+0x6ec>)
 8003c94:	f002 fc15 	bl	80064c2 <HAL_GPIO_WritePin>
			movementState = ADELANTE;
 8003c98:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <movementMachine+0x6f0>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2005      	movs	r0, #5
 8003ca2:	f7ff fc6f 	bl	8003584 <runMotor>
			runMotor(OFF, MOTOR_B);
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	2005      	movs	r0, #5
 8003caa:	f7ff fc6b 	bl	8003584 <runMotor>
			TIM3->CNT = 100;
 8003cae:	4b5f      	ldr	r3, [pc, #380]	; (8003e2c <movementMachine+0x6f4>)
 8003cb0:	2264      	movs	r2, #100	; 0x64
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003cb4:	4b5e      	ldr	r3, [pc, #376]	; (8003e30 <movementMachine+0x6f8>)
 8003cb6:	2264      	movs	r2, #100	; 0x64
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003cba:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <movementMachine+0x6fc>)
 8003cbc:	4a5e      	ldr	r2, [pc, #376]	; (8003e38 <movementMachine+0x700>)
 8003cbe:	601a      	str	r2, [r3, #0]
			//intUartSend(8);
		}
		break;
 8003cc0:	e0ab      	b.n	8003e1a <movementMachine+0x6e2>
 8003cc2:	e0aa      	b.n	8003e1a <movementMachine+0x6e2>
	case ATRAS:
		TIM4->CCR3 = xSpeed;
 8003cc4:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <movementMachine+0x704>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <movementMachine+0x708>)
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = xSpeed;
 8003ccc:	4b5b      	ldr	r3, [pc, #364]	; (8003e3c <movementMachine+0x704>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <movementMachine+0x708>)
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
		objectiveDistance = RightChoice[choice] * 2 + offset;
 8003cd4:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <movementMachine+0x70c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <movementMachine+0x710>)
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fffb 	bl	8000cdc <__aeabi_i2f>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b52      	ldr	r3, [pc, #328]	; (8003e34 <movementMachine+0x6fc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fc ff40 	bl	8000b74 <__addsf3>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fa0a 	bl	8001110 <__aeabi_f2iz>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4a53      	ldr	r2, [pc, #332]	; (8003e4c <movementMachine+0x714>)
 8003d00:	6013      	str	r3, [r2, #0]
		if (calcularDistancia((TIM1->CNT) >> 1)
 8003d02:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <movementMachine+0x6f8>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fc15 	bl	8003538 <calcularDistancia>
 8003d0e:	4604      	mov	r4, r0
				< RightChoice[choice] * 2 + offset
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <movementMachine+0x70c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4c      	ldr	r2, [pc, #304]	; (8003e48 <movementMachine+0x710>)
 8003d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc ffdd 	bl	8000cdc <__aeabi_i2f>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <movementMachine+0x6fc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f7fc ff22 	bl	8000b74 <__addsf3>
 8003d30:	4603      	mov	r3, r0
		if (calcularDistancia((TIM1->CNT) >> 1)
 8003d32:	4619      	mov	r1, r3
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7fd f9c3 	bl	80010c0 <__aeabi_fcmplt>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d131      	bne.n	8003da4 <movementMachine+0x66c>
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <movementMachine+0x6f8>)
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fbf6 	bl	8003538 <calcularDistancia>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fb6a 	bl	8000428 <__aeabi_f2d>
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
						> RightChoice[choice] * 2 + 0.5 + offset) {
 8003d58:	4b3a      	ldr	r3, [pc, #232]	; (8003e44 <movementMachine+0x70c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <movementMachine+0x710>)
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fb4d 	bl	8000404 <__aeabi_i2d>
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <movementMachine+0x718>)
 8003d70:	f7fc f9fc 	bl	800016c <__adddf3>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4690      	mov	r8, r2
 8003d7a:	4699      	mov	r9, r3
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <movementMachine+0x6fc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fb51 	bl	8000428 <__aeabi_f2d>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc f9ed 	bl	800016c <__adddf3>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
				|| calcularDistancia((TIM1->CNT) >> 1)
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fe2d 	bl	80009f8 <__aeabi_dcmpgt>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d020      	beq.n	8003de6 <movementMachine+0x6ae>

			StraightFlag = 2;
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <movementMachine+0x71c>)
 8003da6:	2202      	movs	r2, #2
 8003da8:	601a      	str	r2, [r3, #0]
			KPP = KPPchoice[TURN_90];
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <movementMachine+0x720>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <movementMachine+0x724>)
 8003db0:	6013      	str	r3, [r2, #0]
			KDP = KDPchoice[TURN_90];
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <movementMachine+0x728>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	4a2b      	ldr	r2, [pc, #172]	; (8003e64 <movementMachine+0x72c>)
 8003db8:	6013      	str	r3, [r2, #0]
			if (direction == ADELANTE) {
 8003dba:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <movementMachine+0x730>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <movementMachine+0x69c>
				runMotor(ATRAS, MOTOR_A);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2002      	movs	r0, #2
 8003dc6:	f7ff fbdd 	bl	8003584 <runMotor>
				runMotor(ADELANTE, MOTOR_B);
 8003dca:	2101      	movs	r1, #1
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7ff fbd9 	bl	8003584 <runMotor>
			if (direction == ADELANTE) {
 8003dd2:	e020      	b.n	8003e16 <movementMachine+0x6de>
			} else {
				runMotor(ADELANTE, MOTOR_A);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7ff fbd4 	bl	8003584 <runMotor>
				runMotor(ATRAS, MOTOR_B);
 8003ddc:	2101      	movs	r1, #1
 8003dde:	2002      	movs	r0, #2
 8003de0:	f7ff fbd0 	bl	8003584 <runMotor>
			if (direction == ADELANTE) {
 8003de4:	e017      	b.n	8003e16 <movementMachine+0x6de>
			}

		} else {

			StraightFlag = 0;
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <movementMachine+0x71c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
			movementState = ADELANTE;
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <movementMachine+0x6f0>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
			runMotor(OFF, MOTOR_A);
 8003df2:	2100      	movs	r1, #0
 8003df4:	2005      	movs	r0, #5
 8003df6:	f7ff fbc5 	bl	8003584 <runMotor>
			runMotor(OFF, MOTOR_B);
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	2005      	movs	r0, #5
 8003dfe:	f7ff fbc1 	bl	8003584 <runMotor>
			TIM3->CNT = 100;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <movementMachine+0x6f4>)
 8003e04:	2264      	movs	r2, #100	; 0x64
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
			TIM1->CNT = 100;
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <movementMachine+0x6f8>)
 8003e0a:	2264      	movs	r2, #100	; 0x64
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24
			offset = 25.1;
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <movementMachine+0x6fc>)
 8003e10:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <movementMachine+0x700>)
 8003e12:	601a      	str	r2, [r3, #0]
			//intUartSend(7);
		}
		break;
 8003e14:	e001      	b.n	8003e1a <movementMachine+0x6e2>
 8003e16:	e000      	b.n	8003e1a <movementMachine+0x6e2>
		break;
 8003e18:	bf00      	nop

	}
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e24:	40010c00 	.word	0x40010c00
 8003e28:	20000070 	.word	0x20000070
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	200040d0 	.word	0x200040d0
 8003e38:	41c8cccd 	.word	0x41c8cccd
 8003e3c:	200040c0 	.word	0x200040c0
 8003e40:	40000800 	.word	0x40000800
 8003e44:	20002320 	.word	0x20002320
 8003e48:	2000005c 	.word	0x2000005c
 8003e4c:	200040c4 	.word	0x200040c4
 8003e50:	3fe00000 	.word	0x3fe00000
 8003e54:	200040bc 	.word	0x200040bc
 8003e58:	20000020 	.word	0x20000020
 8003e5c:	200040ac 	.word	0x200040ac
 8003e60:	20000030 	.word	0x20000030
 8003e64:	200040b0 	.word	0x200040b0
 8003e68:	200040c8 	.word	0x200040c8

08003e6c <moveNode>:
 *      Author: jore
 */
#include "nodeControl.h"
#include "main.h"
#include "sharp.h"
void moveNode(int lado, Position *a) {
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	switch (lado) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d823      	bhi.n	8003ec4 <moveNode+0x58>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <moveNode+0x18>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ea1 	.word	0x08003ea1
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003ead 	.word	0x08003ead
	case ADELANTE:
		//if (visual.y != ALTO - 1) {
		a->y++;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
		//visual.y++;
		//}
		break;
 8003e9e:	e011      	b.n	8003ec4 <moveNode+0x58>
	case IZQUIERDA:
		//if (visual.x != 0) {
		a->x--;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	601a      	str	r2, [r3, #0]
		//visual.x--;
		//}
		break;
 8003eaa:	e00b      	b.n	8003ec4 <moveNode+0x58>
	case DERECHA:
		// if (visual.x != ANCHO - 1) {
		a->x++;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	601a      	str	r2, [r3, #0]
		// visual.x++;
		// }
		break;
 8003eb6:	e005      	b.n	8003ec4 <moveNode+0x58>
	case ATRAS:
		// if (visual.y != 0) {
		a->y--;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
		// visual.y--;
		// }

		break;
 8003ec2:	bf00      	nop
	}
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop

08003ed0 <CreateNode>:

void CreateNode(Node* m, float Sensors[4], int direcciones[4], float maxDistance[3]) {
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
	m->Lados[direcciones[ADELANTE]] = lecturaSensor(ADELANTE, Sensors, maxDistance);
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f000 f88c 	bl	8004000 <lecturaSensor>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681c      	ldr	r4, [r3, #0]
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fd f90e 	bl	8001110 <__aeabi_f2iz>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[IZQUIERDA]] = lecturaSensor(IZQUIERDA, Sensors,  maxDistance);
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	2001      	movs	r0, #1
 8003f02:	f000 f87d 	bl	8004000 <lecturaSensor>
 8003f06:	4602      	mov	r2, r0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	681c      	ldr	r4, [r3, #0]
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7fd f8fe 	bl	8001110 <__aeabi_f2iz>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[DERECHA]] = lecturaSensor(DERECHA, Sensors, maxDistance);
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	2003      	movs	r0, #3
 8003f22:	f000 f86d 	bl	8004000 <lecturaSensor>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	681c      	ldr	r4, [r3, #0]
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fd f8ee 	bl	8001110 <__aeabi_f2iz>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	m->Lados[direcciones[ATRAS]] = lecturaSensor(ATRAS, Sensors,  maxDistance);
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	2002      	movs	r0, #2
 8003f42:	f000 f85d 	bl	8004000 <lecturaSensor>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	681c      	ldr	r4, [r3, #0]
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fd f8de 	bl	8001110 <__aeabi_f2iz>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd90      	pop	{r4, r7, pc}

08003f64 <wallDetector>:
#include "sharp.h"
#include "main.h"
#include <math.h>


int wallDetector(int n, int d, float maxDis[3]) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
	switch (d) {
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d02c      	beq.n	8003fd0 <wallDetector+0x6c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	dc3b      	bgt.n	8003ff4 <wallDetector+0x90>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <wallDetector+0x26>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d011      	beq.n	8003fac <wallDetector+0x48>
 8003f88:	e034      	b.n	8003ff4 <wallDetector+0x90>
	case ADELANTE:
		if (n < maxDis[0]) {
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7fc fea6 	bl	8000cdc <__aeabi_i2f>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7fd f891 	bl	80010c0 <__aeabi_fcmplt>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <wallDetector+0x44>

			return 1;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e026      	b.n	8003ff6 <wallDetector+0x92>
		} else {

			return 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e024      	b.n	8003ff6 <wallDetector+0x92>
		}
		break;

	case IZQUIERDA:
		if (n < maxDis[1]) {
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7fc fe95 	bl	8000cdc <__aeabi_i2f>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f7fd f87f 	bl	80010c0 <__aeabi_fcmplt>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <wallDetector+0x68>
			return 1;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e014      	b.n	8003ff6 <wallDetector+0x92>
		} else {
			return 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e012      	b.n	8003ff6 <wallDetector+0x92>
		}
		break;
	case DERECHA:
		if (n < maxDis[2]) {
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7fc fe83 	bl	8000cdc <__aeabi_i2f>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3308      	adds	r3, #8
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f7fd f86d 	bl	80010c0 <__aeabi_fcmplt>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <wallDetector+0x8c>
			return 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e002      	b.n	8003ff6 <wallDetector+0x92>
		} else {
			return 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <wallDetector+0x92>
		}
		break;
	default:
		return 0;
 8003ff4:	2300      	movs	r3, #0
		break;
	}
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <lecturaSensor>:

float lecturaSensor(int direccion, float values[4], float maxDis[3]) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
	switch (direccion) {
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d843      	bhi.n	800409a <lecturaSensor+0x9a>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <lecturaSensor+0x18>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	08004029 	.word	0x08004029
 800401c:	08004071 	.word	0x08004071
 8004020:	08004095 	.word	0x08004095
 8004024:	0800404d 	.word	0x0800404d
	case ADELANTE:
		return wallDetector(values[2], direccion, maxDis);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3308      	adds	r3, #8
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd f86e 	bl	8001110 <__aeabi_f2iz>
 8004034:	4603      	mov	r3, r0
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68f9      	ldr	r1, [r7, #12]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff92 	bl	8003f64 <wallDetector>
 8004040:	4603      	mov	r3, r0
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fe4a 	bl	8000cdc <__aeabi_i2f>
 8004048:	4603      	mov	r3, r0
 800404a:	e027      	b.n	800409c <lecturaSensor+0x9c>
		break;
	case DERECHA:
		return wallDetector(values[1], direccion, maxDis);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3304      	adds	r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f85c 	bl	8001110 <__aeabi_f2iz>
 8004058:	4603      	mov	r3, r0
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff80 	bl	8003f64 <wallDetector>
 8004064:	4603      	mov	r3, r0
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fe38 	bl	8000cdc <__aeabi_i2f>
 800406c:	4603      	mov	r3, r0
 800406e:	e015      	b.n	800409c <lecturaSensor+0x9c>
		break;
	case IZQUIERDA:
		return wallDetector(values[3], direccion, maxDis);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	330c      	adds	r3, #12
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd f84a 	bl	8001110 <__aeabi_f2iz>
 800407c:	4603      	mov	r3, r0
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff6e 	bl	8003f64 <wallDetector>
 8004088:	4603      	mov	r3, r0
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc fe26 	bl	8000cdc <__aeabi_i2f>
 8004090:	4603      	mov	r3, r0
 8004092:	e003      	b.n	800409c <lecturaSensor+0x9c>
		break;
	case ATRAS:
		return 0;
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e000      	b.n	800409c <lecturaSensor+0x9c>
		break;
	}
	return 15;
 800409a:	4b02      	ldr	r3, [pc, #8]	; (80040a4 <lecturaSensor+0xa4>)
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	41700000 	.word	0x41700000

080040a8 <lecSensor>:

float lecSensor(int n, uint32_t values[10]) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	e00a      	b.n	80040d2 <lecSensor+0x2a>
		suma = suma + values[i];
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	4413      	add	r3, r2
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4413      	add	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3301      	adds	r3, #1
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	dbf0      	blt.n	80040bc <lecSensor+0x14>
	}
	float adc = suma / n;
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	fb92 f3f3 	sdiv	r3, r2, r3
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fdfa 	bl	8000cdc <__aeabi_i2f>
 80040e8:	4603      	mov	r3, r0
 80040ea:	60bb      	str	r3, [r7, #8]
	float volts = MAP(adc,900,3400,35,310);
 80040ec:	68b8      	ldr	r0, [r7, #8]
 80040ee:	f7fd f835 	bl	800115c <__aeabi_f2uiz>
 80040f2:	f44f 739b 	mov.w	r3, #310	; 0x136
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2323      	movs	r3, #35	; 0x23
 80040fa:	f640 5248 	movw	r2, #3400	; 0xd48
 80040fe:	f44f 7161 	mov.w	r1, #900	; 0x384
 8004102:	f7ff f931 	bl	8003368 <MAP>
 8004106:	4603      	mov	r3, r0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fde3 	bl	8000cd4 <__aeabi_ui2f>
 800410e:	4603      	mov	r3, r0
 8004110:	60fb      	str	r3, [r7, #12]
	volts = volts/100;// value from sensor * (5/1024)
 8004112:	492d      	ldr	r1, [pc, #180]	; (80041c8 <lecSensor+0x120>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7fc fee9 	bl	8000eec <__aeabi_fdiv>
 800411a:	4603      	mov	r3, r0
 800411c:	60fb      	str	r3, [r7, #12]
	if (volts <= 0.35)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7fc f982 	bl	8000428 <__aeabi_f2d>
 8004124:	a324      	add	r3, pc, #144	; (adr r3, 80041b8 <lecSensor+0x110>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f7fc fc51 	bl	80009d0 <__aeabi_dcmple>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <lecSensor+0x90>
		volts = 0.35;
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <lecSensor+0x124>)
 8004136:	60fb      	str	r3, [r7, #12]
	volts = pow(volts - 0.3, 0.5);/*convertimos a cm con un aproximacion grafica*/
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7fc f975 	bl	8000428 <__aeabi_f2d>
 800413e:	a320      	add	r3, pc, #128	; (adr r3, 80041c0 <lecSensor+0x118>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc f810 	bl	8000168 <__aeabi_dsub>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <lecSensor+0x128>)
 8004156:	f004 f8c9 	bl	80082ec <pow>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	f7fc fcb1 	bl	8000ac8 <__aeabi_d2f>
 8004166:	4603      	mov	r3, r0
 8004168:	60fb      	str	r3, [r7, #12]
	volts = 27.5 / volts; /*no preguntar por los valores*/
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	4819      	ldr	r0, [pc, #100]	; (80041d4 <lecSensor+0x12c>)
 800416e:	f7fc febd 	bl	8000eec <__aeabi_fdiv>
 8004172:	4603      	mov	r3, r0
 8004174:	60fb      	str	r3, [r7, #12]
	volts -= 18;
 8004176:	4918      	ldr	r1, [pc, #96]	; (80041d8 <lecSensor+0x130>)
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7fc fcf9 	bl	8000b70 <__aeabi_fsub>
 800417e:	4603      	mov	r3, r0
 8004180:	60fb      	str	r3, [r7, #12]

	if(volts < -10){
 8004182:	4916      	ldr	r1, [pc, #88]	; (80041dc <lecSensor+0x134>)
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7fc ff9b 	bl	80010c0 <__aeabi_fcmplt>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <lecSensor+0xec>
			volts = 100;
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <lecSensor+0x120>)
 8004192:	60fb      	str	r3, [r7, #12]
	}

	if (volts < 0){
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7fc ff91 	bl	80010c0 <__aeabi_fcmplt>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <lecSensor+0x102>
		volts = 0;
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
	}



	return volts;
 80041aa:	68fb      	ldr	r3, [r7, #12]

}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	f3af 8000 	nop.w
 80041b8:	66666666 	.word	0x66666666
 80041bc:	3fd66666 	.word	0x3fd66666
 80041c0:	33333333 	.word	0x33333333
 80041c4:	3fd33333 	.word	0x3fd33333
 80041c8:	42c80000 	.word	0x42c80000
 80041cc:	3eb33333 	.word	0x3eb33333
 80041d0:	3fe00000 	.word	0x3fe00000
 80041d4:	41dc0000 	.word	0x41dc0000
 80041d8:	41900000 	.word	0x41900000
 80041dc:	c1200000 	.word	0xc1200000

080041e0 <lecturaCNY70>:

int lecturaCNY70(int n, uint32_t values[10]) {
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	long suma = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e00a      	b.n	800420a <lecturaCNY70+0x2a>
		suma = suma + values[i];
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3301      	adds	r3, #1
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	dbf0      	blt.n	80041f4 <lecturaCNY70+0x14>
	}
	int adc = (suma / n);
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	fb92 f3f3 	sdiv	r3, r2, r3
 800421a:	60fb      	str	r3, [r7, #12]
	if (adc < 1000) {
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004222:	da01      	bge.n	8004228 <lecturaCNY70+0x48>
		return BLANCO;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <lecturaCNY70+0x4a>
	} else {
		return NEGRO;
 8004228:	2301      	movs	r3, #1
	}
}
 800422a:	4618      	mov	r0, r3
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <HAL_MspInit+0x5c>)
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	4a14      	ldr	r2, [pc, #80]	; (8004290 <HAL_MspInit+0x5c>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6193      	str	r3, [r2, #24]
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_MspInit+0x5c>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <HAL_MspInit+0x5c>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <HAL_MspInit+0x5c>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	61d3      	str	r3, [r2, #28]
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_MspInit+0x5c>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_MspInit+0x60>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <HAL_MspInit+0x60>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40021000 	.word	0x40021000
 8004294:	40010000 	.word	0x40010000

08004298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a28      	ldr	r2, [pc, #160]	; (8004354 <HAL_ADC_MspInit+0xbc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d149      	bne.n	800434c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042b8:	4b27      	ldr	r3, [pc, #156]	; (8004358 <HAL_ADC_MspInit+0xc0>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4a26      	ldr	r2, [pc, #152]	; (8004358 <HAL_ADC_MspInit+0xc0>)
 80042be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c2:	6193      	str	r3, [r2, #24]
 80042c4:	4b24      	ldr	r3, [pc, #144]	; (8004358 <HAL_ADC_MspInit+0xc0>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d0:	4b21      	ldr	r3, [pc, #132]	; (8004358 <HAL_ADC_MspInit+0xc0>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	4a20      	ldr	r2, [pc, #128]	; (8004358 <HAL_ADC_MspInit+0xc0>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	6193      	str	r3, [r2, #24]
 80042dc:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_ADC_MspInit+0xc0>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CNY70_Pin|SHARP_D_Pin|SHARP_C_Pin|SHARP_I_Pin;
 80042e8:	230f      	movs	r3, #15
 80042ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ec:	2303      	movs	r3, #3
 80042ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f0:	f107 0310 	add.w	r3, r7, #16
 80042f4:	4619      	mov	r1, r3
 80042f6:	4819      	ldr	r0, [pc, #100]	; (800435c <HAL_ADC_MspInit+0xc4>)
 80042f8:	f001 ff48 	bl	800618c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 80042fe:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_ADC_MspInit+0xcc>)
 8004300:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 800431e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004322:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004326:	2220      	movs	r2, #32
 8004328:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 800432c:	2200      	movs	r2, #0
 800432e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004330:	480b      	ldr	r0, [pc, #44]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004332:	f001 fb33 	bl	800599c <HAL_DMA_Init>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800433c:	f7ff f8f4 	bl	8003528 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004344:	621a      	str	r2, [r3, #32]
 8004346:	4a06      	ldr	r2, [pc, #24]	; (8004360 <HAL_ADC_MspInit+0xc8>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40012400 	.word	0x40012400
 8004358:	40021000 	.word	0x40021000
 800435c:	40010800 	.word	0x40010800
 8004360:	2000014c 	.word	0x2000014c
 8004364:	40020008 	.word	0x40020008

08004368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	f107 0310 	add.w	r3, r7, #16
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <HAL_I2C_MspInit+0x70>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d123      	bne.n	80043d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_I2C_MspInit+0x74>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <HAL_I2C_MspInit+0x74>)
 800438e:	f043 0308 	orr.w	r3, r3, #8
 8004392:	6193      	str	r3, [r2, #24]
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_I2C_MspInit+0x74>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043a0:	23c0      	movs	r3, #192	; 0xc0
 80043a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043a4:	2312      	movs	r3, #18
 80043a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043a8:	2303      	movs	r3, #3
 80043aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ac:	f107 0310 	add.w	r3, r7, #16
 80043b0:	4619      	mov	r1, r3
 80043b2:	480b      	ldr	r0, [pc, #44]	; (80043e0 <HAL_I2C_MspInit+0x78>)
 80043b4:	f001 feea 	bl	800618c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_I2C_MspInit+0x74>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a07      	ldr	r2, [pc, #28]	; (80043dc <HAL_I2C_MspInit+0x74>)
 80043be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043c2:	61d3      	str	r3, [r2, #28]
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_I2C_MspInit+0x74>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043d0:	bf00      	nop
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40005400 	.word	0x40005400
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40010c00 	.word	0x40010c00

080043e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 0318 	add.w	r3, r7, #24
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_TIM_Encoder_MspInit+0xc8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d125      	bne.n	8004450 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004404:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800440a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800440e:	6193      	str	r3, [r2, #24]
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004422:	f043 0304 	orr.w	r3, r3, #4
 8004426:	6193      	str	r3, [r2, #24]
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004434:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004442:	f107 0318 	add.w	r3, r7, #24
 8004446:	4619      	mov	r1, r3
 8004448:	481a      	ldr	r0, [pc, #104]	; (80044b4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800444a:	f001 fe9f 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800444e:	e028      	b.n	80044a2 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM3)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d123      	bne.n	80044a2 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	61d3      	str	r3, [r2, #28]
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6193      	str	r3, [r2, #24]
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004496:	f107 0318 	add.w	r3, r7, #24
 800449a:	4619      	mov	r1, r3
 800449c:	4805      	ldr	r0, [pc, #20]	; (80044b4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800449e:	f001 fe75 	bl	800618c <HAL_GPIO_Init>
}
 80044a2:	bf00      	nop
 80044a4:	3728      	adds	r7, #40	; 0x28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40010800 	.word	0x40010800
 80044b8:	40000400 	.word	0x40000400

080044bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <HAL_TIM_Base_MspInit+0x34>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d10b      	bne.n	80044e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_TIM_Base_MspInit+0x38>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_TIM_Base_MspInit+0x38>)
 80044d4:	f043 0304 	orr.w	r3, r3, #4
 80044d8:	61d3      	str	r3, [r2, #28]
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_TIM_Base_MspInit+0x38>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40021000 	.word	0x40021000

080044f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a10      	ldr	r2, [pc, #64]	; (8004554 <HAL_TIM_MspPostInit+0x5c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d118      	bne.n	800454a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_TIM_MspPostInit+0x60>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <HAL_TIM_MspPostInit+0x60>)
 800451e:	f043 0308 	orr.w	r3, r3, #8
 8004522:	6193      	str	r3, [r2, #24]
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <HAL_TIM_MspPostInit+0x60>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004530:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	2302      	movs	r3, #2
 800453c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453e:	f107 0310 	add.w	r3, r7, #16
 8004542:	4619      	mov	r1, r3
 8004544:	4805      	ldr	r0, [pc, #20]	; (800455c <HAL_TIM_MspPostInit+0x64>)
 8004546:	f001 fe21 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800454a:	bf00      	nop
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40000800 	.word	0x40000800
 8004558:	40021000 	.word	0x40021000
 800455c:	40010c00 	.word	0x40010c00

08004560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_UART_MspInit+0x8c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d131      	bne.n	80045e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_UART_MspInit+0x90>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_UART_MspInit+0x90>)
 8004586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458a:	61d3      	str	r3, [r2, #28]
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_UART_MspInit+0x90>)
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_UART_MspInit+0x90>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <HAL_UART_MspInit+0x90>)
 800459e:	f043 0308 	orr.w	r3, r3, #8
 80045a2:	6193      	str	r3, [r2, #24]
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_UART_MspInit+0x90>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b6:	2302      	movs	r3, #2
 80045b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ba:	2303      	movs	r3, #3
 80045bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045be:	f107 0310 	add.w	r3, r7, #16
 80045c2:	4619      	mov	r1, r3
 80045c4:	480b      	ldr	r0, [pc, #44]	; (80045f4 <HAL_UART_MspInit+0x94>)
 80045c6:	f001 fde1 	bl	800618c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d8:	f107 0310 	add.w	r3, r7, #16
 80045dc:	4619      	mov	r1, r3
 80045de:	4805      	ldr	r0, [pc, #20]	; (80045f4 <HAL_UART_MspInit+0x94>)
 80045e0:	f001 fdd4 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045e4:	bf00      	nop
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40004800 	.word	0x40004800
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40010c00 	.word	0x40010c00

080045f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045fc:	e7fe      	b.n	80045fc <NMI_Handler+0x4>

080045fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004602:	e7fe      	b.n	8004602 <HardFault_Handler+0x4>

08004604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004608:	e7fe      	b.n	8004608 <MemManage_Handler+0x4>

0800460a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800460e:	e7fe      	b.n	800460e <BusFault_Handler+0x4>

08004610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004614:	e7fe      	b.n	8004614 <UsageFault_Handler+0x4>

08004616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
	...

0800463c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (StraightFlag == 1) {
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <SysTick_Handler+0x34>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <SysTick_Handler+0x1c>
		aproximationPID(ADELANTE);
 8004648:	2000      	movs	r0, #0
 800464a:	f000 f823 	bl	8004694 <aproximationPID>
		angularPID();
 800464e:	f000 f985 	bl	800495c <angularPID>
		moveStraight();
 8004652:	f000 faed 	bl	8004c30 <moveStraight>
 8004656:	e006      	b.n	8004666 <SysTick_Handler+0x2a>
	}else if(StraightFlag == 2){
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <SysTick_Handler+0x34>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d102      	bne.n	8004666 <SysTick_Handler+0x2a>
		aproximationPID(ATRAS);
 8004660:	2002      	movs	r0, #2
 8004662:	f000 f817 	bl	8004694 <aproximationPID>
		//moveStraight();
	}
	//moveStraight();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004666:	f000 fcad 	bl	8004fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200040bc 	.word	0x200040bc

08004674 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <DMA1_Channel1_IRQHandler+0x10>)
 800467a:	f001 fa49 	bl	8005b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000014c 	.word	0x2000014c

08004688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <aproximationPID>:
float timeNowT, timePrevT, timeNowA, timePrevA, timeNowP, timePrevP;
int motLeft, motRight;
int pLeft = 1;
int pRight = 1;

void aproximationPID(int sentido) {
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
	if (sentido == ADELANTE) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d127      	bne.n	80046f2 <aproximationPID+0x5e>
			errorP = objectiveDistance
							- (calcularDistancia((TIM1->CNT) >> 1)
 80046a2:	4b96      	ldr	r3, [pc, #600]	; (80048fc <aproximationPID+0x268>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fb18 	bl	8000cdc <__aeabi_i2f>
 80046ac:	4604      	mov	r4, r0
 80046ae:	4b94      	ldr	r3, [pc, #592]	; (8004900 <aproximationPID+0x26c>)
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe ff3f 	bl	8003538 <calcularDistancia>
 80046ba:	4605      	mov	r5, r0
									+ calcularDistancia((TIM3->CNT) >> 1)) / 2;
 80046bc:	4b91      	ldr	r3, [pc, #580]	; (8004904 <aproximationPID+0x270>)
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe ff38 	bl	8003538 <calcularDistancia>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4619      	mov	r1, r3
 80046cc:	4628      	mov	r0, r5
 80046ce:	f7fc fa51 	bl	8000b74 <__addsf3>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fc fc07 	bl	8000eec <__aeabi_fdiv>
 80046de:	4603      	mov	r3, r0
							- (calcularDistancia((TIM1->CNT) >> 1)
 80046e0:	4619      	mov	r1, r3
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7fc fa44 	bl	8000b70 <__aeabi_fsub>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
			errorP = objectiveDistance
 80046ec:	4b86      	ldr	r3, [pc, #536]	; (8004908 <aproximationPID+0x274>)
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e02d      	b.n	800474e <aproximationPID+0xba>
	} else if (sentido == IZQUIERDA) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d115      	bne.n	8004724 <aproximationPID+0x90>
		errorP =   objectiveDistance - calcularDistancia((TIM3->CNT) >> 1);
 80046f8:	4b80      	ldr	r3, [pc, #512]	; (80048fc <aproximationPID+0x268>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fc faed 	bl	8000cdc <__aeabi_i2f>
 8004702:	4604      	mov	r4, r0
 8004704:	4b7f      	ldr	r3, [pc, #508]	; (8004904 <aproximationPID+0x270>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe ff14 	bl	8003538 <calcularDistancia>
 8004710:	4603      	mov	r3, r0
 8004712:	4619      	mov	r1, r3
 8004714:	4620      	mov	r0, r4
 8004716:	f7fc fa2b 	bl	8000b70 <__aeabi_fsub>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	4b7a      	ldr	r3, [pc, #488]	; (8004908 <aproximationPID+0x274>)
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e014      	b.n	800474e <aproximationPID+0xba>
	} else {
		errorP =  objectiveDistance - calcularDistancia((TIM1->CNT) >> 1) ;
 8004724:	4b75      	ldr	r3, [pc, #468]	; (80048fc <aproximationPID+0x268>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fad7 	bl	8000cdc <__aeabi_i2f>
 800472e:	4604      	mov	r4, r0
 8004730:	4b73      	ldr	r3, [pc, #460]	; (8004900 <aproximationPID+0x26c>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fefe 	bl	8003538 <calcularDistancia>
 800473c:	4603      	mov	r3, r0
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f7fc fa15 	bl	8000b70 <__aeabi_fsub>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	4b6f      	ldr	r3, [pc, #444]	; (8004908 <aproximationPID+0x274>)
 800474c:	601a      	str	r2, [r3, #0]
	}

	timePrevP = timeNowT;
 800474e:	4b6f      	ldr	r3, [pc, #444]	; (800490c <aproximationPID+0x278>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6f      	ldr	r2, [pc, #444]	; (8004910 <aproximationPID+0x27c>)
 8004754:	6013      	str	r3, [r2, #0]
	timeNowP = HAL_GetTick();
 8004756:	f000 fc47 	bl	8004fe8 <HAL_GetTick>
 800475a:	4603      	mov	r3, r0
 800475c:	4618      	mov	r0, r3
 800475e:	f7fc fab9 	bl	8000cd4 <__aeabi_ui2f>
 8004762:	4603      	mov	r3, r0
 8004764:	4a6b      	ldr	r2, [pc, #428]	; (8004914 <aproximationPID+0x280>)
 8004766:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowP - timePrevP) / 1000;
 8004768:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <aproximationPID+0x280>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a68      	ldr	r2, [pc, #416]	; (8004910 <aproximationPID+0x27c>)
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc f9fc 	bl	8000b70 <__aeabi_fsub>
 8004778:	4603      	mov	r3, r0
 800477a:	4967      	ldr	r1, [pc, #412]	; (8004918 <aproximationPID+0x284>)
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc fbb5 	bl	8000eec <__aeabi_fdiv>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	4b65      	ldr	r3, [pc, #404]	; (800491c <aproximationPID+0x288>)
 8004788:	601a      	str	r2, [r3, #0]
	pidD = KDP * ((errorP - previousErrorP) / elapsedTime);
 800478a:	4b5f      	ldr	r3, [pc, #380]	; (8004908 <aproximationPID+0x274>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a64      	ldr	r2, [pc, #400]	; (8004920 <aproximationPID+0x28c>)
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f7fc f9eb 	bl	8000b70 <__aeabi_fsub>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	4b5f      	ldr	r3, [pc, #380]	; (800491c <aproximationPID+0x288>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fc fba1 	bl	8000eec <__aeabi_fdiv>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b5d      	ldr	r3, [pc, #372]	; (8004924 <aproximationPID+0x290>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fc fae5 	bl	8000d84 <__aeabi_fmul>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	4b5a      	ldr	r3, [pc, #360]	; (8004928 <aproximationPID+0x294>)
 80047c0:	601a      	str	r2, [r3, #0]
	pidP = KPP * errorP;
 80047c2:	4b5a      	ldr	r3, [pc, #360]	; (800492c <aproximationPID+0x298>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a50      	ldr	r2, [pc, #320]	; (8004908 <aproximationPID+0x274>)
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fc fad9 	bl	8000d84 <__aeabi_fmul>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b56      	ldr	r3, [pc, #344]	; (8004930 <aproximationPID+0x29c>)
 80047d8:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 80047da:	4b55      	ldr	r3, [pc, #340]	; (8004930 <aproximationPID+0x29c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a52      	ldr	r2, [pc, #328]	; (8004928 <aproximationPID+0x294>)
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc f9c5 	bl	8000b74 <__addsf3>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	4b51      	ldr	r3, [pc, #324]	; (8004934 <aproximationPID+0x2a0>)
 80047f0:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 80047f2:	4b50      	ldr	r3, [pc, #320]	; (8004934 <aproximationPID+0x2a0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a50      	ldr	r2, [pc, #320]	; (8004938 <aproximationPID+0x2a4>)
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc fc7d 	bl	80010fc <__aeabi_fcmpgt>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <aproximationPID+0x17c>
		//intUartSend(1);
		pid = velocity;
 8004808:	4b4b      	ldr	r3, [pc, #300]	; (8004938 <aproximationPID+0x2a4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a49      	ldr	r2, [pc, #292]	; (8004934 <aproximationPID+0x2a0>)
 800480e:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8004810:	4b49      	ldr	r3, [pc, #292]	; (8004938 <aproximationPID+0x2a4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004818:	4a46      	ldr	r2, [pc, #280]	; (8004934 <aproximationPID+0x2a0>)
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc fc6c 	bl	80010fc <__aeabi_fcmpgt>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <aproximationPID+0x1a2>
		//intUartSend(0);
		pid = -velocity;
 800482a:	4b43      	ldr	r3, [pc, #268]	; (8004938 <aproximationPID+0x2a4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004832:	4a40      	ldr	r2, [pc, #256]	; (8004934 <aproximationPID+0x2a0>)
 8004834:	6013      	str	r3, [r2, #0]
	}
	xSpeed = pid;
 8004836:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <aproximationPID+0x2a0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fc fc68 	bl	8001110 <__aeabi_f2iz>
 8004840:	4603      	mov	r3, r0
 8004842:	4a3e      	ldr	r2, [pc, #248]	; (800493c <aproximationPID+0x2a8>)
 8004844:	6013      	str	r3, [r2, #0]
	if (xSpeed < -1000) {
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <aproximationPID+0x2a8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800484e:	da02      	bge.n	8004856 <aproximationPID+0x1c2>
		xSpeed = -1000;
 8004850:	4b3a      	ldr	r3, [pc, #232]	; (800493c <aproximationPID+0x2a8>)
 8004852:	4a3b      	ldr	r2, [pc, #236]	; (8004940 <aproximationPID+0x2ac>)
 8004854:	601a      	str	r2, [r3, #0]
	}

	previousErrorT = errorT;
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <aproximationPID+0x2b0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3b      	ldr	r2, [pc, #236]	; (8004948 <aproximationPID+0x2b4>)
 800485c:	6013      	str	r3, [r2, #0]
	xSpeed = constrain(xSpeed, -1000, 1000);
 800485e:	4b37      	ldr	r3, [pc, #220]	; (800493c <aproximationPID+0x2a8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004866:	4936      	ldr	r1, [pc, #216]	; (8004940 <aproximationPID+0x2ac>)
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe fd98 	bl	800339e <constrain>
 800486e:	4603      	mov	r3, r0
 8004870:	4a32      	ldr	r2, [pc, #200]	; (800493c <aproximationPID+0x2a8>)
 8004872:	6013      	str	r3, [r2, #0]
	xSpeed = MAP(xSpeed, -1000, 1000, -baseChoice[choice], baseChoice[choice]);
 8004874:	4b31      	ldr	r3, [pc, #196]	; (800493c <aproximationPID+0x2a8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	4b34      	ldr	r3, [pc, #208]	; (800494c <aproximationPID+0x2b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a34      	ldr	r2, [pc, #208]	; (8004950 <aproximationPID+0x2bc>)
 8004880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004884:	425b      	negs	r3, r3
 8004886:	4619      	mov	r1, r3
 8004888:	4b30      	ldr	r3, [pc, #192]	; (800494c <aproximationPID+0x2b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a30      	ldr	r2, [pc, #192]	; (8004950 <aproximationPID+0x2bc>)
 800488e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	460b      	mov	r3, r1
 8004896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800489a:	4929      	ldr	r1, [pc, #164]	; (8004940 <aproximationPID+0x2ac>)
 800489c:	f7fe fd64 	bl	8003368 <MAP>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <aproximationPID+0x2a8>)
 80048a6:	601a      	str	r2, [r3, #0]
	if (xSpeed >= 0) {
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <aproximationPID+0x2a8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	db03      	blt.n	80048b8 <aproximationPID+0x224>
		direction = ADELANTE;
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <aproximationPID+0x2c0>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e007      	b.n	80048c8 <aproximationPID+0x234>

	} else {
		xSpeed = -xSpeed;
 80048b8:	4b20      	ldr	r3, [pc, #128]	; (800493c <aproximationPID+0x2a8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	425b      	negs	r3, r3
 80048be:	4a1f      	ldr	r2, [pc, #124]	; (800493c <aproximationPID+0x2a8>)
 80048c0:	6013      	str	r3, [r2, #0]
		direction = ATRAS;
 80048c2:	4b24      	ldr	r3, [pc, #144]	; (8004954 <aproximationPID+0x2c0>)
 80048c4:	2202      	movs	r2, #2
 80048c6:	601a      	str	r2, [r3, #0]
	}
	if (xSpeed < 10000) {
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <aproximationPID+0x2a8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80048d0:	4293      	cmp	r3, r2
 80048d2:	dc03      	bgt.n	80048dc <aproximationPID+0x248>
		xSpeed = 10000;
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <aproximationPID+0x2a8>)
 80048d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80048da:	601a      	str	r2, [r3, #0]
	}

	if (xSpeed == baseChoice[choice]){
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <aproximationPID+0x2b8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <aproximationPID+0x2bc>)
 80048e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <aproximationPID+0x2a8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d102      	bne.n	80048f4 <aproximationPID+0x260>
		aceleration = ATRAS;
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <aproximationPID+0x2c4>)
 80048f0:	2202      	movs	r2, #2
 80048f2:	601a      	str	r2, [r3, #0]
	}
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bdb0      	pop	{r4, r5, r7, pc}
 80048fc:	200040c4 	.word	0x200040c4
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40000400 	.word	0x40000400
 8004908:	200040ec 	.word	0x200040ec
 800490c:	200040fc 	.word	0x200040fc
 8004910:	20004110 	.word	0x20004110
 8004914:	2000410c 	.word	0x2000410c
 8004918:	447a0000 	.word	0x447a0000
 800491c:	200040d8 	.word	0x200040d8
 8004920:	200040f8 	.word	0x200040f8
 8004924:	200040b0 	.word	0x200040b0
 8004928:	200040e0 	.word	0x200040e0
 800492c:	200040ac 	.word	0x200040ac
 8004930:	200040dc 	.word	0x200040dc
 8004934:	200040d4 	.word	0x200040d4
 8004938:	200040b4 	.word	0x200040b4
 800493c:	200040c0 	.word	0x200040c0
 8004940:	fffffc18 	.word	0xfffffc18
 8004944:	200040e4 	.word	0x200040e4
 8004948:	200040f0 	.word	0x200040f0
 800494c:	20002320 	.word	0x20002320
 8004950:	2000004c 	.word	0x2000004c
 8004954:	200040c8 	.word	0x200040c8
 8004958:	200040cc 	.word	0x200040cc

0800495c <angularPID>:

void angularPID() {
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
	 if (Sensors[3] > maxDistance[1] && Sensors[1] < maxDistance[2]) {
 8004960:	4b48      	ldr	r3, [pc, #288]	; (8004a84 <angularPID+0x128>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <angularPID+0x12c>)
 8004966:	6852      	ldr	r2, [r2, #4]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fbc6 	bl	80010fc <__aeabi_fcmpgt>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01d      	beq.n	80049b2 <angularPID+0x56>
 8004976:	4b43      	ldr	r3, [pc, #268]	; (8004a84 <angularPID+0x128>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4a43      	ldr	r2, [pc, #268]	; (8004a88 <angularPID+0x12c>)
 800497c:	6892      	ldr	r2, [r2, #8]
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f7fc fb9d 	bl	80010c0 <__aeabi_fcmplt>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d012      	beq.n	80049b2 <angularPID+0x56>
		//intUartSend(0);
		errorA = Sensors[1] - CenterDistanceRight;
 800498c:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <angularPID+0x128>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a3e      	ldr	r2, [pc, #248]	; (8004a8c <angularPID+0x130>)
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc f8ea 	bl	8000b70 <__aeabi_fsub>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <angularPID+0x134>)
 80049a2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80049a4:	2201      	movs	r2, #1
 80049a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049aa:	483a      	ldr	r0, [pc, #232]	; (8004a94 <angularPID+0x138>)
 80049ac:	f001 fd89 	bl	80064c2 <HAL_GPIO_WritePin>
 80049b0:	e086      	b.n	8004ac0 <angularPID+0x164>
	} else if (Sensors[3] < maxDistance[1]
 80049b2:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <angularPID+0x128>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	4a34      	ldr	r2, [pc, #208]	; (8004a88 <angularPID+0x12c>)
 80049b8:	6852      	ldr	r2, [r2, #4]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fc fb7f 	bl	80010c0 <__aeabi_fcmplt>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01d      	beq.n	8004a04 <angularPID+0xa8>
			&& Sensors[1] > maxDistance[2]) {
 80049c8:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <angularPID+0x128>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a2e      	ldr	r2, [pc, #184]	; (8004a88 <angularPID+0x12c>)
 80049ce:	6892      	ldr	r2, [r2, #8]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc fb92 	bl	80010fc <__aeabi_fcmpgt>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d012      	beq.n	8004a04 <angularPID+0xa8>
		//intUartSend(1);

		errorA = CenterDistanceLeft - Sensors[3];
 80049de:	4b2e      	ldr	r3, [pc, #184]	; (8004a98 <angularPID+0x13c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <angularPID+0x128>)
 80049e4:	68d2      	ldr	r2, [r2, #12]
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc f8c1 	bl	8000b70 <__aeabi_fsub>
 80049ee:	4603      	mov	r3, r0
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <angularPID+0x134>)
 80049f4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80049f6:	2201      	movs	r2, #1
 80049f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049fc:	4825      	ldr	r0, [pc, #148]	; (8004a94 <angularPID+0x138>)
 80049fe:	f001 fd60 	bl	80064c2 <HAL_GPIO_WritePin>
 8004a02:	e05d      	b.n	8004ac0 <angularPID+0x164>
	} else if (Sensors[1] > maxDistance[2]  && Sensors[3] > maxDistance[1]){
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <angularPID+0x128>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <angularPID+0x12c>)
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc fb74 	bl	80010fc <__aeabi_fcmpgt>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d015      	beq.n	8004a46 <angularPID+0xea>
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <angularPID+0x128>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <angularPID+0x12c>)
 8004a20:	6852      	ldr	r2, [r2, #4]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fc fb69 	bl	80010fc <__aeabi_fcmpgt>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <angularPID+0xea>
		//intUartSend(3);

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a36:	4817      	ldr	r0, [pc, #92]	; (8004a94 <angularPID+0x138>)
 8004a38:	f001 fd43 	bl	80064c2 <HAL_GPIO_WritePin>
		errorA = 0;
 8004a3c:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <angularPID+0x134>)
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e03c      	b.n	8004ac0 <angularPID+0x164>
	} else if(Sensors[3] > CenterDistanceLeft){
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <angularPID+0x128>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <angularPID+0x13c>)
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fc fb53 	bl	80010fc <__aeabi_fcmpgt>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01f      	beq.n	8004a9c <angularPID+0x140>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a62:	480c      	ldr	r0, [pc, #48]	; (8004a94 <angularPID+0x138>)
 8004a64:	f001 fd2d 	bl	80064c2 <HAL_GPIO_WritePin>
		errorA = Sensors[1] - CenterDistanceRight;
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <angularPID+0x128>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <angularPID+0x130>)
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc f87c 	bl	8000b70 <__aeabi_fsub>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <angularPID+0x134>)
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e01e      	b.n	8004ac0 <angularPID+0x164>
 8004a82:	bf00      	nop
 8004a84:	20002300 	.word	0x20002300
 8004a88:	20002390 	.word	0x20002390
 8004a8c:	20002328 	.word	0x20002328
 8004a90:	200040e8 	.word	0x200040e8
 8004a94:	40010c00 	.word	0x40010c00
 8004a98:	2000232c 	.word	0x2000232c
	}else {

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aa2:	4851      	ldr	r0, [pc, #324]	; (8004be8 <angularPID+0x28c>)
 8004aa4:	f001 fd0d 	bl	80064c2 <HAL_GPIO_WritePin>
		errorA = CenterDistanceLeft - Sensors[3];
 8004aa8:	4b50      	ldr	r3, [pc, #320]	; (8004bec <angularPID+0x290>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a50      	ldr	r2, [pc, #320]	; (8004bf0 <angularPID+0x294>)
 8004aae:	68d2      	ldr	r2, [r2, #12]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc f85c 	bl	8000b70 <__aeabi_fsub>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <angularPID+0x298>)
 8004abe:	601a      	str	r2, [r3, #0]

	}
	timePrevA = timeNowA;
 8004ac0:	4b4d      	ldr	r3, [pc, #308]	; (8004bf8 <angularPID+0x29c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a4d      	ldr	r2, [pc, #308]	; (8004bfc <angularPID+0x2a0>)
 8004ac6:	6013      	str	r3, [r2, #0]
	timeNowA = HAL_GetTick();
 8004ac8:	f000 fa8e 	bl	8004fe8 <HAL_GetTick>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc f900 	bl	8000cd4 <__aeabi_ui2f>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4a48      	ldr	r2, [pc, #288]	; (8004bf8 <angularPID+0x29c>)
 8004ad8:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowA - timePrevA) / 1000;
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <angularPID+0x29c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a47      	ldr	r2, [pc, #284]	; (8004bfc <angularPID+0x2a0>)
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fc f843 	bl	8000b70 <__aeabi_fsub>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4944      	ldr	r1, [pc, #272]	; (8004c00 <angularPID+0x2a4>)
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc f9fc 	bl	8000eec <__aeabi_fdiv>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <angularPID+0x2a8>)
 8004afa:	601a      	str	r2, [r3, #0]
	pidD = KDA * ((errorA - previousErrorA) / elapsedTime);
 8004afc:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <angularPID+0x298>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <angularPID+0x2ac>)
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fc f832 	bl	8000b70 <__aeabi_fsub>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4b3c      	ldr	r3, [pc, #240]	; (8004c04 <angularPID+0x2a8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fc f9e8 	bl	8000eec <__aeabi_fdiv>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <angularPID+0x2b0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fc f92c 	bl	8000d84 <__aeabi_fmul>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <angularPID+0x2b4>)
 8004b32:	601a      	str	r2, [r3, #0]
	pidP = KPA * errorA;
 8004b34:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <angularPID+0x2b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2e      	ldr	r2, [pc, #184]	; (8004bf4 <angularPID+0x298>)
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fc f920 	bl	8000d84 <__aeabi_fmul>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b33      	ldr	r3, [pc, #204]	; (8004c18 <angularPID+0x2bc>)
 8004b4a:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8004b4c:	4b32      	ldr	r3, [pc, #200]	; (8004c18 <angularPID+0x2bc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2f      	ldr	r2, [pc, #188]	; (8004c10 <angularPID+0x2b4>)
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc f80c 	bl	8000b74 <__addsf3>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <angularPID+0x2c0>)
 8004b62:	601a      	str	r2, [r3, #0]

	if (pid > 100) {
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <angularPID+0x2c0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	492d      	ldr	r1, [pc, #180]	; (8004c20 <angularPID+0x2c4>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc fac6 	bl	80010fc <__aeabi_fcmpgt>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <angularPID+0x220>
		//intUartSend(1);
		pid = 100;
 8004b76:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <angularPID+0x2c0>)
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <angularPID+0x2c4>)
 8004b7a:	601a      	str	r2, [r3, #0]
	}
	if (pid < -100) {
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <angularPID+0x2c0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4928      	ldr	r1, [pc, #160]	; (8004c24 <angularPID+0x2c8>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc fa9c 	bl	80010c0 <__aeabi_fcmplt>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <angularPID+0x238>
		//intUartSend(0);
		pid = -100;
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <angularPID+0x2c0>)
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <angularPID+0x2c8>)
 8004b92:	601a      	str	r2, [r3, #0]
	}
	pLeft = (100 - pid)/100;
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <angularPID+0x2c0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4821      	ldr	r0, [pc, #132]	; (8004c20 <angularPID+0x2c4>)
 8004b9c:	f7fb ffe8 	bl	8000b70 <__aeabi_fsub>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	491f      	ldr	r1, [pc, #124]	; (8004c20 <angularPID+0x2c4>)
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fc f9a1 	bl	8000eec <__aeabi_fdiv>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fc faaf 	bl	8001110 <__aeabi_f2iz>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <angularPID+0x2cc>)
 8004bb6:	6013      	str	r3, [r2, #0]
	pRight = (100 + pid)/100;
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <angularPID+0x2c0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4918      	ldr	r1, [pc, #96]	; (8004c20 <angularPID+0x2c4>)
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb ffd8 	bl	8000b74 <__addsf3>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4916      	ldr	r1, [pc, #88]	; (8004c20 <angularPID+0x2c4>)
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fc f98f 	bl	8000eec <__aeabi_fdiv>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fc fa9d 	bl	8001110 <__aeabi_f2iz>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <angularPID+0x2d0>)
 8004bda:	6013      	str	r3, [r2, #0]
	previousErrorA = errorA;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <angularPID+0x298>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <angularPID+0x2ac>)
 8004be2:	6013      	str	r3, [r2, #0]
}
 8004be4:	bf00      	nop
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40010c00 	.word	0x40010c00
 8004bec:	2000232c 	.word	0x2000232c
 8004bf0:	20002300 	.word	0x20002300
 8004bf4:	200040e8 	.word	0x200040e8
 8004bf8:	20004104 	.word	0x20004104
 8004bfc:	20004108 	.word	0x20004108
 8004c00:	447a0000 	.word	0x447a0000
 8004c04:	200040d8 	.word	0x200040d8
 8004c08:	200040f4 	.word	0x200040f4
 8004c0c:	200040a8 	.word	0x200040a8
 8004c10:	200040e0 	.word	0x200040e0
 8004c14:	200040a4 	.word	0x200040a4
 8004c18:	200040dc 	.word	0x200040dc
 8004c1c:	200040d4 	.word	0x200040d4
 8004c20:	42c80000 	.word	0x42c80000
 8004c24:	c2c80000 	.word	0xc2c80000
 8004c28:	20000078 	.word	0x20000078
 8004c2c:	2000007c 	.word	0x2000007c

08004c30 <moveStraight>:

void moveStraight() {
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af02      	add	r7, sp, #8
	if (StraightFlag == 1) {
 8004c36:	4b96      	ldr	r3, [pc, #600]	; (8004e90 <moveStraight+0x260>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d12d      	bne.n	8004c9a <moveStraight+0x6a>
		errorT = calcularDistancia((TIM1->CNT) >> 1) * pLeft
 8004c3e:	4b95      	ldr	r3, [pc, #596]	; (8004e94 <moveStraight+0x264>)
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fc77 	bl	8003538 <calcularDistancia>
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4b92      	ldr	r3, [pc, #584]	; (8004e98 <moveStraight+0x268>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fc f843 	bl	8000cdc <__aeabi_i2f>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7fc f892 	bl	8000d84 <__aeabi_fmul>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461d      	mov	r5, r3
				- calcularDistancia((TIM3->CNT) >> 1) * pRight;
 8004c64:	4b8d      	ldr	r3, [pc, #564]	; (8004e9c <moveStraight+0x26c>)
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fc64 	bl	8003538 <calcularDistancia>
 8004c70:	4604      	mov	r4, r0
 8004c72:	4b8b      	ldr	r3, [pc, #556]	; (8004ea0 <moveStraight+0x270>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fc f830 	bl	8000cdc <__aeabi_i2f>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7fc f87f 	bl	8000d84 <__aeabi_fmul>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f7fb ff70 	bl	8000b70 <__aeabi_fsub>
 8004c90:	4603      	mov	r3, r0
 8004c92:	461a      	mov	r2, r3
		errorT = calcularDistancia((TIM1->CNT) >> 1) * pLeft
 8004c94:	4b83      	ldr	r3, [pc, #524]	; (8004ea4 <moveStraight+0x274>)
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e028      	b.n	8004cec <moveStraight+0xbc>
	}else if (StraightFlag == 2){
 8004c9a:	4b7d      	ldr	r3, [pc, #500]	; (8004e90 <moveStraight+0x260>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d124      	bne.n	8004cec <moveStraight+0xbc>
		errorT = (offset - calcularDistancia((TIM1->CNT) >> 1))
 8004ca2:	4b81      	ldr	r3, [pc, #516]	; (8004ea8 <moveStraight+0x278>)
 8004ca4:	681c      	ldr	r4, [r3, #0]
 8004ca6:	4b7b      	ldr	r3, [pc, #492]	; (8004e94 <moveStraight+0x264>)
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fc43 	bl	8003538 <calcularDistancia>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7fb ff5a 	bl	8000b70 <__aeabi_fsub>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461d      	mov	r5, r3
						+ (offset - calcularDistancia((TIM3->CNT) >> 1));
 8004cc0:	4b79      	ldr	r3, [pc, #484]	; (8004ea8 <moveStraight+0x278>)
 8004cc2:	681c      	ldr	r4, [r3, #0]
 8004cc4:	4b75      	ldr	r3, [pc, #468]	; (8004e9c <moveStraight+0x26c>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fc34 	bl	8003538 <calcularDistancia>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7fb ff4b 	bl	8000b70 <__aeabi_fsub>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7fb ff48 	bl	8000b74 <__addsf3>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	461a      	mov	r2, r3
		errorT = (offset - calcularDistancia((TIM1->CNT) >> 1))
 8004ce8:	4b6e      	ldr	r3, [pc, #440]	; (8004ea4 <moveStraight+0x274>)
 8004cea:	601a      	str	r2, [r3, #0]
	}

	timePrevT = timeNowT;
 8004cec:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <moveStraight+0x27c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6f      	ldr	r2, [pc, #444]	; (8004eb0 <moveStraight+0x280>)
 8004cf2:	6013      	str	r3, [r2, #0]
	timeNowT = HAL_GetTick();
 8004cf4:	f000 f978 	bl	8004fe8 <HAL_GetTick>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb ffea 	bl	8000cd4 <__aeabi_ui2f>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4a6a      	ldr	r2, [pc, #424]	; (8004eac <moveStraight+0x27c>)
 8004d04:	6013      	str	r3, [r2, #0]
	elapsedTime = (timeNowT - timePrevT) / 1000;
 8004d06:	4b69      	ldr	r3, [pc, #420]	; (8004eac <moveStraight+0x27c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <moveStraight+0x280>)
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb ff2d 	bl	8000b70 <__aeabi_fsub>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4966      	ldr	r1, [pc, #408]	; (8004eb4 <moveStraight+0x284>)
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fc f8e6 	bl	8000eec <__aeabi_fdiv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461a      	mov	r2, r3
 8004d24:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <moveStraight+0x288>)
 8004d26:	601a      	str	r2, [r3, #0]
	pidD = KDT * ((errorT - previousErrorT));
 8004d28:	4b5e      	ldr	r3, [pc, #376]	; (8004ea4 <moveStraight+0x274>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a63      	ldr	r2, [pc, #396]	; (8004ebc <moveStraight+0x28c>)
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb ff1c 	bl	8000b70 <__aeabi_fsub>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <moveStraight+0x290>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fc f81e 	bl	8000d84 <__aeabi_fmul>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <moveStraight+0x294>)
 8004d4e:	601a      	str	r2, [r3, #0]
	pidP = KPT * errorT;
 8004d50:	4b5d      	ldr	r3, [pc, #372]	; (8004ec8 <moveStraight+0x298>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a53      	ldr	r2, [pc, #332]	; (8004ea4 <moveStraight+0x274>)
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fc f812 	bl	8000d84 <__aeabi_fmul>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <moveStraight+0x29c>)
 8004d66:	601a      	str	r2, [r3, #0]
	pid = pidP + pidD;
 8004d68:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <moveStraight+0x29c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a55      	ldr	r2, [pc, #340]	; (8004ec4 <moveStraight+0x294>)
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fefe 	bl	8000b74 <__addsf3>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b54      	ldr	r3, [pc, #336]	; (8004ed0 <moveStraight+0x2a0>)
 8004d7e:	601a      	str	r2, [r3, #0]
	if (pid > velocity) {
 8004d80:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <moveStraight+0x2a0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a53      	ldr	r2, [pc, #332]	; (8004ed4 <moveStraight+0x2a4>)
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc f9b6 	bl	80010fc <__aeabi_fcmpgt>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <moveStraight+0x16e>
		//intUartSend(1);
		pid = velocity;
 8004d96:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <moveStraight+0x2a4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a4d      	ldr	r2, [pc, #308]	; (8004ed0 <moveStraight+0x2a0>)
 8004d9c:	6013      	str	r3, [r2, #0]
	}
	if (pid < -velocity) {
 8004d9e:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <moveStraight+0x2a4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004da6:	4a4a      	ldr	r2, [pc, #296]	; (8004ed0 <moveStraight+0x2a0>)
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fc f9a5 	bl	80010fc <__aeabi_fcmpgt>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <moveStraight+0x194>
		//intUartSend(0);
		pid = -velocity;
 8004db8:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <moveStraight+0x2a4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004dc0:	4a43      	ldr	r2, [pc, #268]	; (8004ed0 <moveStraight+0x2a0>)
 8004dc2:	6013      	str	r3, [r2, #0]
	}
	//intUartSend(pid);
	//HAL_Delay(10);

	motLeft = velocity - pid;
 8004dc4:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <moveStraight+0x2a4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <moveStraight+0x2a0>)
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb fece 	bl	8000b70 <__aeabi_fsub>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fc f99a 	bl	8001110 <__aeabi_f2iz>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a3e      	ldr	r2, [pc, #248]	; (8004ed8 <moveStraight+0x2a8>)
 8004de0:	6013      	str	r3, [r2, #0]
	motRight = velocity + pid;
 8004de2:	4b3c      	ldr	r3, [pc, #240]	; (8004ed4 <moveStraight+0x2a4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <moveStraight+0x2a0>)
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fec1 	bl	8000b74 <__addsf3>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fc f98b 	bl	8001110 <__aeabi_f2iz>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a37      	ldr	r2, [pc, #220]	; (8004edc <moveStraight+0x2ac>)
 8004dfe:	6013      	str	r3, [r2, #0]


	previousErrorT = errorT;
 8004e00:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <moveStraight+0x274>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <moveStraight+0x28c>)
 8004e06:	6013      	str	r3, [r2, #0]
	motRight = constrain(motRight, -1000, 1000);
 8004e08:	4b34      	ldr	r3, [pc, #208]	; (8004edc <moveStraight+0x2ac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e10:	4933      	ldr	r1, [pc, #204]	; (8004ee0 <moveStraight+0x2b0>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fac3 	bl	800339e <constrain>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a30      	ldr	r2, [pc, #192]	; (8004edc <moveStraight+0x2ac>)
 8004e1c:	6013      	str	r3, [r2, #0]
	motLeft = constrain(motLeft, -1000, 1000);
 8004e1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <moveStraight+0x2a8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e26:	492e      	ldr	r1, [pc, #184]	; (8004ee0 <moveStraight+0x2b0>)
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fab8 	bl	800339e <constrain>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4a29      	ldr	r2, [pc, #164]	; (8004ed8 <moveStraight+0x2a8>)
 8004e32:	6013      	str	r3, [r2, #0]

	motRight = MAP(motRight, -1000, 1000, 0, xSpeed * 2);
 8004e34:	4b29      	ldr	r3, [pc, #164]	; (8004edc <moveStraight+0x2ac>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <moveStraight+0x2b4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e48:	4925      	ldr	r1, [pc, #148]	; (8004ee0 <moveStraight+0x2b0>)
 8004e4a:	f7fe fa8d 	bl	8003368 <MAP>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <moveStraight+0x2ac>)
 8004e54:	601a      	str	r2, [r3, #0]
	motLeft = MAP(motLeft, -1000, 1000, 0, xSpeed * 2);
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <moveStraight+0x2a8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <moveStraight+0x2b4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e6a:	491d      	ldr	r1, [pc, #116]	; (8004ee0 <moveStraight+0x2b0>)
 8004e6c:	f7fe fa7c 	bl	8003368 <MAP>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461a      	mov	r2, r3
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <moveStraight+0x2a8>)
 8004e76:	601a      	str	r2, [r3, #0]

	TIM4->CCR4 = motLeft;
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <moveStraight+0x2a8>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <moveStraight+0x2b8>)
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR3 = motRight;
 8004e80:	4b16      	ldr	r3, [pc, #88]	; (8004edc <moveStraight+0x2ac>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <moveStraight+0x2b8>)
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200040bc 	.word	0x200040bc
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	20000078 	.word	0x20000078
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	2000007c 	.word	0x2000007c
 8004ea4:	200040e4 	.word	0x200040e4
 8004ea8:	200040d0 	.word	0x200040d0
 8004eac:	200040fc 	.word	0x200040fc
 8004eb0:	20004100 	.word	0x20004100
 8004eb4:	447a0000 	.word	0x447a0000
 8004eb8:	200040d8 	.word	0x200040d8
 8004ebc:	200040f0 	.word	0x200040f0
 8004ec0:	200040a0 	.word	0x200040a0
 8004ec4:	200040e0 	.word	0x200040e0
 8004ec8:	2000409c 	.word	0x2000409c
 8004ecc:	200040dc 	.word	0x200040dc
 8004ed0:	200040d4 	.word	0x200040d4
 8004ed4:	200040b4 	.word	0x200040b4
 8004ed8:	20004114 	.word	0x20004114
 8004edc:	20004118 	.word	0x20004118
 8004ee0:	fffffc18 	.word	0xfffffc18
 8004ee4:	200040c0 	.word	0x200040c0
 8004ee8:	40000800 	.word	0x40000800

08004eec <Reset_Handler>:
 8004eec:	480c      	ldr	r0, [pc, #48]	; (8004f20 <LoopFillZerobss+0x12>)
 8004eee:	490d      	ldr	r1, [pc, #52]	; (8004f24 <LoopFillZerobss+0x16>)
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <LoopFillZerobss+0x1a>)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e002      	b.n	8004efc <LoopCopyDataInit>

08004ef6 <CopyDataInit>:
 8004ef6:	58d4      	ldr	r4, [r2, r3]
 8004ef8:	50c4      	str	r4, [r0, r3]
 8004efa:	3304      	adds	r3, #4

08004efc <LoopCopyDataInit>:
 8004efc:	18c4      	adds	r4, r0, r3
 8004efe:	428c      	cmp	r4, r1
 8004f00:	d3f9      	bcc.n	8004ef6 <CopyDataInit>
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <LoopFillZerobss+0x1e>)
 8004f04:	4c0a      	ldr	r4, [pc, #40]	; (8004f30 <LoopFillZerobss+0x22>)
 8004f06:	2300      	movs	r3, #0
 8004f08:	e001      	b.n	8004f0e <LoopFillZerobss>

08004f0a <FillZerobss>:
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	3204      	adds	r2, #4

08004f0e <LoopFillZerobss>:
 8004f0e:	42a2      	cmp	r2, r4
 8004f10:	d3fb      	bcc.n	8004f0a <FillZerobss>
 8004f12:	f7ff fbb9 	bl	8004688 <SystemInit>
 8004f16:	f003 f9bd 	bl	8008294 <__libc_init_array>
 8004f1a:	f7fc fa21 	bl	8001360 <main>
 8004f1e:	4770      	bx	lr
 8004f20:	20000000 	.word	0x20000000
 8004f24:	200000ec 	.word	0x200000ec
 8004f28:	08009190 	.word	0x08009190
 8004f2c:	200000f0 	.word	0x200000f0
 8004f30:	20004140 	.word	0x20004140

08004f34 <ADC1_2_IRQHandler>:
 8004f34:	e7fe      	b.n	8004f34 <ADC1_2_IRQHandler>
	...

08004f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_Init+0x28>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_Init+0x28>)
 8004f42:	f043 0310 	orr.w	r3, r3, #16
 8004f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f48:	2003      	movs	r0, #3
 8004f4a:	f000 fce5 	bl	8005918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f4e:	200f      	movs	r0, #15
 8004f50:	f000 f808 	bl	8004f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f54:	f7ff f96e 	bl	8004234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40022000 	.word	0x40022000

08004f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f6c:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <HAL_InitTick+0x54>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_InitTick+0x58>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	4619      	mov	r1, r3
 8004f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fcfd 	bl	8005982 <HAL_SYSTICK_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e00e      	b.n	8004fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d80a      	bhi.n	8004fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	f000 fcc5 	bl	800592e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fa4:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <HAL_InitTick+0x5c>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000074 	.word	0x20000074
 8004fbc:	20000084 	.word	0x20000084
 8004fc0:	20000080 	.word	0x20000080

08004fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_IncTick+0x1c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_IncTick+0x20>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <HAL_IncTick+0x20>)
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	20000084 	.word	0x20000084
 8004fe4:	2000411c 	.word	0x2000411c

08004fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return uwTick;
 8004fec:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <HAL_GetTick+0x10>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	2000411c 	.word	0x2000411c

08004ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0be      	b.n	800519c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff f92c 	bl	8004298 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 faf5 	bl	8005630 <ADC_ConversionStop_Disable>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 8099 	bne.w	800518a <HAL_ADC_Init+0x18e>
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8095 	bne.w	800518a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005068:	f023 0302 	bic.w	r3, r3, #2
 800506c:	f043 0202 	orr.w	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800507c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	7b1b      	ldrb	r3, [r3, #12]
 8005082:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005084:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005094:	d003      	beq.n	800509e <HAL_ADC_Init+0xa2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d102      	bne.n	80050a4 <HAL_ADC_Init+0xa8>
 800509e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a2:	e000      	b.n	80050a6 <HAL_ADC_Init+0xaa>
 80050a4:	2300      	movs	r3, #0
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7d1b      	ldrb	r3, [r3, #20]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d119      	bne.n	80050e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7b1b      	ldrb	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	035a      	lsls	r2, r3, #13
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e00b      	b.n	80050e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <HAL_ADC_Init+0x1a8>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	430b      	orrs	r3, r1
 800510e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005118:	d003      	beq.n	8005122 <HAL_ADC_Init+0x126>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d104      	bne.n	800512c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	3b01      	subs	r3, #1
 8005128:	051b      	lsls	r3, r3, #20
 800512a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	430a      	orrs	r2, r1
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <HAL_ADC_Init+0x1ac>)
 8005148:	4013      	ands	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	d10b      	bne.n	8005168 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005166:	e018      	b.n	800519a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f023 0312 	bic.w	r3, r3, #18
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f043 0201 	orr.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005188:	e007      	b.n	800519a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	f043 0210 	orr.w	r2, r3, #16
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	ffe1f7fd 	.word	0xffe1f7fd
 80051a8:	ff1f0efe 	.word	0xff1f0efe

080051ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a64      	ldr	r2, [pc, #400]	; (8005354 <HAL_ADC_Start_DMA+0x1a8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_ADC_Start_DMA+0x24>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a63      	ldr	r2, [pc, #396]	; (8005358 <HAL_ADC_Start_DMA+0x1ac>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d106      	bne.n	80051de <HAL_ADC_Start_DMA+0x32>
 80051d0:	4b60      	ldr	r3, [pc, #384]	; (8005354 <HAL_ADC_Start_DMA+0x1a8>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 80b3 	bne.w	8005344 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_ADC_Start_DMA+0x40>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e0ae      	b.n	800534a <HAL_ADC_Start_DMA+0x19e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f9c1 	bl	800557c <ADC_Enable>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 809a 	bne.w	800533a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4e      	ldr	r2, [pc, #312]	; (8005358 <HAL_ADC_Start_DMA+0x1ac>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d105      	bne.n	8005230 <HAL_ADC_Start_DMA+0x84>
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <HAL_ADC_Start_DMA+0x1a8>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d115      	bne.n	800525c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005246:	2b00      	cmp	r3, #0
 8005248:	d026      	beq.n	8005298 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005252:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800525a:	e01d      	b.n	8005298 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a39      	ldr	r2, [pc, #228]	; (8005354 <HAL_ADC_Start_DMA+0x1a8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_ADC_Start_DMA+0xd0>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a38      	ldr	r2, [pc, #224]	; (8005358 <HAL_ADC_Start_DMA+0x1ac>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10d      	bne.n	8005298 <HAL_ADC_Start_DMA+0xec>
 800527c:	4b35      	ldr	r3, [pc, #212]	; (8005354 <HAL_ADC_Start_DMA+0x1a8>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005290:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	f023 0206 	bic.w	r2, r3, #6
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80052b0:	e002      	b.n	80052b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4a25      	ldr	r2, [pc, #148]	; (800535c <HAL_ADC_Start_DMA+0x1b0>)
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	4a24      	ldr	r2, [pc, #144]	; (8005360 <HAL_ADC_Start_DMA+0x1b4>)
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a23      	ldr	r2, [pc, #140]	; (8005364 <HAL_ADC_Start_DMA+0x1b8>)
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0202 	mvn.w	r2, #2
 80052e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a18      	ldr	r0, [r3, #32]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	334c      	adds	r3, #76	; 0x4c
 80052fc:	4619      	mov	r1, r3
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f000 fba5 	bl	8005a50 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005310:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005314:	d108      	bne.n	8005328 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005324:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005326:	e00f      	b.n	8005348 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005336:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005338:	e006      	b.n	8005348 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005342:	e001      	b.n	8005348 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40012400 	.word	0x40012400
 8005358:	40012800 	.word	0x40012800
 800535c:	080056b3 	.word	0x080056b3
 8005360:	0800572f 	.word	0x0800572f
 8005364:	0800574b 	.word	0x0800574b

08005368 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x20>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0dc      	b.n	8005566 <HAL_ADC_ConfigChannel+0x1da>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d81c      	bhi.n	80053f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	3b05      	subs	r3, #5
 80053ce:	221f      	movs	r2, #31
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	4019      	ands	r1, r3
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	3b05      	subs	r3, #5
 80053e8:	fa00 f203 	lsl.w	r2, r0, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	635a      	str	r2, [r3, #52]	; 0x34
 80053f4:	e03c      	b.n	8005470 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d81c      	bhi.n	8005438 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	3b23      	subs	r3, #35	; 0x23
 8005410:	221f      	movs	r2, #31
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	4019      	ands	r1, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	3b23      	subs	r3, #35	; 0x23
 800542a:	fa00 f203 	lsl.w	r2, r0, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
 8005436:	e01b      	b.n	8005470 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	3b41      	subs	r3, #65	; 0x41
 800544a:	221f      	movs	r2, #31
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	4019      	ands	r1, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	3b41      	subs	r3, #65	; 0x41
 8005464:	fa00 f203 	lsl.w	r2, r0, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b09      	cmp	r3, #9
 8005476:	d91c      	bls.n	80054b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	3b1e      	subs	r3, #30
 800548a:	2207      	movs	r2, #7
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	4019      	ands	r1, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6898      	ldr	r0, [r3, #8]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	3b1e      	subs	r3, #30
 80054a4:	fa00 f203 	lsl.w	r2, r0, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	e019      	b.n	80054e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6919      	ldr	r1, [r3, #16]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	2207      	movs	r2, #7
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	4019      	ands	r1, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6898      	ldr	r0, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	fa00 f203 	lsl.w	r2, r0, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d003      	beq.n	80054f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054f2:	2b11      	cmp	r3, #17
 80054f4:	d132      	bne.n	800555c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_ADC_ConfigChannel+0x1e4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d125      	bne.n	800554c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d126      	bne.n	800555c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800551c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b10      	cmp	r3, #16
 8005524:	d11a      	bne.n	800555c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_ADC_ConfigChannel+0x1e8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a13      	ldr	r2, [pc, #76]	; (8005578 <HAL_ADC_ConfigChannel+0x1ec>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	0c9a      	lsrs	r2, r3, #18
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800553c:	e002      	b.n	8005544 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	3b01      	subs	r3, #1
 8005542:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f9      	bne.n	800553e <HAL_ADC_ConfigChannel+0x1b2>
 800554a:	e007      	b.n	800555c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012400 	.word	0x40012400
 8005574:	20000074 	.word	0x20000074
 8005578:	431bde83 	.word	0x431bde83

0800557c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d040      	beq.n	800561c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055aa:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <ADC_Enable+0xac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <ADC_Enable+0xb0>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	0c9b      	lsrs	r3, r3, #18
 80055b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055b8:	e002      	b.n	80055c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3b01      	subs	r3, #1
 80055be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f9      	bne.n	80055ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055c6:	f7ff fd0f 	bl	8004fe8 <HAL_GetTick>
 80055ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80055cc:	e01f      	b.n	800560e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055ce:	f7ff fd0b 	bl	8004fe8 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d918      	bls.n	800560e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d011      	beq.n	800560e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f043 0210 	orr.w	r2, r3, #16
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e007      	b.n	800561e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d1d8      	bne.n	80055ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000074 	.word	0x20000074
 800562c:	431bde83 	.word	0x431bde83

08005630 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d12e      	bne.n	80056a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800565a:	f7ff fcc5 	bl	8004fe8 <HAL_GetTick>
 800565e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005660:	e01b      	b.n	800569a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005662:	f7ff fcc1 	bl	8004fe8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d914      	bls.n	800569a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10d      	bne.n	800569a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	f043 0210 	orr.w	r2, r3, #16
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e007      	b.n	80056aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d0dc      	beq.n	8005662 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d127      	bne.n	800571c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80056e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80056e6:	d115      	bne.n	8005714 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d111      	bne.n	8005714 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	f043 0201 	orr.w	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7fd fdc3 	bl	80032a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800571a:	e004      	b.n	8005726 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fe13 	bl	8005368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f043 0204 	orr.w	r2, r3, #4
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff fe02 	bl	800537a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057b2:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <__NVIC_SetPriorityGrouping+0x44>)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	60d3      	str	r3, [r2, #12]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e000ed00 	.word	0xe000ed00

080057c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <__NVIC_GetPriorityGrouping+0x18>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	f003 0307 	and.w	r3, r3, #7
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000ed00 	.word	0xe000ed00

080057e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	db0b      	blt.n	800580e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	f003 021f 	and.w	r2, r3, #31
 80057fc:	4906      	ldr	r1, [pc, #24]	; (8005818 <__NVIC_EnableIRQ+0x34>)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2001      	movs	r0, #1
 8005806:	fa00 f202 	lsl.w	r2, r0, r2
 800580a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr
 8005818:	e000e100 	.word	0xe000e100

0800581c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	6039      	str	r1, [r7, #0]
 8005826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db0a      	blt.n	8005846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	490c      	ldr	r1, [pc, #48]	; (8005868 <__NVIC_SetPriority+0x4c>)
 8005836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583a:	0112      	lsls	r2, r2, #4
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	440b      	add	r3, r1
 8005840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005844:	e00a      	b.n	800585c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4908      	ldr	r1, [pc, #32]	; (800586c <__NVIC_SetPriority+0x50>)
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	3b04      	subs	r3, #4
 8005854:	0112      	lsls	r2, r2, #4
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	440b      	add	r3, r1
 800585a:	761a      	strb	r2, [r3, #24]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	e000e100 	.word	0xe000e100
 800586c:	e000ed00 	.word	0xe000ed00

08005870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f1c3 0307 	rsb	r3, r3, #7
 800588a:	2b04      	cmp	r3, #4
 800588c:	bf28      	it	cs
 800588e:	2304      	movcs	r3, #4
 8005890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3304      	adds	r3, #4
 8005896:	2b06      	cmp	r3, #6
 8005898:	d902      	bls.n	80058a0 <NVIC_EncodePriority+0x30>
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3b03      	subs	r3, #3
 800589e:	e000      	b.n	80058a2 <NVIC_EncodePriority+0x32>
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	401a      	ands	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b8:	f04f 31ff 	mov.w	r1, #4294967295
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	fa01 f303 	lsl.w	r3, r1, r3
 80058c2:	43d9      	mvns	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c8:	4313      	orrs	r3, r2
         );
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3724      	adds	r7, #36	; 0x24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058e4:	d301      	bcc.n	80058ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058e6:	2301      	movs	r3, #1
 80058e8:	e00f      	b.n	800590a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <SysTick_Config+0x40>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058f2:	210f      	movs	r1, #15
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	f7ff ff90 	bl	800581c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <SysTick_Config+0x40>)
 80058fe:	2200      	movs	r2, #0
 8005900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <SysTick_Config+0x40>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	e000e010 	.word	0xe000e010

08005918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ff2d 	bl	8005780 <__NVIC_SetPriorityGrouping>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005940:	f7ff ff42 	bl	80057c8 <__NVIC_GetPriorityGrouping>
 8005944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff ff90 	bl	8005870 <NVIC_EncodePriority>
 8005950:	4602      	mov	r2, r0
 8005952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff ff5f 	bl	800581c <__NVIC_SetPriority>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	4603      	mov	r3, r0
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff ff35 	bl	80057e4 <__NVIC_EnableIRQ>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ffa2 	bl	80058d4 <SysTick_Config>
 8005990:	4603      	mov	r3, r0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e043      	b.n	8005a3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <HAL_DMA_Init+0xa8>)
 80059ba:	4413      	add	r3, r2
 80059bc:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <HAL_DMA_Init+0xac>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	009a      	lsls	r2, r3, #2
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <HAL_DMA_Init+0xb0>)
 80059ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80059e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80059ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80059f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr
 8005a44:	bffdfff8 	.word	0xbffdfff8
 8005a48:	cccccccd 	.word	0xcccccccd
 8005a4c:	40020000 	.word	0x40020000

08005a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_DMA_Start_IT+0x20>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e04a      	b.n	8005b06 <HAL_DMA_Start_IT+0xb6>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d13a      	bne.n	8005af8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f938 	bl	8005d1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 020e 	orr.w	r2, r2, #14
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e00f      	b.n	8005ae6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0204 	bic.w	r2, r2, #4
 8005ad4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 020a 	orr.w	r2, r2, #10
 8005ae4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e005      	b.n	8005b04 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
 8005b02:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d04f      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0xc8>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04a      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a66      	ldr	r2, [pc, #408]	; (8005d00 <HAL_DMA_IRQHandler+0x1f0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d029      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xae>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a65      	ldr	r2, [pc, #404]	; (8005d04 <HAL_DMA_IRQHandler+0x1f4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_DMA_IRQHandler+0xaa>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a63      	ldr	r2, [pc, #396]	; (8005d08 <HAL_DMA_IRQHandler+0x1f8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01a      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0xa4>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a62      	ldr	r2, [pc, #392]	; (8005d0c <HAL_DMA_IRQHandler+0x1fc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d012      	beq.n	8005bae <HAL_DMA_IRQHandler+0x9e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a60      	ldr	r2, [pc, #384]	; (8005d10 <HAL_DMA_IRQHandler+0x200>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00a      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0x98>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a5f      	ldr	r2, [pc, #380]	; (8005d14 <HAL_DMA_IRQHandler+0x204>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d102      	bne.n	8005ba2 <HAL_DMA_IRQHandler+0x92>
 8005b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ba0:	e00e      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xb0>
 8005ba2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ba6:	e00b      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xb0>
 8005ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bac:	e008      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xb0>
 8005bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bb2:	e005      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xb0>
 8005bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb8:	e002      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xb0>
 8005bba:	2340      	movs	r3, #64	; 0x40
 8005bbc:	e000      	b.n	8005bc0 <HAL_DMA_IRQHandler+0xb0>
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	4a55      	ldr	r2, [pc, #340]	; (8005d18 <HAL_DMA_IRQHandler+0x208>)
 8005bc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8094 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005bd6:	e08e      	b.n	8005cf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2202      	movs	r2, #2
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d056      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x186>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d051      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10b      	bne.n	8005c18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 020a 	bic.w	r2, r2, #10
 8005c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a38      	ldr	r2, [pc, #224]	; (8005d00 <HAL_DMA_IRQHandler+0x1f0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d029      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x166>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a37      	ldr	r2, [pc, #220]	; (8005d04 <HAL_DMA_IRQHandler+0x1f4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d022      	beq.n	8005c72 <HAL_DMA_IRQHandler+0x162>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a35      	ldr	r2, [pc, #212]	; (8005d08 <HAL_DMA_IRQHandler+0x1f8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01a      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x15c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a34      	ldr	r2, [pc, #208]	; (8005d0c <HAL_DMA_IRQHandler+0x1fc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d012      	beq.n	8005c66 <HAL_DMA_IRQHandler+0x156>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a32      	ldr	r2, [pc, #200]	; (8005d10 <HAL_DMA_IRQHandler+0x200>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00a      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x150>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a31      	ldr	r2, [pc, #196]	; (8005d14 <HAL_DMA_IRQHandler+0x204>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d102      	bne.n	8005c5a <HAL_DMA_IRQHandler+0x14a>
 8005c54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c58:	e00e      	b.n	8005c78 <HAL_DMA_IRQHandler+0x168>
 8005c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c5e:	e00b      	b.n	8005c78 <HAL_DMA_IRQHandler+0x168>
 8005c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c64:	e008      	b.n	8005c78 <HAL_DMA_IRQHandler+0x168>
 8005c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c6a:	e005      	b.n	8005c78 <HAL_DMA_IRQHandler+0x168>
 8005c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c70:	e002      	b.n	8005c78 <HAL_DMA_IRQHandler+0x168>
 8005c72:	2320      	movs	r3, #32
 8005c74:	e000      	b.n	8005c78 <HAL_DMA_IRQHandler+0x168>
 8005c76:	2302      	movs	r3, #2
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <HAL_DMA_IRQHandler+0x208>)
 8005c7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d034      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c94:	e02f      	b.n	8005cf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d028      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x1e8>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d023      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 020e 	bic.w	r2, r2, #14
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f202 	lsl.w	r2, r1, r2
 8005cce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d004      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
    }
  }
  return;
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
}
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40020008 	.word	0x40020008
 8005d04:	4002001c 	.word	0x4002001c
 8005d08:	40020030 	.word	0x40020030
 8005d0c:	40020044 	.word	0x40020044
 8005d10:	40020058 	.word	0x40020058
 8005d14:	4002006c 	.word	0x4002006c
 8005d18:	40020000 	.word	0x40020000

08005d1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	2101      	movs	r1, #1
 8005d34:	fa01 f202 	lsl.w	r2, r1, r2
 8005d38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d108      	bne.n	8005d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d5a:	e007      	b.n	8005d6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	60da      	str	r2, [r3, #12]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d92:	4b2f      	ldr	r3, [pc, #188]	; (8005e50 <HAL_FLASH_Program+0xd8>)
 8005d94:	7e1b      	ldrb	r3, [r3, #24]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_FLASH_Program+0x26>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e054      	b.n	8005e48 <HAL_FLASH_Program+0xd0>
 8005d9e:	4b2c      	ldr	r3, [pc, #176]	; (8005e50 <HAL_FLASH_Program+0xd8>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005da4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005da8:	f000 f8b2 	bl	8005f10 <FLASH_WaitForLastOperation>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d144      	bne.n	8005e40 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d102      	bne.n	8005dc2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	757b      	strb	r3, [r7, #21]
 8005dc0:	e007      	b.n	8005dd2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d102      	bne.n	8005dce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	757b      	strb	r3, [r7, #21]
 8005dcc:	e001      	b.n	8005dd2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005dce:	2304      	movs	r3, #4
 8005dd0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75bb      	strb	r3, [r7, #22]
 8005dd6:	e02d      	b.n	8005e34 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005dd8:	7dbb      	ldrb	r3, [r7, #22]
 8005dda:	005a      	lsls	r2, r3, #1
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	eb02 0c03 	add.w	ip, r2, r3
 8005de2:	7dbb      	ldrb	r3, [r7, #22]
 8005de4:	0119      	lsls	r1, r3, #4
 8005de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dea:	f1c1 0620 	rsb	r6, r1, #32
 8005dee:	f1a1 0020 	sub.w	r0, r1, #32
 8005df2:	fa22 f401 	lsr.w	r4, r2, r1
 8005df6:	fa03 f606 	lsl.w	r6, r3, r6
 8005dfa:	4334      	orrs	r4, r6
 8005dfc:	fa23 f000 	lsr.w	r0, r3, r0
 8005e00:	4304      	orrs	r4, r0
 8005e02:	fa23 f501 	lsr.w	r5, r3, r1
 8005e06:	b2a3      	uxth	r3, r4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4660      	mov	r0, ip
 8005e0c:	f000 f864 	bl	8005ed8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e14:	f000 f87c 	bl	8005f10 <FLASH_WaitForLastOperation>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <HAL_FLASH_Program+0xdc>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <HAL_FLASH_Program+0xdc>)
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005e2e:	7dbb      	ldrb	r3, [r7, #22]
 8005e30:	3301      	adds	r3, #1
 8005e32:	75bb      	strb	r3, [r7, #22]
 8005e34:	7dba      	ldrb	r2, [r7, #22]
 8005e36:	7d7b      	ldrb	r3, [r7, #21]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3cd      	bcc.n	8005dd8 <HAL_FLASH_Program+0x60>
 8005e3c:	e000      	b.n	8005e40 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005e3e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <HAL_FLASH_Program+0xd8>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	761a      	strb	r2, [r3, #24]

  return status;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e50:	20004120 	.word	0x20004120
 8005e54:	40022000 	.word	0x40022000

08005e58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_FLASH_Unlock+0x40>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005e6e:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_FLASH_Unlock+0x40>)
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <HAL_FLASH_Unlock+0x44>)
 8005e72:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_FLASH_Unlock+0x40>)
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <HAL_FLASH_Unlock+0x48>)
 8005e78:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <HAL_FLASH_Unlock+0x40>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40022000 	.word	0x40022000
 8005e9c:	45670123 	.word	0x45670123
 8005ea0:	cdef89ab 	.word	0xcdef89ab

08005ea4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_FLASH_Lock+0x1c>)
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <HAL_FLASH_Lock+0x1c>)
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40022000 	.word	0x40022000

08005ec4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <HAL_FLASH_GetError+0x10>)
 8005eca:	69db      	ldr	r3, [r3, #28]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	20004120 	.word	0x20004120

08005ed8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <FLASH_Program_HalfWord+0x30>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <FLASH_Program_HalfWord+0x34>)
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <FLASH_Program_HalfWord+0x34>)
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	801a      	strh	r2, [r3, #0]
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20004120 	.word	0x20004120
 8005f0c:	40022000 	.word	0x40022000

08005f10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005f18:	f7ff f866 	bl	8004fe8 <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005f1e:	e010      	b.n	8005f42 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d00c      	beq.n	8005f42 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <FLASH_WaitForLastOperation+0x2e>
 8005f2e:	f7ff f85b 	bl	8004fe8 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d201      	bcs.n	8005f42 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e025      	b.n	8005f8e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <FLASH_WaitForLastOperation+0x88>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e8      	bne.n	8005f20 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <FLASH_WaitForLastOperation+0x88>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <FLASH_WaitForLastOperation+0x88>)
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <FLASH_WaitForLastOperation+0x88>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <FLASH_WaitForLastOperation+0x88>)
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d105      	bne.n	8005f84 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005f78:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <FLASH_WaitForLastOperation+0x88>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005f84:	f000 f80a 	bl	8005f9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40022000 	.word	0x40022000

08005f9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005fa6:	4b23      	ldr	r3, [pc, #140]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005fb2:	4b21      	ldr	r3, [pc, #132]	; (8006038 <FLASH_SetErrorCode+0x9c>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f043 0302 	orr.w	r3, r3, #2
 8005fba:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <FLASH_SetErrorCode+0x9c>)
 8005fbc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f043 0310 	orr.w	r3, r3, #16
 8005fc4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005fd2:	4b19      	ldr	r3, [pc, #100]	; (8006038 <FLASH_SetErrorCode+0x9c>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <FLASH_SetErrorCode+0x9c>)
 8005fdc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f043 0304 	orr.w	r3, r3, #4
 8005fe4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005ff2:	4b11      	ldr	r3, [pc, #68]	; (8006038 <FLASH_SetErrorCode+0x9c>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f043 0304 	orr.w	r3, r3, #4
 8005ffa:	4a0f      	ldr	r2, [pc, #60]	; (8006038 <FLASH_SetErrorCode+0x9c>)
 8005ffc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f240 1201 	movw	r2, #257	; 0x101
 8006010:	4293      	cmp	r3, r2
 8006012:	d106      	bne.n	8006022 <FLASH_SetErrorCode+0x86>
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	4a06      	ldr	r2, [pc, #24]	; (8006034 <FLASH_SetErrorCode+0x98>)
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	61d3      	str	r3, [r2, #28]
}  
 8006020:	e002      	b.n	8006028 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <FLASH_SetErrorCode+0x98>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60d3      	str	r3, [r2, #12]
}  
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40022000 	.word	0x40022000
 8006038:	20004120 	.word	0x20004120

0800603c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800604e:	4b2f      	ldr	r3, [pc, #188]	; (800610c <HAL_FLASHEx_Erase+0xd0>)
 8006050:	7e1b      	ldrb	r3, [r3, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_FLASHEx_Erase+0x1e>
 8006056:	2302      	movs	r3, #2
 8006058:	e053      	b.n	8006102 <HAL_FLASHEx_Erase+0xc6>
 800605a:	4b2c      	ldr	r3, [pc, #176]	; (800610c <HAL_FLASHEx_Erase+0xd0>)
 800605c:	2201      	movs	r2, #1
 800605e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d116      	bne.n	8006096 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006068:	f24c 3050 	movw	r0, #50000	; 0xc350
 800606c:	f7ff ff50 	bl	8005f10 <FLASH_WaitForLastOperation>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d141      	bne.n	80060fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006076:	2001      	movs	r0, #1
 8006078:	f000 f84c 	bl	8006114 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800607c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006080:	f7ff ff46 	bl	8005f10 <FLASH_WaitForLastOperation>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006088:	4b21      	ldr	r3, [pc, #132]	; (8006110 <HAL_FLASHEx_Erase+0xd4>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4a20      	ldr	r2, [pc, #128]	; (8006110 <HAL_FLASHEx_Erase+0xd4>)
 800608e:	f023 0304 	bic.w	r3, r3, #4
 8006092:	6113      	str	r3, [r2, #16]
 8006094:	e031      	b.n	80060fa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006096:	f24c 3050 	movw	r0, #50000	; 0xc350
 800609a:	f7ff ff39 	bl	8005f10 <FLASH_WaitForLastOperation>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d12a      	bne.n	80060fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	e019      	b.n	80060e8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80060b4:	68b8      	ldr	r0, [r7, #8]
 80060b6:	f000 f849 	bl	800614c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060be:	f7ff ff27 	bl	8005f10 <FLASH_WaitForLastOperation>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80060c6:	4b12      	ldr	r3, [pc, #72]	; (8006110 <HAL_FLASHEx_Erase+0xd4>)
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	4a11      	ldr	r2, [pc, #68]	; (8006110 <HAL_FLASHEx_Erase+0xd4>)
 80060cc:	f023 0302 	bic.w	r3, r3, #2
 80060d0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	601a      	str	r2, [r3, #0]
            break;
 80060de:	e00c      	b.n	80060fa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	029a      	lsls	r2, r3, #10
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d3dc      	bcc.n	80060b4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <HAL_FLASHEx_Erase+0xd0>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	761a      	strb	r2, [r3, #24]

  return status;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20004120 	.word	0x20004120
 8006110:	40022000 	.word	0x40022000

08006114 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <FLASH_MassErase+0x30>)
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <FLASH_MassErase+0x34>)
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	4a08      	ldr	r2, [pc, #32]	; (8006148 <FLASH_MassErase+0x34>)
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <FLASH_MassErase+0x34>)
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	4a05      	ldr	r2, [pc, #20]	; (8006148 <FLASH_MassErase+0x34>)
 8006134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006138:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	20004120 	.word	0x20004120
 8006148:	40022000 	.word	0x40022000

0800614c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <FLASH_PageErase+0x38>)
 8006156:	2200      	movs	r2, #0
 8006158:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <FLASH_PageErase+0x3c>)
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <FLASH_PageErase+0x3c>)
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006166:	4a08      	ldr	r2, [pc, #32]	; (8006188 <FLASH_PageErase+0x3c>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <FLASH_PageErase+0x3c>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	4a05      	ldr	r2, [pc, #20]	; (8006188 <FLASH_PageErase+0x3c>)
 8006172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006176:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20004120 	.word	0x20004120
 8006188:	40022000 	.word	0x40022000

0800618c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800618c:	b480      	push	{r7}
 800618e:	b08b      	sub	sp, #44	; 0x2c
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006196:	2300      	movs	r3, #0
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800619a:	2300      	movs	r3, #0
 800619c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800619e:	e169      	b.n	8006474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80061a0:	2201      	movs	r2, #1
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	f040 8158 	bne.w	800646e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	4a9a      	ldr	r2, [pc, #616]	; (800642c <HAL_GPIO_Init+0x2a0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d05e      	beq.n	8006286 <HAL_GPIO_Init+0xfa>
 80061c8:	4a98      	ldr	r2, [pc, #608]	; (800642c <HAL_GPIO_Init+0x2a0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d875      	bhi.n	80062ba <HAL_GPIO_Init+0x12e>
 80061ce:	4a98      	ldr	r2, [pc, #608]	; (8006430 <HAL_GPIO_Init+0x2a4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d058      	beq.n	8006286 <HAL_GPIO_Init+0xfa>
 80061d4:	4a96      	ldr	r2, [pc, #600]	; (8006430 <HAL_GPIO_Init+0x2a4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d86f      	bhi.n	80062ba <HAL_GPIO_Init+0x12e>
 80061da:	4a96      	ldr	r2, [pc, #600]	; (8006434 <HAL_GPIO_Init+0x2a8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d052      	beq.n	8006286 <HAL_GPIO_Init+0xfa>
 80061e0:	4a94      	ldr	r2, [pc, #592]	; (8006434 <HAL_GPIO_Init+0x2a8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d869      	bhi.n	80062ba <HAL_GPIO_Init+0x12e>
 80061e6:	4a94      	ldr	r2, [pc, #592]	; (8006438 <HAL_GPIO_Init+0x2ac>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d04c      	beq.n	8006286 <HAL_GPIO_Init+0xfa>
 80061ec:	4a92      	ldr	r2, [pc, #584]	; (8006438 <HAL_GPIO_Init+0x2ac>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d863      	bhi.n	80062ba <HAL_GPIO_Init+0x12e>
 80061f2:	4a92      	ldr	r2, [pc, #584]	; (800643c <HAL_GPIO_Init+0x2b0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d046      	beq.n	8006286 <HAL_GPIO_Init+0xfa>
 80061f8:	4a90      	ldr	r2, [pc, #576]	; (800643c <HAL_GPIO_Init+0x2b0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d85d      	bhi.n	80062ba <HAL_GPIO_Init+0x12e>
 80061fe:	2b12      	cmp	r3, #18
 8006200:	d82a      	bhi.n	8006258 <HAL_GPIO_Init+0xcc>
 8006202:	2b12      	cmp	r3, #18
 8006204:	d859      	bhi.n	80062ba <HAL_GPIO_Init+0x12e>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <HAL_GPIO_Init+0x80>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006287 	.word	0x08006287
 8006210:	08006261 	.word	0x08006261
 8006214:	08006273 	.word	0x08006273
 8006218:	080062b5 	.word	0x080062b5
 800621c:	080062bb 	.word	0x080062bb
 8006220:	080062bb 	.word	0x080062bb
 8006224:	080062bb 	.word	0x080062bb
 8006228:	080062bb 	.word	0x080062bb
 800622c:	080062bb 	.word	0x080062bb
 8006230:	080062bb 	.word	0x080062bb
 8006234:	080062bb 	.word	0x080062bb
 8006238:	080062bb 	.word	0x080062bb
 800623c:	080062bb 	.word	0x080062bb
 8006240:	080062bb 	.word	0x080062bb
 8006244:	080062bb 	.word	0x080062bb
 8006248:	080062bb 	.word	0x080062bb
 800624c:	080062bb 	.word	0x080062bb
 8006250:	08006269 	.word	0x08006269
 8006254:	0800627d 	.word	0x0800627d
 8006258:	4a79      	ldr	r2, [pc, #484]	; (8006440 <HAL_GPIO_Init+0x2b4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800625e:	e02c      	b.n	80062ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	623b      	str	r3, [r7, #32]
          break;
 8006266:	e029      	b.n	80062bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	623b      	str	r3, [r7, #32]
          break;
 8006270:	e024      	b.n	80062bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	3308      	adds	r3, #8
 8006278:	623b      	str	r3, [r7, #32]
          break;
 800627a:	e01f      	b.n	80062bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	330c      	adds	r3, #12
 8006282:	623b      	str	r3, [r7, #32]
          break;
 8006284:	e01a      	b.n	80062bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800628e:	2304      	movs	r3, #4
 8006290:	623b      	str	r3, [r7, #32]
          break;
 8006292:	e013      	b.n	80062bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d105      	bne.n	80062a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800629c:	2308      	movs	r3, #8
 800629e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	611a      	str	r2, [r3, #16]
          break;
 80062a6:	e009      	b.n	80062bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062a8:	2308      	movs	r3, #8
 80062aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	615a      	str	r2, [r3, #20]
          break;
 80062b2:	e003      	b.n	80062bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80062b4:	2300      	movs	r3, #0
 80062b6:	623b      	str	r3, [r7, #32]
          break;
 80062b8:	e000      	b.n	80062bc <HAL_GPIO_Init+0x130>
          break;
 80062ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2bff      	cmp	r3, #255	; 0xff
 80062c0:	d801      	bhi.n	80062c6 <HAL_GPIO_Init+0x13a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	e001      	b.n	80062ca <HAL_GPIO_Init+0x13e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2bff      	cmp	r3, #255	; 0xff
 80062d0:	d802      	bhi.n	80062d8 <HAL_GPIO_Init+0x14c>
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	e002      	b.n	80062de <HAL_GPIO_Init+0x152>
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	3b08      	subs	r3, #8
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	210f      	movs	r1, #15
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	6a39      	ldr	r1, [r7, #32]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	431a      	orrs	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80b1 	beq.w	800646e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800630c:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <HAL_GPIO_Init+0x2b8>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	4a4c      	ldr	r2, [pc, #304]	; (8006444 <HAL_GPIO_Init+0x2b8>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6193      	str	r3, [r2, #24]
 8006318:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_GPIO_Init+0x2b8>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006324:	4a48      	ldr	r2, [pc, #288]	; (8006448 <HAL_GPIO_Init+0x2bc>)
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	3302      	adds	r3, #2
 800632c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	220f      	movs	r2, #15
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4013      	ands	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a40      	ldr	r2, [pc, #256]	; (800644c <HAL_GPIO_Init+0x2c0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <HAL_GPIO_Init+0x1ec>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3f      	ldr	r2, [pc, #252]	; (8006450 <HAL_GPIO_Init+0x2c4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00d      	beq.n	8006374 <HAL_GPIO_Init+0x1e8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3e      	ldr	r2, [pc, #248]	; (8006454 <HAL_GPIO_Init+0x2c8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d007      	beq.n	8006370 <HAL_GPIO_Init+0x1e4>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3d      	ldr	r2, [pc, #244]	; (8006458 <HAL_GPIO_Init+0x2cc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d101      	bne.n	800636c <HAL_GPIO_Init+0x1e0>
 8006368:	2303      	movs	r3, #3
 800636a:	e006      	b.n	800637a <HAL_GPIO_Init+0x1ee>
 800636c:	2304      	movs	r3, #4
 800636e:	e004      	b.n	800637a <HAL_GPIO_Init+0x1ee>
 8006370:	2302      	movs	r3, #2
 8006372:	e002      	b.n	800637a <HAL_GPIO_Init+0x1ee>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <HAL_GPIO_Init+0x1ee>
 8006378:	2300      	movs	r3, #0
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	f002 0203 	and.w	r2, r2, #3
 8006380:	0092      	lsls	r2, r2, #2
 8006382:	4093      	lsls	r3, r2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800638a:	492f      	ldr	r1, [pc, #188]	; (8006448 <HAL_GPIO_Init+0x2bc>)
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	3302      	adds	r3, #2
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	492c      	ldr	r1, [pc, #176]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e006      	b.n	80063c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063b2:	4b2a      	ldr	r3, [pc, #168]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	4928      	ldr	r1, [pc, #160]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063bc:	4013      	ands	r3, r2
 80063be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d006      	beq.n	80063da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80063cc:	4b23      	ldr	r3, [pc, #140]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4922      	ldr	r1, [pc, #136]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
 80063d8:	e006      	b.n	80063e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	491e      	ldr	r1, [pc, #120]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80063f4:	4b19      	ldr	r3, [pc, #100]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	4918      	ldr	r1, [pc, #96]	; (800645c <HAL_GPIO_Init+0x2d0>)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]
 8006400:	e006      	b.n	8006410 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006402:	4b16      	ldr	r3, [pc, #88]	; (800645c <HAL_GPIO_Init+0x2d0>)
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	43db      	mvns	r3, r3
 800640a:	4914      	ldr	r1, [pc, #80]	; (800645c <HAL_GPIO_Init+0x2d0>)
 800640c:	4013      	ands	r3, r2
 800640e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d021      	beq.n	8006460 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <HAL_GPIO_Init+0x2d0>)
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	490e      	ldr	r1, [pc, #56]	; (800645c <HAL_GPIO_Init+0x2d0>)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	4313      	orrs	r3, r2
 8006426:	60cb      	str	r3, [r1, #12]
 8006428:	e021      	b.n	800646e <HAL_GPIO_Init+0x2e2>
 800642a:	bf00      	nop
 800642c:	10320000 	.word	0x10320000
 8006430:	10310000 	.word	0x10310000
 8006434:	10220000 	.word	0x10220000
 8006438:	10210000 	.word	0x10210000
 800643c:	10120000 	.word	0x10120000
 8006440:	10110000 	.word	0x10110000
 8006444:	40021000 	.word	0x40021000
 8006448:	40010000 	.word	0x40010000
 800644c:	40010800 	.word	0x40010800
 8006450:	40010c00 	.word	0x40010c00
 8006454:	40011000 	.word	0x40011000
 8006458:	40011400 	.word	0x40011400
 800645c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <HAL_GPIO_Init+0x304>)
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	43db      	mvns	r3, r3
 8006468:	4909      	ldr	r1, [pc, #36]	; (8006490 <HAL_GPIO_Init+0x304>)
 800646a:	4013      	ands	r3, r2
 800646c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	3301      	adds	r3, #1
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	f47f ae8e 	bne.w	80061a0 <HAL_GPIO_Init+0x14>
  }
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	372c      	adds	r7, #44	; 0x2c
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	40010400 	.word	0x40010400

08006494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	887b      	ldrh	r3, [r7, #2]
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064ac:	2301      	movs	r3, #1
 80064ae:	73fb      	strb	r3, [r7, #15]
 80064b0:	e001      	b.n	80064b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	807b      	strh	r3, [r7, #2]
 80064ce:	4613      	mov	r3, r2
 80064d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064d2:	787b      	ldrb	r3, [r7, #1]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064d8:	887a      	ldrh	r2, [r7, #2]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80064de:	e003      	b.n	80064e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	041a      	lsls	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	611a      	str	r2, [r3, #16]
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
	...

080064f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e12b      	b.n	800675e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fd ff24 	bl	8004368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2224      	movs	r2, #36	; 0x24
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0201 	bic.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006558:	f000 fce4 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 800655c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4a81      	ldr	r2, [pc, #516]	; (8006768 <HAL_I2C_Init+0x274>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d807      	bhi.n	8006578 <HAL_I2C_Init+0x84>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a80      	ldr	r2, [pc, #512]	; (800676c <HAL_I2C_Init+0x278>)
 800656c:	4293      	cmp	r3, r2
 800656e:	bf94      	ite	ls
 8006570:	2301      	movls	r3, #1
 8006572:	2300      	movhi	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e006      	b.n	8006586 <HAL_I2C_Init+0x92>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a7d      	ldr	r2, [pc, #500]	; (8006770 <HAL_I2C_Init+0x27c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	bf94      	ite	ls
 8006580:	2301      	movls	r3, #1
 8006582:	2300      	movhi	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e0e7      	b.n	800675e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a78      	ldr	r2, [pc, #480]	; (8006774 <HAL_I2C_Init+0x280>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	0c9b      	lsrs	r3, r3, #18
 8006598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a6a      	ldr	r2, [pc, #424]	; (8006768 <HAL_I2C_Init+0x274>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d802      	bhi.n	80065c8 <HAL_I2C_Init+0xd4>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	3301      	adds	r3, #1
 80065c6:	e009      	b.n	80065dc <HAL_I2C_Init+0xe8>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	4a69      	ldr	r2, [pc, #420]	; (8006778 <HAL_I2C_Init+0x284>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	099b      	lsrs	r3, r3, #6
 80065da:	3301      	adds	r3, #1
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	495c      	ldr	r1, [pc, #368]	; (8006768 <HAL_I2C_Init+0x274>)
 80065f8:	428b      	cmp	r3, r1
 80065fa:	d819      	bhi.n	8006630 <HAL_I2C_Init+0x13c>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1e59      	subs	r1, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	fbb1 f3f3 	udiv	r3, r1, r3
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006610:	400b      	ands	r3, r1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <HAL_I2C_Init+0x138>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1e59      	subs	r1, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	fbb1 f3f3 	udiv	r3, r1, r3
 8006624:	3301      	adds	r3, #1
 8006626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800662a:	e051      	b.n	80066d0 <HAL_I2C_Init+0x1dc>
 800662c:	2304      	movs	r3, #4
 800662e:	e04f      	b.n	80066d0 <HAL_I2C_Init+0x1dc>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d111      	bne.n	800665c <HAL_I2C_Init+0x168>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1e58      	subs	r0, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6859      	ldr	r1, [r3, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	440b      	add	r3, r1
 8006646:	fbb0 f3f3 	udiv	r3, r0, r3
 800664a:	3301      	adds	r3, #1
 800664c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf0c      	ite	eq
 8006654:	2301      	moveq	r3, #1
 8006656:	2300      	movne	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e012      	b.n	8006682 <HAL_I2C_Init+0x18e>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	1e58      	subs	r0, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6859      	ldr	r1, [r3, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	0099      	lsls	r1, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006672:	3301      	adds	r3, #1
 8006674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_I2C_Init+0x196>
 8006686:	2301      	movs	r3, #1
 8006688:	e022      	b.n	80066d0 <HAL_I2C_Init+0x1dc>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10e      	bne.n	80066b0 <HAL_I2C_Init+0x1bc>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1e58      	subs	r0, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	440b      	add	r3, r1
 80066a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a4:	3301      	adds	r3, #1
 80066a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	e00f      	b.n	80066d0 <HAL_I2C_Init+0x1dc>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1e58      	subs	r0, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6859      	ldr	r1, [r3, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	0099      	lsls	r1, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c6:	3301      	adds	r3, #1
 80066c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	6809      	ldr	r1, [r1, #0]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6911      	ldr	r1, [r2, #16]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	68d2      	ldr	r2, [r2, #12]
 800670a:	4311      	orrs	r1, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	430b      	orrs	r3, r1
 8006712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	000186a0 	.word	0x000186a0
 800676c:	001e847f 	.word	0x001e847f
 8006770:	003d08ff 	.word	0x003d08ff
 8006774:	431bde83 	.word	0x431bde83
 8006778:	10624dd3 	.word	0x10624dd3

0800677c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e272      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8087 	beq.w	80068aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800679c:	4b92      	ldr	r3, [pc, #584]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f003 030c 	and.w	r3, r3, #12
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d00c      	beq.n	80067c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067a8:	4b8f      	ldr	r3, [pc, #572]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f003 030c 	and.w	r3, r3, #12
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d112      	bne.n	80067da <HAL_RCC_OscConfig+0x5e>
 80067b4:	4b8c      	ldr	r3, [pc, #560]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d10b      	bne.n	80067da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c2:	4b89      	ldr	r3, [pc, #548]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d06c      	beq.n	80068a8 <HAL_RCC_OscConfig+0x12c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d168      	bne.n	80068a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e24c      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e2:	d106      	bne.n	80067f2 <HAL_RCC_OscConfig+0x76>
 80067e4:	4b80      	ldr	r3, [pc, #512]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a7f      	ldr	r2, [pc, #508]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80067ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e02e      	b.n	8006850 <HAL_RCC_OscConfig+0xd4>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10c      	bne.n	8006814 <HAL_RCC_OscConfig+0x98>
 80067fa:	4b7b      	ldr	r3, [pc, #492]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a7a      	ldr	r2, [pc, #488]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	4b78      	ldr	r3, [pc, #480]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a77      	ldr	r2, [pc, #476]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800680c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e01d      	b.n	8006850 <HAL_RCC_OscConfig+0xd4>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681c:	d10c      	bne.n	8006838 <HAL_RCC_OscConfig+0xbc>
 800681e:	4b72      	ldr	r3, [pc, #456]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a71      	ldr	r2, [pc, #452]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	4b6f      	ldr	r3, [pc, #444]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6e      	ldr	r2, [pc, #440]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e00b      	b.n	8006850 <HAL_RCC_OscConfig+0xd4>
 8006838:	4b6b      	ldr	r3, [pc, #428]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6a      	ldr	r2, [pc, #424]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800683e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	4b68      	ldr	r3, [pc, #416]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a67      	ldr	r2, [pc, #412]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800684a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006858:	f7fe fbc6 	bl	8004fe8 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006860:	f7fe fbc2 	bl	8004fe8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e200      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006872:	4b5d      	ldr	r3, [pc, #372]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0xe4>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006880:	f7fe fbb2 	bl	8004fe8 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006888:	f7fe fbae 	bl	8004fe8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	; 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e1ec      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689a:	4b53      	ldr	r3, [pc, #332]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x10c>
 80068a6:	e000      	b.n	80068aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d063      	beq.n	800697e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068b6:	4b4c      	ldr	r3, [pc, #304]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068c2:	4b49      	ldr	r3, [pc, #292]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d11c      	bne.n	8006908 <HAL_RCC_OscConfig+0x18c>
 80068ce:	4b46      	ldr	r3, [pc, #280]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d116      	bne.n	8006908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	4b43      	ldr	r3, [pc, #268]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_RCC_OscConfig+0x176>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d001      	beq.n	80068f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e1c0      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4939      	ldr	r1, [pc, #228]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006906:	e03a      	b.n	800697e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006910:	4b36      	ldr	r3, [pc, #216]	; (80069ec <HAL_RCC_OscConfig+0x270>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006916:	f7fe fb67 	bl	8004fe8 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691e:	f7fe fb63 	bl	8004fe8 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1a1      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006930:	4b2d      	ldr	r3, [pc, #180]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693c:	4b2a      	ldr	r3, [pc, #168]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4927      	ldr	r1, [pc, #156]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 800694c:	4313      	orrs	r3, r2
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	e015      	b.n	800697e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006952:	4b26      	ldr	r3, [pc, #152]	; (80069ec <HAL_RCC_OscConfig+0x270>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006958:	f7fe fb46 	bl	8004fe8 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006960:	f7fe fb42 	bl	8004fe8 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e180      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d03a      	beq.n	8006a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d019      	beq.n	80069c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <HAL_RCC_OscConfig+0x274>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006998:	f7fe fb26 	bl	8004fe8 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a0:	f7fe fb22 	bl	8004fe8 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e160      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RCC_OscConfig+0x26c>)
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069be:	2001      	movs	r0, #1
 80069c0:	f000 fad8 	bl	8006f74 <RCC_Delay>
 80069c4:	e01c      	b.n	8006a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_RCC_OscConfig+0x274>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069cc:	f7fe fb0c 	bl	8004fe8 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d2:	e00f      	b.n	80069f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d4:	f7fe fb08 	bl	8004fe8 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d908      	bls.n	80069f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e146      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
 80069e6:	bf00      	nop
 80069e8:	40021000 	.word	0x40021000
 80069ec:	42420000 	.word	0x42420000
 80069f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069f4:	4b92      	ldr	r3, [pc, #584]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e9      	bne.n	80069d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80a6 	beq.w	8006b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a12:	4b8b      	ldr	r3, [pc, #556]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a1e:	4b88      	ldr	r3, [pc, #544]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	4a87      	ldr	r2, [pc, #540]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a28:	61d3      	str	r3, [r2, #28]
 8006a2a:	4b85      	ldr	r3, [pc, #532]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a32:	60bb      	str	r3, [r7, #8]
 8006a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3a:	4b82      	ldr	r3, [pc, #520]	; (8006c44 <HAL_RCC_OscConfig+0x4c8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d118      	bne.n	8006a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a46:	4b7f      	ldr	r3, [pc, #508]	; (8006c44 <HAL_RCC_OscConfig+0x4c8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	; (8006c44 <HAL_RCC_OscConfig+0x4c8>)
 8006a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a52:	f7fe fac9 	bl	8004fe8 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a5a:	f7fe fac5 	bl	8004fe8 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b64      	cmp	r3, #100	; 0x64
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e103      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6c:	4b75      	ldr	r3, [pc, #468]	; (8006c44 <HAL_RCC_OscConfig+0x4c8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCC_OscConfig+0x312>
 8006a80:	4b6f      	ldr	r3, [pc, #444]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	4a6e      	ldr	r2, [pc, #440]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	6213      	str	r3, [r2, #32]
 8006a8c:	e02d      	b.n	8006aea <HAL_RCC_OscConfig+0x36e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10c      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x334>
 8006a96:	4b6a      	ldr	r3, [pc, #424]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	4a69      	ldr	r2, [pc, #420]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	6213      	str	r3, [r2, #32]
 8006aa2:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	4a66      	ldr	r2, [pc, #408]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006aa8:	f023 0304 	bic.w	r3, r3, #4
 8006aac:	6213      	str	r3, [r2, #32]
 8006aae:	e01c      	b.n	8006aea <HAL_RCC_OscConfig+0x36e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b05      	cmp	r3, #5
 8006ab6:	d10c      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x356>
 8006ab8:	4b61      	ldr	r3, [pc, #388]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	4a60      	ldr	r2, [pc, #384]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006abe:	f043 0304 	orr.w	r3, r3, #4
 8006ac2:	6213      	str	r3, [r2, #32]
 8006ac4:	4b5e      	ldr	r3, [pc, #376]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	4a5d      	ldr	r2, [pc, #372]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	6213      	str	r3, [r2, #32]
 8006ad0:	e00b      	b.n	8006aea <HAL_RCC_OscConfig+0x36e>
 8006ad2:	4b5b      	ldr	r3, [pc, #364]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	4a5a      	ldr	r2, [pc, #360]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	6213      	str	r3, [r2, #32]
 8006ade:	4b58      	ldr	r3, [pc, #352]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	4a57      	ldr	r2, [pc, #348]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006ae4:	f023 0304 	bic.w	r3, r3, #4
 8006ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d015      	beq.n	8006b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af2:	f7fe fa79 	bl	8004fe8 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af8:	e00a      	b.n	8006b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f7fe fa75 	bl	8004fe8 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e0b1      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b10:	4b4b      	ldr	r3, [pc, #300]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0ee      	beq.n	8006afa <HAL_RCC_OscConfig+0x37e>
 8006b1c:	e014      	b.n	8006b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1e:	f7fe fa63 	bl	8004fe8 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fe fa5f 	bl	8004fe8 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e09b      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3c:	4b40      	ldr	r3, [pc, #256]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1ee      	bne.n	8006b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d105      	bne.n	8006b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b4e:	4b3c      	ldr	r3, [pc, #240]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4a3b      	ldr	r2, [pc, #236]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8087 	beq.w	8006c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b64:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f003 030c 	and.w	r3, r3, #12
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d061      	beq.n	8006c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d146      	bne.n	8006c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b78:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <HAL_RCC_OscConfig+0x4cc>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7e:	f7fe fa33 	bl	8004fe8 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b86:	f7fe fa2f 	bl	8004fe8 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e06d      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b98:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1f0      	bne.n	8006b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d108      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bae:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	4921      	ldr	r1, [pc, #132]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc0:	4b1f      	ldr	r3, [pc, #124]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a19      	ldr	r1, [r3, #32]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	491b      	ldr	r1, [pc, #108]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd8:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bde:	f7fe fa03 	bl	8004fe8 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be6:	f7fe f9ff 	bl	8004fe8 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e03d      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bf8:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x46a>
 8006c04:	e035      	b.n	8006c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c06:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <HAL_RCC_OscConfig+0x4cc>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0c:	f7fe f9ec 	bl	8004fe8 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fe f9e8 	bl	8004fe8 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e026      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_RCC_OscConfig+0x4c4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x498>
 8006c32:	e01e      	b.n	8006c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d107      	bne.n	8006c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e019      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40007000 	.word	0x40007000
 8006c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCC_OscConfig+0x500>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d001      	beq.n	8006c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40021000 	.word	0x40021000

08006c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0d0      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c94:	4b6a      	ldr	r3, [pc, #424]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d910      	bls.n	8006cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca2:	4b67      	ldr	r3, [pc, #412]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 0207 	bic.w	r2, r3, #7
 8006caa:	4965      	ldr	r1, [pc, #404]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b63      	ldr	r3, [pc, #396]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0b8      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cdc:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf4:	4b53      	ldr	r3, [pc, #332]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a52      	ldr	r2, [pc, #328]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	4b50      	ldr	r3, [pc, #320]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	494d      	ldr	r1, [pc, #308]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d040      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d26:	4b47      	ldr	r3, [pc, #284]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d115      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e07f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d3e:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e073      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4e:	4b3d      	ldr	r3, [pc, #244]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e06b      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d5e:	4b39      	ldr	r3, [pc, #228]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f023 0203 	bic.w	r2, r3, #3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4936      	ldr	r1, [pc, #216]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d70:	f7fe f93a 	bl	8004fe8 <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d78:	f7fe f936 	bl	8004fe8 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e053      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8e:	4b2d      	ldr	r3, [pc, #180]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 020c 	and.w	r2, r3, #12
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d1eb      	bne.n	8006d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d210      	bcs.n	8006dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 0207 	bic.w	r2, r3, #7
 8006db6:	4922      	ldr	r1, [pc, #136]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e032      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ddc:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4916      	ldr	r1, [pc, #88]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	490e      	ldr	r1, [pc, #56]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e0e:	f000 f821 	bl	8006e54 <HAL_RCC_GetSysClockFreq>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <HAL_RCC_ClockConfig+0x1c4>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	490a      	ldr	r1, [pc, #40]	; (8006e48 <HAL_RCC_ClockConfig+0x1c8>)
 8006e20:	5ccb      	ldrb	r3, [r1, r3]
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <HAL_RCC_ClockConfig+0x1cc>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <HAL_RCC_ClockConfig+0x1d0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe f898 	bl	8004f64 <HAL_InitTick>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40022000 	.word	0x40022000
 8006e44:	40021000 	.word	0x40021000
 8006e48:	080090e0 	.word	0x080090e0
 8006e4c:	20000074 	.word	0x20000074
 8006e50:	20000080 	.word	0x20000080

08006e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e54:	b490      	push	{r4, r7}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e5a:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <HAL_RCC_GetSysClockFreq+0xac>)
 8006e5c:	1d3c      	adds	r4, r7, #4
 8006e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e64:	f240 2301 	movw	r3, #513	; 0x201
 8006e68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	2300      	movs	r3, #0
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e7e:	4b21      	ldr	r3, [pc, #132]	; (8006f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d002      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x40>
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d003      	beq.n	8006e9a <HAL_RCC_GetSysClockFreq+0x46>
 8006e92:	e02b      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e94:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e96:	623b      	str	r3, [r7, #32]
      break;
 8006e98:	e02b      	b.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	0c9b      	lsrs	r3, r3, #18
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	3328      	adds	r3, #40	; 0x28
 8006ea4:	443b      	add	r3, r7
 8006ea6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006eaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d012      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	0c5b      	lsrs	r3, r3, #17
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	3328      	adds	r3, #40	; 0x28
 8006ec2:	443b      	add	r3, r7
 8006ec4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ec8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	4a0e      	ldr	r2, [pc, #56]	; (8006f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ece:	fb03 f202 	mul.w	r2, r3, r2
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eda:	e004      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	4a0b      	ldr	r2, [pc, #44]	; (8006f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	623b      	str	r3, [r7, #32]
      break;
 8006eea:	e002      	b.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006eee:	623b      	str	r3, [r7, #32]
      break;
 8006ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3728      	adds	r7, #40	; 0x28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc90      	pop	{r4, r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	080090d0 	.word	0x080090d0
 8006f04:	40021000 	.word	0x40021000
 8006f08:	007a1200 	.word	0x007a1200
 8006f0c:	003d0900 	.word	0x003d0900

08006f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f14:	4b02      	ldr	r3, [pc, #8]	; (8006f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f16:	681b      	ldr	r3, [r3, #0]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr
 8006f20:	20000074 	.word	0x20000074

08006f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f28:	f7ff fff2 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	4903      	ldr	r1, [pc, #12]	; (8006f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40021000 	.word	0x40021000
 8006f48:	080090f0 	.word	0x080090f0

08006f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f50:	f7ff ffde 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f54:	4602      	mov	r2, r0
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	0adb      	lsrs	r3, r3, #11
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	4903      	ldr	r1, [pc, #12]	; (8006f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f62:	5ccb      	ldrb	r3, [r1, r3]
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	080090f0 	.word	0x080090f0

08006f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <RCC_Delay+0x34>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <RCC_Delay+0x38>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	0a5b      	lsrs	r3, r3, #9
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f90:	bf00      	nop
  }
  while (Delay --);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	60fa      	str	r2, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f9      	bne.n	8006f90 <RCC_Delay+0x1c>
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	20000074 	.word	0x20000074
 8006fac:	10624dd3 	.word	0x10624dd3

08006fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d07d      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd0:	4b4f      	ldr	r3, [pc, #316]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10d      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fdc:	4b4c      	ldr	r3, [pc, #304]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4a4b      	ldr	r2, [pc, #300]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	61d3      	str	r3, [r2, #28]
 8006fe8:	4b49      	ldr	r3, [pc, #292]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff8:	4b46      	ldr	r3, [pc, #280]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007000:	2b00      	cmp	r3, #0
 8007002:	d118      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007004:	4b43      	ldr	r3, [pc, #268]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a42      	ldr	r2, [pc, #264]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800700a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007010:	f7fd ffea 	bl	8004fe8 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007016:	e008      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007018:	f7fd ffe6 	bl	8004fe8 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e06d      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702a:	4b3a      	ldr	r3, [pc, #232]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007036:	4b36      	ldr	r3, [pc, #216]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d02e      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	429a      	cmp	r2, r3
 8007052:	d027      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007054:	4b2e      	ldr	r3, [pc, #184]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800705e:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007060:	2201      	movs	r2, #1
 8007062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007064:	4b2c      	ldr	r3, [pc, #176]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800706a:	4a29      	ldr	r2, [pc, #164]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d014      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707a:	f7fd ffb5 	bl	8004fe8 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007080:	e00a      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007082:	f7fd ffb1 	bl	8004fe8 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007090:	4293      	cmp	r3, r2
 8007092:	d901      	bls.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e036      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0ee      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4917      	ldr	r1, [pc, #92]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d105      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070bc:	4b14      	ldr	r3, [pc, #80]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	4a13      	ldr	r2, [pc, #76]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	490b      	ldr	r1, [pc, #44]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f2:	4b07      	ldr	r3, [pc, #28]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	4904      	ldr	r1, [pc, #16]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007100:	4313      	orrs	r3, r2
 8007102:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40021000 	.word	0x40021000
 8007114:	40007000 	.word	0x40007000
 8007118:	42420440 	.word	0x42420440

0800711c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e041      	b.n	80071b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fd f9ba 	bl	80044bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f000 fbda 	bl	8007914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e041      	b.n	8007250 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f839 	bl	8007258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f000 fb8b 	bl	8007914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
	...

0800726c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d109      	bne.n	8007290 <HAL_TIM_PWM_Start+0x24>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e022      	b.n	80072d6 <HAL_TIM_PWM_Start+0x6a>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b04      	cmp	r3, #4
 8007294:	d109      	bne.n	80072aa <HAL_TIM_PWM_Start+0x3e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b01      	cmp	r3, #1
 80072a0:	bf14      	ite	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	2300      	moveq	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	e015      	b.n	80072d6 <HAL_TIM_PWM_Start+0x6a>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d109      	bne.n	80072c4 <HAL_TIM_PWM_Start+0x58>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	bf14      	ite	ne
 80072bc:	2301      	movne	r3, #1
 80072be:	2300      	moveq	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	e008      	b.n	80072d6 <HAL_TIM_PWM_Start+0x6a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e05e      	b.n	800739c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_PWM_Start+0x82>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072ec:	e013      	b.n	8007316 <HAL_TIM_PWM_Start+0xaa>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d104      	bne.n	80072fe <HAL_TIM_PWM_Start+0x92>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072fc:	e00b      	b.n	8007316 <HAL_TIM_PWM_Start+0xaa>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d104      	bne.n	800730e <HAL_TIM_PWM_Start+0xa2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800730c:	e003      	b.n	8007316 <HAL_TIM_PWM_Start+0xaa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2201      	movs	r2, #1
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fd78 	bl	8007e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <HAL_TIM_PWM_Start+0x138>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d107      	bne.n	800733e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800733c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <HAL_TIM_PWM_Start+0x138>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_TIM_PWM_Start+0xfa>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007350:	d009      	beq.n	8007366 <HAL_TIM_PWM_Start+0xfa>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <HAL_TIM_PWM_Start+0x13c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_TIM_PWM_Start+0xfa>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a12      	ldr	r2, [pc, #72]	; (80073ac <HAL_TIM_PWM_Start+0x140>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d111      	bne.n	800738a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b06      	cmp	r3, #6
 8007376:	d010      	beq.n	800739a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007388:	e007      	b.n	800739a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0201 	orr.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800

080073b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e093      	b.n	80074ec <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7fd f803 	bl	80043e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f4:	f023 0307 	bic.w	r3, r3, #7
 80073f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3304      	adds	r3, #4
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f000 fa85 	bl	8007914 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	4313      	orrs	r3, r2
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007450:	f023 030c 	bic.w	r3, r3, #12
 8007454:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800745c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	4313      	orrs	r3, r2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	011a      	lsls	r2, r3, #4
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	031b      	lsls	r3, r3, #12
 8007480:	4313      	orrs	r3, r2
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4313      	orrs	r3, r2
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007504:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800750c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007514:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800751c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d110      	bne.n	8007546 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d102      	bne.n	8007530 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800752a:	7b7b      	ldrb	r3, [r7, #13]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e069      	b.n	8007608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007544:	e031      	b.n	80075aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b04      	cmp	r3, #4
 800754a:	d110      	bne.n	800756e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d102      	bne.n	8007558 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007552:	7b3b      	ldrb	r3, [r7, #12]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d001      	beq.n	800755c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e055      	b.n	8007608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800756c:	e01d      	b.n	80075aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d108      	bne.n	8007586 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d105      	bne.n	8007586 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800757a:	7b7b      	ldrb	r3, [r7, #13]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d102      	bne.n	8007586 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007580:	7b3b      	ldrb	r3, [r7, #12]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d001      	beq.n	800758a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e03e      	b.n	8007608 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_TIM_Encoder_Start+0xc4>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d008      	beq.n	80075c8 <HAL_TIM_Encoder_Start+0xd4>
 80075b6:	e00f      	b.n	80075d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2201      	movs	r2, #1
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fc27 	bl	8007e14 <TIM_CCxChannelCmd>
      break;
 80075c6:	e016      	b.n	80075f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	2104      	movs	r1, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fc1f 	bl	8007e14 <TIM_CCxChannelCmd>
      break;
 80075d6:	e00e      	b.n	80075f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2201      	movs	r2, #1
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fc17 	bl	8007e14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2201      	movs	r2, #1
 80075ec:	2104      	movs	r1, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fc10 	bl	8007e14 <TIM_CCxChannelCmd>
      break;
 80075f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0201 	orr.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007626:	2302      	movs	r3, #2
 8007628:	e0ac      	b.n	8007784 <HAL_TIM_PWM_ConfigChannel+0x174>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b0c      	cmp	r3, #12
 8007636:	f200 809f 	bhi.w	8007778 <HAL_TIM_PWM_ConfigChannel+0x168>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007675 	.word	0x08007675
 8007644:	08007779 	.word	0x08007779
 8007648:	08007779 	.word	0x08007779
 800764c:	08007779 	.word	0x08007779
 8007650:	080076b5 	.word	0x080076b5
 8007654:	08007779 	.word	0x08007779
 8007658:	08007779 	.word	0x08007779
 800765c:	08007779 	.word	0x08007779
 8007660:	080076f7 	.word	0x080076f7
 8007664:	08007779 	.word	0x08007779
 8007668:	08007779 	.word	0x08007779
 800766c:	08007779 	.word	0x08007779
 8007670:	08007737 	.word	0x08007737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f9ac 	bl	80079d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0208 	orr.w	r2, r2, #8
 800768e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0204 	bic.w	r2, r2, #4
 800769e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6999      	ldr	r1, [r3, #24]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	619a      	str	r2, [r3, #24]
      break;
 80076b2:	e062      	b.n	800777a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f9f2 	bl	8007aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6999      	ldr	r1, [r3, #24]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	021a      	lsls	r2, r3, #8
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	619a      	str	r2, [r3, #24]
      break;
 80076f4:	e041      	b.n	800777a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fa3b 	bl	8007b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0208 	orr.w	r2, r2, #8
 8007710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0204 	bic.w	r2, r2, #4
 8007720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69d9      	ldr	r1, [r3, #28]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	61da      	str	r2, [r3, #28]
      break;
 8007734:	e021      	b.n	800777a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fa85 	bl	8007c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69d9      	ldr	r1, [r3, #28]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	021a      	lsls	r2, r3, #8
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	61da      	str	r2, [r3, #28]
      break;
 8007776:	e000      	b.n	800777a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_TIM_ConfigClockSource+0x18>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e0b3      	b.n	800790c <HAL_TIM_ConfigClockSource+0x180>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077dc:	d03e      	beq.n	800785c <HAL_TIM_ConfigClockSource+0xd0>
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e2:	f200 8087 	bhi.w	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	f000 8085 	beq.w	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 80077ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f2:	d87f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 80077f4:	2b70      	cmp	r3, #112	; 0x70
 80077f6:	d01a      	beq.n	800782e <HAL_TIM_ConfigClockSource+0xa2>
 80077f8:	2b70      	cmp	r3, #112	; 0x70
 80077fa:	d87b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 80077fc:	2b60      	cmp	r3, #96	; 0x60
 80077fe:	d050      	beq.n	80078a2 <HAL_TIM_ConfigClockSource+0x116>
 8007800:	2b60      	cmp	r3, #96	; 0x60
 8007802:	d877      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 8007804:	2b50      	cmp	r3, #80	; 0x50
 8007806:	d03c      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0xf6>
 8007808:	2b50      	cmp	r3, #80	; 0x50
 800780a:	d873      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d058      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0x136>
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d86f      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 8007814:	2b30      	cmp	r3, #48	; 0x30
 8007816:	d064      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
 8007818:	2b30      	cmp	r3, #48	; 0x30
 800781a:	d86b      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 800781c:	2b20      	cmp	r3, #32
 800781e:	d060      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
 8007820:	2b20      	cmp	r3, #32
 8007822:	d867      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d05c      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
 8007828:	2b10      	cmp	r3, #16
 800782a:	d05a      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800782c:	e062      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6899      	ldr	r1, [r3, #8]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f000 faca 	bl	8007dd6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007850:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	609a      	str	r2, [r3, #8]
      break;
 800785a:	e04e      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	6899      	ldr	r1, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f000 fab3 	bl	8007dd6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787e:	609a      	str	r2, [r3, #8]
      break;
 8007880:	e03b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	461a      	mov	r2, r3
 8007890:	f000 fa2a 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2150      	movs	r1, #80	; 0x50
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa81 	bl	8007da2 <TIM_ITRx_SetConfig>
      break;
 80078a0:	e02b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f000 fa48 	bl	8007d44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2160      	movs	r1, #96	; 0x60
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fa71 	bl	8007da2 <TIM_ITRx_SetConfig>
      break;
 80078c0:	e01b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f000 fa0a 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2140      	movs	r1, #64	; 0x40
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fa61 	bl	8007da2 <TIM_ITRx_SetConfig>
      break;
 80078e0:	e00b      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f000 fa58 	bl	8007da2 <TIM_ITRx_SetConfig>
        break;
 80078f2:	e002      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a29      	ldr	r2, [pc, #164]	; (80079cc <TIM_Base_SetConfig+0xb8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00b      	beq.n	8007944 <TIM_Base_SetConfig+0x30>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007932:	d007      	beq.n	8007944 <TIM_Base_SetConfig+0x30>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <TIM_Base_SetConfig+0xbc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_Base_SetConfig+0x30>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a25      	ldr	r2, [pc, #148]	; (80079d4 <TIM_Base_SetConfig+0xc0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d108      	bne.n	8007956 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <TIM_Base_SetConfig+0xb8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00b      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007964:	d007      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <TIM_Base_SetConfig+0xbc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_Base_SetConfig+0x62>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <TIM_Base_SetConfig+0xc0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a07      	ldr	r2, [pc, #28]	; (80079cc <TIM_Base_SetConfig+0xb8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d103      	bne.n	80079bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	615a      	str	r2, [r3, #20]
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800

080079d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f023 0201 	bic.w	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 0302 	bic.w	r3, r3, #2
 8007a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a1c      	ldr	r2, [pc, #112]	; (8007aa0 <TIM_OC1_SetConfig+0xc8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0308 	bic.w	r3, r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <TIM_OC1_SetConfig+0xc8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d111      	bne.n	8007a7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	621a      	str	r2, [r3, #32]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40012c00 	.word	0x40012c00

08007aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f023 0210 	bic.w	r2, r3, #16
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f023 0320 	bic.w	r3, r3, #32
 8007aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <TIM_OC2_SetConfig+0xd0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d10d      	bne.n	8007b20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a14      	ldr	r2, [pc, #80]	; (8007b74 <TIM_OC2_SetConfig+0xd0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d113      	bne.n	8007b50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr
 8007b74:	40012c00 	.word	0x40012c00

08007b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <TIM_OC3_SetConfig+0xd0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10d      	bne.n	8007bf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <TIM_OC3_SetConfig+0xd0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d113      	bne.n	8007c22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	621a      	str	r2, [r3, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	40012c00 	.word	0x40012c00

08007c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	031b      	lsls	r3, r3, #12
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0f      	ldr	r2, [pc, #60]	; (8007ce4 <TIM_OC4_SetConfig+0x98>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d109      	bne.n	8007cc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	019b      	lsls	r3, r3, #6
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00

08007ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f023 030a 	bic.w	r3, r3, #10
 8007d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	f023 0210 	bic.w	r2, r3, #16
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	031b      	lsls	r3, r3, #12
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	621a      	str	r2, [r3, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f043 0307 	orr.w	r3, r3, #7
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	609a      	str	r2, [r3, #8]
}
 8007dcc:	bf00      	nop
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b087      	sub	sp, #28
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007df0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	021a      	lsls	r2, r3, #8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	609a      	str	r2, [r3, #8]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr

08007e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2201      	movs	r2, #1
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	43db      	mvns	r3, r3
 8007e36:	401a      	ands	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e046      	b.n	8007f02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d009      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800

08007f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e03f      	b.n	8007faa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fc fb0e 	bl	8004560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2224      	movs	r2, #36	; 0x24
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f905 	bl	800816c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695a      	ldr	r2, [r3, #20]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b08a      	sub	sp, #40	; 0x28
 8007fb6:	af02      	add	r7, sp, #8
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	d17c      	bne.n	80080cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_UART_Transmit+0x2c>
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e075      	b.n	80080ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_UART_Transmit+0x3e>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e06e      	b.n	80080ce <HAL_UART_Transmit+0x11c>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2221      	movs	r2, #33	; 0x21
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008006:	f7fc ffef 	bl	8004fe8 <HAL_GetTick>
 800800a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	88fa      	ldrh	r2, [r7, #6]
 8008016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008020:	d108      	bne.n	8008034 <HAL_UART_Transmit+0x82>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e003      	b.n	800803c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008044:	e02a      	b.n	800809c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f840 	bl	80080d6 <UART_WaitOnFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e036      	b.n	80080ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	3302      	adds	r3, #2
 800807a:	61bb      	str	r3, [r7, #24]
 800807c:	e007      	b.n	800808e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	3301      	adds	r3, #1
 800808c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1cf      	bne.n	8008046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	2140      	movs	r1, #64	; 0x40
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f810 	bl	80080d6 <UART_WaitOnFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e006      	b.n	80080ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	e000      	b.n	80080ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
  }
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	4613      	mov	r3, r2
 80080e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080e6:	e02c      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d028      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <UART_WaitOnFlagUntilTimeout+0x30>
 80080f6:	f7fc ff77 	bl	8004fe8 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	429a      	cmp	r2, r3
 8008104:	d21d      	bcs.n	8008142 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008114:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e00f      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4013      	ands	r3, r2
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	429a      	cmp	r2, r3
 8008150:	bf0c      	ite	eq
 8008152:	2301      	moveq	r3, #1
 8008154:	2300      	movne	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	429a      	cmp	r2, r3
 800815e:	d0c3      	beq.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80081a6:	f023 030c 	bic.w	r3, r3, #12
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	68b9      	ldr	r1, [r7, #8]
 80081b0:	430b      	orrs	r3, r1
 80081b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <UART_SetConfig+0x114>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d103      	bne.n	80081dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081d4:	f7fe feba 	bl	8006f4c <HAL_RCC_GetPCLK2Freq>
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	e002      	b.n	80081e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081dc:	f7fe fea2 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 80081e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009a      	lsls	r2, r3, #2
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	4a22      	ldr	r2, [pc, #136]	; (8008284 <UART_SetConfig+0x118>)
 80081fa:	fba2 2303 	umull	r2, r3, r2, r3
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	0119      	lsls	r1, r3, #4
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009a      	lsls	r2, r3, #2
 800820c:	441a      	add	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	fbb2 f2f3 	udiv	r2, r2, r3
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <UART_SetConfig+0x118>)
 800821a:	fba3 0302 	umull	r0, r3, r3, r2
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	2064      	movs	r0, #100	; 0x64
 8008222:	fb00 f303 	mul.w	r3, r0, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	3332      	adds	r3, #50	; 0x32
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <UART_SetConfig+0x118>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008238:	4419      	add	r1, r3
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009a      	lsls	r2, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008250:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <UART_SetConfig+0x118>)
 8008252:	fba3 0302 	umull	r0, r3, r3, r2
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	2064      	movs	r0, #100	; 0x64
 800825a:	fb00 f303 	mul.w	r3, r0, r3
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	3332      	adds	r3, #50	; 0x32
 8008264:	4a07      	ldr	r2, [pc, #28]	; (8008284 <UART_SetConfig+0x118>)
 8008266:	fba2 2303 	umull	r2, r3, r2, r3
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	f003 020f 	and.w	r2, r3, #15
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	440a      	add	r2, r1
 8008276:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40013800 	.word	0x40013800
 8008284:	51eb851f 	.word	0x51eb851f

08008288 <__errno>:
 8008288:	4b01      	ldr	r3, [pc, #4]	; (8008290 <__errno+0x8>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000088 	.word	0x20000088

08008294 <__libc_init_array>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	2600      	movs	r6, #0
 8008298:	4d0c      	ldr	r5, [pc, #48]	; (80082cc <__libc_init_array+0x38>)
 800829a:	4c0d      	ldr	r4, [pc, #52]	; (80082d0 <__libc_init_array+0x3c>)
 800829c:	1b64      	subs	r4, r4, r5
 800829e:	10a4      	asrs	r4, r4, #2
 80082a0:	42a6      	cmp	r6, r4
 80082a2:	d109      	bne.n	80082b8 <__libc_init_array+0x24>
 80082a4:	f000 ff06 	bl	80090b4 <_init>
 80082a8:	2600      	movs	r6, #0
 80082aa:	4d0a      	ldr	r5, [pc, #40]	; (80082d4 <__libc_init_array+0x40>)
 80082ac:	4c0a      	ldr	r4, [pc, #40]	; (80082d8 <__libc_init_array+0x44>)
 80082ae:	1b64      	subs	r4, r4, r5
 80082b0:	10a4      	asrs	r4, r4, #2
 80082b2:	42a6      	cmp	r6, r4
 80082b4:	d105      	bne.n	80082c2 <__libc_init_array+0x2e>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082bc:	4798      	blx	r3
 80082be:	3601      	adds	r6, #1
 80082c0:	e7ee      	b.n	80082a0 <__libc_init_array+0xc>
 80082c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c6:	4798      	blx	r3
 80082c8:	3601      	adds	r6, #1
 80082ca:	e7f2      	b.n	80082b2 <__libc_init_array+0x1e>
 80082cc:	08009188 	.word	0x08009188
 80082d0:	08009188 	.word	0x08009188
 80082d4:	08009188 	.word	0x08009188
 80082d8:	0800918c 	.word	0x0800918c

080082dc <memset>:
 80082dc:	4603      	mov	r3, r0
 80082de:	4402      	add	r2, r0
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d100      	bne.n	80082e6 <memset+0xa>
 80082e4:	4770      	bx	lr
 80082e6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ea:	e7f9      	b.n	80082e0 <memset+0x4>

080082ec <pow>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	4614      	mov	r4, r2
 80082f2:	461d      	mov	r5, r3
 80082f4:	4680      	mov	r8, r0
 80082f6:	4689      	mov	r9, r1
 80082f8:	f000 f862 	bl	80083c0 <__ieee754_pow>
 80082fc:	4622      	mov	r2, r4
 80082fe:	4606      	mov	r6, r0
 8008300:	460f      	mov	r7, r1
 8008302:	462b      	mov	r3, r5
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 fb80 	bl	8000a0c <__aeabi_dcmpun>
 800830c:	bbc8      	cbnz	r0, 8008382 <pow+0x96>
 800830e:	2200      	movs	r2, #0
 8008310:	2300      	movs	r3, #0
 8008312:	4640      	mov	r0, r8
 8008314:	4649      	mov	r1, r9
 8008316:	f7f8 fb47 	bl	80009a8 <__aeabi_dcmpeq>
 800831a:	b1b8      	cbz	r0, 800834c <pow+0x60>
 800831c:	2200      	movs	r2, #0
 800831e:	2300      	movs	r3, #0
 8008320:	4620      	mov	r0, r4
 8008322:	4629      	mov	r1, r5
 8008324:	f7f8 fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8008328:	2800      	cmp	r0, #0
 800832a:	d141      	bne.n	80083b0 <pow+0xc4>
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	f000 fe3b 	bl	8008faa <finite>
 8008334:	b328      	cbz	r0, 8008382 <pow+0x96>
 8008336:	2200      	movs	r2, #0
 8008338:	2300      	movs	r3, #0
 800833a:	4620      	mov	r0, r4
 800833c:	4629      	mov	r1, r5
 800833e:	f7f8 fb3d 	bl	80009bc <__aeabi_dcmplt>
 8008342:	b1f0      	cbz	r0, 8008382 <pow+0x96>
 8008344:	f7ff ffa0 	bl	8008288 <__errno>
 8008348:	2322      	movs	r3, #34	; 0x22
 800834a:	e019      	b.n	8008380 <pow+0x94>
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f000 fe2b 	bl	8008faa <finite>
 8008354:	b9c8      	cbnz	r0, 800838a <pow+0x9e>
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	f000 fe26 	bl	8008faa <finite>
 800835e:	b1a0      	cbz	r0, 800838a <pow+0x9e>
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	f000 fe21 	bl	8008faa <finite>
 8008368:	b178      	cbz	r0, 800838a <pow+0x9e>
 800836a:	4632      	mov	r2, r6
 800836c:	463b      	mov	r3, r7
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 fb4b 	bl	8000a0c <__aeabi_dcmpun>
 8008376:	2800      	cmp	r0, #0
 8008378:	d0e4      	beq.n	8008344 <pow+0x58>
 800837a:	f7ff ff85 	bl	8008288 <__errno>
 800837e:	2321      	movs	r3, #33	; 0x21
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	4630      	mov	r0, r6
 8008384:	4639      	mov	r1, r7
 8008386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838a:	2200      	movs	r2, #0
 800838c:	2300      	movs	r3, #0
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f8 fb09 	bl	80009a8 <__aeabi_dcmpeq>
 8008396:	2800      	cmp	r0, #0
 8008398:	d0f3      	beq.n	8008382 <pow+0x96>
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f000 fe04 	bl	8008faa <finite>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0ed      	beq.n	8008382 <pow+0x96>
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f000 fdfe 	bl	8008faa <finite>
 80083ae:	e7c8      	b.n	8008342 <pow+0x56>
 80083b0:	2600      	movs	r6, #0
 80083b2:	4f01      	ldr	r7, [pc, #4]	; (80083b8 <pow+0xcc>)
 80083b4:	e7e5      	b.n	8008382 <pow+0x96>
 80083b6:	bf00      	nop
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	00000000 	.word	0x00000000

080083c0 <__ieee754_pow>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	b093      	sub	sp, #76	; 0x4c
 80083c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083ca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80083ce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80083d2:	4689      	mov	r9, r1
 80083d4:	ea56 0102 	orrs.w	r1, r6, r2
 80083d8:	4680      	mov	r8, r0
 80083da:	d111      	bne.n	8008400 <__ieee754_pow+0x40>
 80083dc:	1803      	adds	r3, r0, r0
 80083de:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80083e2:	4152      	adcs	r2, r2
 80083e4:	4299      	cmp	r1, r3
 80083e6:	4b82      	ldr	r3, [pc, #520]	; (80085f0 <__ieee754_pow+0x230>)
 80083e8:	4193      	sbcs	r3, r2
 80083ea:	f080 84b9 	bcs.w	8008d60 <__ieee754_pow+0x9a0>
 80083ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083f2:	4640      	mov	r0, r8
 80083f4:	4649      	mov	r1, r9
 80083f6:	f7f7 feb9 	bl	800016c <__adddf3>
 80083fa:	4683      	mov	fp, r0
 80083fc:	468c      	mov	ip, r1
 80083fe:	e06f      	b.n	80084e0 <__ieee754_pow+0x120>
 8008400:	4b7c      	ldr	r3, [pc, #496]	; (80085f4 <__ieee754_pow+0x234>)
 8008402:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008406:	429c      	cmp	r4, r3
 8008408:	464d      	mov	r5, r9
 800840a:	4682      	mov	sl, r0
 800840c:	dc06      	bgt.n	800841c <__ieee754_pow+0x5c>
 800840e:	d101      	bne.n	8008414 <__ieee754_pow+0x54>
 8008410:	2800      	cmp	r0, #0
 8008412:	d1ec      	bne.n	80083ee <__ieee754_pow+0x2e>
 8008414:	429e      	cmp	r6, r3
 8008416:	dc01      	bgt.n	800841c <__ieee754_pow+0x5c>
 8008418:	d10f      	bne.n	800843a <__ieee754_pow+0x7a>
 800841a:	b172      	cbz	r2, 800843a <__ieee754_pow+0x7a>
 800841c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008420:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008424:	ea55 050a 	orrs.w	r5, r5, sl
 8008428:	d1e1      	bne.n	80083ee <__ieee754_pow+0x2e>
 800842a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800842e:	18db      	adds	r3, r3, r3
 8008430:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008434:	4152      	adcs	r2, r2
 8008436:	429d      	cmp	r5, r3
 8008438:	e7d5      	b.n	80083e6 <__ieee754_pow+0x26>
 800843a:	2d00      	cmp	r5, #0
 800843c:	da39      	bge.n	80084b2 <__ieee754_pow+0xf2>
 800843e:	4b6e      	ldr	r3, [pc, #440]	; (80085f8 <__ieee754_pow+0x238>)
 8008440:	429e      	cmp	r6, r3
 8008442:	dc52      	bgt.n	80084ea <__ieee754_pow+0x12a>
 8008444:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008448:	429e      	cmp	r6, r3
 800844a:	f340 849c 	ble.w	8008d86 <__ieee754_pow+0x9c6>
 800844e:	1533      	asrs	r3, r6, #20
 8008450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008454:	2b14      	cmp	r3, #20
 8008456:	dd0f      	ble.n	8008478 <__ieee754_pow+0xb8>
 8008458:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800845c:	fa22 f103 	lsr.w	r1, r2, r3
 8008460:	fa01 f303 	lsl.w	r3, r1, r3
 8008464:	4293      	cmp	r3, r2
 8008466:	f040 848e 	bne.w	8008d86 <__ieee754_pow+0x9c6>
 800846a:	f001 0101 	and.w	r1, r1, #1
 800846e:	f1c1 0302 	rsb	r3, r1, #2
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	b182      	cbz	r2, 8008498 <__ieee754_pow+0xd8>
 8008476:	e05d      	b.n	8008534 <__ieee754_pow+0x174>
 8008478:	2a00      	cmp	r2, #0
 800847a:	d159      	bne.n	8008530 <__ieee754_pow+0x170>
 800847c:	f1c3 0314 	rsb	r3, r3, #20
 8008480:	fa46 f103 	asr.w	r1, r6, r3
 8008484:	fa01 f303 	lsl.w	r3, r1, r3
 8008488:	42b3      	cmp	r3, r6
 800848a:	f040 8479 	bne.w	8008d80 <__ieee754_pow+0x9c0>
 800848e:	f001 0101 	and.w	r1, r1, #1
 8008492:	f1c1 0302 	rsb	r3, r1, #2
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	4b58      	ldr	r3, [pc, #352]	; (80085fc <__ieee754_pow+0x23c>)
 800849a:	429e      	cmp	r6, r3
 800849c:	d132      	bne.n	8008504 <__ieee754_pow+0x144>
 800849e:	2f00      	cmp	r7, #0
 80084a0:	f280 846a 	bge.w	8008d78 <__ieee754_pow+0x9b8>
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	2000      	movs	r0, #0
 80084aa:	4954      	ldr	r1, [pc, #336]	; (80085fc <__ieee754_pow+0x23c>)
 80084ac:	f7f8 f93e 	bl	800072c <__aeabi_ddiv>
 80084b0:	e7a3      	b.n	80083fa <__ieee754_pow+0x3a>
 80084b2:	2300      	movs	r3, #0
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	d13c      	bne.n	8008534 <__ieee754_pow+0x174>
 80084ba:	4b4e      	ldr	r3, [pc, #312]	; (80085f4 <__ieee754_pow+0x234>)
 80084bc:	429e      	cmp	r6, r3
 80084be:	d1eb      	bne.n	8008498 <__ieee754_pow+0xd8>
 80084c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80084c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80084c8:	ea53 030a 	orrs.w	r3, r3, sl
 80084cc:	f000 8448 	beq.w	8008d60 <__ieee754_pow+0x9a0>
 80084d0:	4b4b      	ldr	r3, [pc, #300]	; (8008600 <__ieee754_pow+0x240>)
 80084d2:	429c      	cmp	r4, r3
 80084d4:	dd0b      	ble.n	80084ee <__ieee754_pow+0x12e>
 80084d6:	2f00      	cmp	r7, #0
 80084d8:	f2c0 8448 	blt.w	8008d6c <__ieee754_pow+0x9ac>
 80084dc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80084e0:	4658      	mov	r0, fp
 80084e2:	4661      	mov	r1, ip
 80084e4:	b013      	add	sp, #76	; 0x4c
 80084e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ea:	2302      	movs	r3, #2
 80084ec:	e7e2      	b.n	80084b4 <__ieee754_pow+0xf4>
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	f04f 0b00 	mov.w	fp, #0
 80084f4:	f04f 0c00 	mov.w	ip, #0
 80084f8:	daf2      	bge.n	80084e0 <__ieee754_pow+0x120>
 80084fa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80084fe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008502:	e7ed      	b.n	80084e0 <__ieee754_pow+0x120>
 8008504:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008508:	d106      	bne.n	8008518 <__ieee754_pow+0x158>
 800850a:	4642      	mov	r2, r8
 800850c:	464b      	mov	r3, r9
 800850e:	4640      	mov	r0, r8
 8008510:	4649      	mov	r1, r9
 8008512:	f7f7 ffe1 	bl	80004d8 <__aeabi_dmul>
 8008516:	e770      	b.n	80083fa <__ieee754_pow+0x3a>
 8008518:	4b3a      	ldr	r3, [pc, #232]	; (8008604 <__ieee754_pow+0x244>)
 800851a:	429f      	cmp	r7, r3
 800851c:	d10a      	bne.n	8008534 <__ieee754_pow+0x174>
 800851e:	2d00      	cmp	r5, #0
 8008520:	db08      	blt.n	8008534 <__ieee754_pow+0x174>
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	b013      	add	sp, #76	; 0x4c
 8008528:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	f000 bc5e 	b.w	8008dec <__ieee754_sqrt>
 8008530:	2300      	movs	r3, #0
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	4640      	mov	r0, r8
 8008536:	4649      	mov	r1, r9
 8008538:	f000 fd34 	bl	8008fa4 <fabs>
 800853c:	4683      	mov	fp, r0
 800853e:	468c      	mov	ip, r1
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	d128      	bne.n	8008598 <__ieee754_pow+0x1d8>
 8008546:	b124      	cbz	r4, 8008552 <__ieee754_pow+0x192>
 8008548:	4b2c      	ldr	r3, [pc, #176]	; (80085fc <__ieee754_pow+0x23c>)
 800854a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800854e:	429a      	cmp	r2, r3
 8008550:	d122      	bne.n	8008598 <__ieee754_pow+0x1d8>
 8008552:	2f00      	cmp	r7, #0
 8008554:	da07      	bge.n	8008566 <__ieee754_pow+0x1a6>
 8008556:	465a      	mov	r2, fp
 8008558:	4663      	mov	r3, ip
 800855a:	2000      	movs	r0, #0
 800855c:	4927      	ldr	r1, [pc, #156]	; (80085fc <__ieee754_pow+0x23c>)
 800855e:	f7f8 f8e5 	bl	800072c <__aeabi_ddiv>
 8008562:	4683      	mov	fp, r0
 8008564:	468c      	mov	ip, r1
 8008566:	2d00      	cmp	r5, #0
 8008568:	daba      	bge.n	80084e0 <__ieee754_pow+0x120>
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008570:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008574:	4323      	orrs	r3, r4
 8008576:	d108      	bne.n	800858a <__ieee754_pow+0x1ca>
 8008578:	465a      	mov	r2, fp
 800857a:	4663      	mov	r3, ip
 800857c:	4658      	mov	r0, fp
 800857e:	4661      	mov	r1, ip
 8008580:	f7f7 fdf2 	bl	8000168 <__aeabi_dsub>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	e790      	b.n	80084ac <__ieee754_pow+0xec>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d1a7      	bne.n	80084e0 <__ieee754_pow+0x120>
 8008590:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008594:	469c      	mov	ip, r3
 8008596:	e7a3      	b.n	80084e0 <__ieee754_pow+0x120>
 8008598:	0feb      	lsrs	r3, r5, #31
 800859a:	3b01      	subs	r3, #1
 800859c:	930c      	str	r3, [sp, #48]	; 0x30
 800859e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d104      	bne.n	80085b0 <__ieee754_pow+0x1f0>
 80085a6:	4642      	mov	r2, r8
 80085a8:	464b      	mov	r3, r9
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	e7e7      	b.n	8008580 <__ieee754_pow+0x1c0>
 80085b0:	4b15      	ldr	r3, [pc, #84]	; (8008608 <__ieee754_pow+0x248>)
 80085b2:	429e      	cmp	r6, r3
 80085b4:	f340 80f6 	ble.w	80087a4 <__ieee754_pow+0x3e4>
 80085b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80085bc:	429e      	cmp	r6, r3
 80085be:	4b10      	ldr	r3, [pc, #64]	; (8008600 <__ieee754_pow+0x240>)
 80085c0:	dd09      	ble.n	80085d6 <__ieee754_pow+0x216>
 80085c2:	429c      	cmp	r4, r3
 80085c4:	dc0c      	bgt.n	80085e0 <__ieee754_pow+0x220>
 80085c6:	2f00      	cmp	r7, #0
 80085c8:	da0c      	bge.n	80085e4 <__ieee754_pow+0x224>
 80085ca:	2000      	movs	r0, #0
 80085cc:	b013      	add	sp, #76	; 0x4c
 80085ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d2:	f000 bce2 	b.w	8008f9a <__math_oflow>
 80085d6:	429c      	cmp	r4, r3
 80085d8:	dbf5      	blt.n	80085c6 <__ieee754_pow+0x206>
 80085da:	4b08      	ldr	r3, [pc, #32]	; (80085fc <__ieee754_pow+0x23c>)
 80085dc:	429c      	cmp	r4, r3
 80085de:	dd15      	ble.n	800860c <__ieee754_pow+0x24c>
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	dcf2      	bgt.n	80085ca <__ieee754_pow+0x20a>
 80085e4:	2000      	movs	r0, #0
 80085e6:	b013      	add	sp, #76	; 0x4c
 80085e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	f000 bcd0 	b.w	8008f90 <__math_uflow>
 80085f0:	fff00000 	.word	0xfff00000
 80085f4:	7ff00000 	.word	0x7ff00000
 80085f8:	433fffff 	.word	0x433fffff
 80085fc:	3ff00000 	.word	0x3ff00000
 8008600:	3fefffff 	.word	0x3fefffff
 8008604:	3fe00000 	.word	0x3fe00000
 8008608:	41e00000 	.word	0x41e00000
 800860c:	4661      	mov	r1, ip
 800860e:	2200      	movs	r2, #0
 8008610:	4658      	mov	r0, fp
 8008612:	4b5f      	ldr	r3, [pc, #380]	; (8008790 <__ieee754_pow+0x3d0>)
 8008614:	f7f7 fda8 	bl	8000168 <__aeabi_dsub>
 8008618:	a355      	add	r3, pc, #340	; (adr r3, 8008770 <__ieee754_pow+0x3b0>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	4604      	mov	r4, r0
 8008620:	460d      	mov	r5, r1
 8008622:	f7f7 ff59 	bl	80004d8 <__aeabi_dmul>
 8008626:	a354      	add	r3, pc, #336	; (adr r3, 8008778 <__ieee754_pow+0x3b8>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	4620      	mov	r0, r4
 8008632:	4629      	mov	r1, r5
 8008634:	f7f7 ff50 	bl	80004d8 <__aeabi_dmul>
 8008638:	2200      	movs	r2, #0
 800863a:	4682      	mov	sl, r0
 800863c:	468b      	mov	fp, r1
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	4b54      	ldr	r3, [pc, #336]	; (8008794 <__ieee754_pow+0x3d4>)
 8008644:	f7f7 ff48 	bl	80004d8 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	a14c      	add	r1, pc, #304	; (adr r1, 8008780 <__ieee754_pow+0x3c0>)
 800864e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008652:	f7f7 fd89 	bl	8000168 <__aeabi_dsub>
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	f7f7 ff3d 	bl	80004d8 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	2000      	movs	r0, #0
 8008664:	494c      	ldr	r1, [pc, #304]	; (8008798 <__ieee754_pow+0x3d8>)
 8008666:	f7f7 fd7f 	bl	8000168 <__aeabi_dsub>
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 ff2f 	bl	80004d8 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	f7f7 ff29 	bl	80004d8 <__aeabi_dmul>
 8008686:	a340      	add	r3, pc, #256	; (adr r3, 8008788 <__ieee754_pow+0x3c8>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f7f7 ff24 	bl	80004d8 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4650      	mov	r0, sl
 8008696:	4659      	mov	r1, fp
 8008698:	f7f7 fd66 	bl	8000168 <__aeabi_dsub>
 800869c:	f04f 0a00 	mov.w	sl, #0
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4604      	mov	r4, r0
 80086a6:	460d      	mov	r5, r1
 80086a8:	4630      	mov	r0, r6
 80086aa:	4639      	mov	r1, r7
 80086ac:	f7f7 fd5e 	bl	800016c <__adddf3>
 80086b0:	4632      	mov	r2, r6
 80086b2:	463b      	mov	r3, r7
 80086b4:	4650      	mov	r0, sl
 80086b6:	468b      	mov	fp, r1
 80086b8:	f7f7 fd56 	bl	8000168 <__aeabi_dsub>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4620      	mov	r0, r4
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7f7 fd50 	bl	8000168 <__aeabi_dsub>
 80086c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d0:	3b01      	subs	r3, #1
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f04f 0600 	mov.w	r6, #0
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	bf0c      	ite	eq
 80086de:	4b2f      	ldreq	r3, [pc, #188]	; (800879c <__ieee754_pow+0x3dc>)
 80086e0:	4b2b      	ldrne	r3, [pc, #172]	; (8008790 <__ieee754_pow+0x3d0>)
 80086e2:	4604      	mov	r4, r0
 80086e4:	460d      	mov	r5, r1
 80086e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ea:	e9cd 2300 	strd	r2, r3, [sp]
 80086ee:	4632      	mov	r2, r6
 80086f0:	463b      	mov	r3, r7
 80086f2:	f7f7 fd39 	bl	8000168 <__aeabi_dsub>
 80086f6:	4652      	mov	r2, sl
 80086f8:	465b      	mov	r3, fp
 80086fa:	f7f7 feed 	bl	80004d8 <__aeabi_dmul>
 80086fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008702:	4680      	mov	r8, r0
 8008704:	4689      	mov	r9, r1
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f7 fee5 	bl	80004d8 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fd29 	bl	800016c <__adddf3>
 800871a:	4632      	mov	r2, r6
 800871c:	463b      	mov	r3, r7
 800871e:	4680      	mov	r8, r0
 8008720:	4689      	mov	r9, r1
 8008722:	4650      	mov	r0, sl
 8008724:	4659      	mov	r1, fp
 8008726:	f7f7 fed7 	bl	80004d8 <__aeabi_dmul>
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	460b      	mov	r3, r1
 8008730:	4602      	mov	r2, r0
 8008732:	4649      	mov	r1, r9
 8008734:	4640      	mov	r0, r8
 8008736:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800873a:	f7f7 fd17 	bl	800016c <__adddf3>
 800873e:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <__ieee754_pow+0x3e0>)
 8008740:	4682      	mov	sl, r0
 8008742:	4299      	cmp	r1, r3
 8008744:	460f      	mov	r7, r1
 8008746:	460e      	mov	r6, r1
 8008748:	f340 82e5 	ble.w	8008d16 <__ieee754_pow+0x956>
 800874c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008750:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008754:	4303      	orrs	r3, r0
 8008756:	f000 81df 	beq.w	8008b18 <__ieee754_pow+0x758>
 800875a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800875e:	2200      	movs	r2, #0
 8008760:	2300      	movs	r3, #0
 8008762:	f7f8 f92b 	bl	80009bc <__aeabi_dcmplt>
 8008766:	3800      	subs	r0, #0
 8008768:	bf18      	it	ne
 800876a:	2001      	movne	r0, #1
 800876c:	e72e      	b.n	80085cc <__ieee754_pow+0x20c>
 800876e:	bf00      	nop
 8008770:	60000000 	.word	0x60000000
 8008774:	3ff71547 	.word	0x3ff71547
 8008778:	f85ddf44 	.word	0xf85ddf44
 800877c:	3e54ae0b 	.word	0x3e54ae0b
 8008780:	55555555 	.word	0x55555555
 8008784:	3fd55555 	.word	0x3fd55555
 8008788:	652b82fe 	.word	0x652b82fe
 800878c:	3ff71547 	.word	0x3ff71547
 8008790:	3ff00000 	.word	0x3ff00000
 8008794:	3fd00000 	.word	0x3fd00000
 8008798:	3fe00000 	.word	0x3fe00000
 800879c:	bff00000 	.word	0xbff00000
 80087a0:	408fffff 	.word	0x408fffff
 80087a4:	4bd2      	ldr	r3, [pc, #840]	; (8008af0 <__ieee754_pow+0x730>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	402b      	ands	r3, r5
 80087aa:	b943      	cbnz	r3, 80087be <__ieee754_pow+0x3fe>
 80087ac:	4658      	mov	r0, fp
 80087ae:	4661      	mov	r1, ip
 80087b0:	4bd0      	ldr	r3, [pc, #832]	; (8008af4 <__ieee754_pow+0x734>)
 80087b2:	f7f7 fe91 	bl	80004d8 <__aeabi_dmul>
 80087b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80087ba:	4683      	mov	fp, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	1523      	asrs	r3, r4, #20
 80087c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80087c4:	4413      	add	r3, r2
 80087c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087c8:	4bcb      	ldr	r3, [pc, #812]	; (8008af8 <__ieee754_pow+0x738>)
 80087ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80087ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80087d2:	429c      	cmp	r4, r3
 80087d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80087d8:	dd08      	ble.n	80087ec <__ieee754_pow+0x42c>
 80087da:	4bc8      	ldr	r3, [pc, #800]	; (8008afc <__ieee754_pow+0x73c>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	f340 8199 	ble.w	8008b14 <__ieee754_pow+0x754>
 80087e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80087e8:	3301      	adds	r3, #1
 80087ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ec:	2600      	movs	r6, #0
 80087ee:	00f3      	lsls	r3, r6, #3
 80087f0:	930d      	str	r3, [sp, #52]	; 0x34
 80087f2:	4bc3      	ldr	r3, [pc, #780]	; (8008b00 <__ieee754_pow+0x740>)
 80087f4:	4658      	mov	r0, fp
 80087f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087fe:	4629      	mov	r1, r5
 8008800:	461a      	mov	r2, r3
 8008802:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008806:	4623      	mov	r3, r4
 8008808:	f7f7 fcae 	bl	8000168 <__aeabi_dsub>
 800880c:	46da      	mov	sl, fp
 800880e:	462b      	mov	r3, r5
 8008810:	4652      	mov	r2, sl
 8008812:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800881a:	f7f7 fca7 	bl	800016c <__adddf3>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	2000      	movs	r0, #0
 8008824:	49b7      	ldr	r1, [pc, #732]	; (8008b04 <__ieee754_pow+0x744>)
 8008826:	f7f7 ff81 	bl	800072c <__aeabi_ddiv>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008832:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008836:	f7f7 fe4f 	bl	80004d8 <__aeabi_dmul>
 800883a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800883e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008842:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	46ab      	mov	fp, r5
 800884c:	106d      	asrs	r5, r5, #1
 800884e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008858:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800885c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	4614      	mov	r4, r2
 8008866:	461d      	mov	r5, r3
 8008868:	f7f7 fe36 	bl	80004d8 <__aeabi_dmul>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008874:	f7f7 fc78 	bl	8000168 <__aeabi_dsub>
 8008878:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
 8008880:	4620      	mov	r0, r4
 8008882:	4629      	mov	r1, r5
 8008884:	f7f7 fc70 	bl	8000168 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4650      	mov	r0, sl
 800888e:	4659      	mov	r1, fp
 8008890:	f7f7 fc6a 	bl	8000168 <__aeabi_dsub>
 8008894:	4642      	mov	r2, r8
 8008896:	464b      	mov	r3, r9
 8008898:	f7f7 fe1e 	bl	80004d8 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4630      	mov	r0, r6
 80088a2:	4639      	mov	r1, r7
 80088a4:	f7f7 fc60 	bl	8000168 <__aeabi_dsub>
 80088a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088ac:	f7f7 fe14 	bl	80004d8 <__aeabi_dmul>
 80088b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088b8:	4610      	mov	r0, r2
 80088ba:	4619      	mov	r1, r3
 80088bc:	f7f7 fe0c 	bl	80004d8 <__aeabi_dmul>
 80088c0:	a379      	add	r3, pc, #484	; (adr r3, 8008aa8 <__ieee754_pow+0x6e8>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	4604      	mov	r4, r0
 80088c8:	460d      	mov	r5, r1
 80088ca:	f7f7 fe05 	bl	80004d8 <__aeabi_dmul>
 80088ce:	a378      	add	r3, pc, #480	; (adr r3, 8008ab0 <__ieee754_pow+0x6f0>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 fc4a 	bl	800016c <__adddf3>
 80088d8:	4622      	mov	r2, r4
 80088da:	462b      	mov	r3, r5
 80088dc:	f7f7 fdfc 	bl	80004d8 <__aeabi_dmul>
 80088e0:	a375      	add	r3, pc, #468	; (adr r3, 8008ab8 <__ieee754_pow+0x6f8>)
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	f7f7 fc41 	bl	800016c <__adddf3>
 80088ea:	4622      	mov	r2, r4
 80088ec:	462b      	mov	r3, r5
 80088ee:	f7f7 fdf3 	bl	80004d8 <__aeabi_dmul>
 80088f2:	a373      	add	r3, pc, #460	; (adr r3, 8008ac0 <__ieee754_pow+0x700>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fc38 	bl	800016c <__adddf3>
 80088fc:	4622      	mov	r2, r4
 80088fe:	462b      	mov	r3, r5
 8008900:	f7f7 fdea 	bl	80004d8 <__aeabi_dmul>
 8008904:	a370      	add	r3, pc, #448	; (adr r3, 8008ac8 <__ieee754_pow+0x708>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f7 fc2f 	bl	800016c <__adddf3>
 800890e:	4622      	mov	r2, r4
 8008910:	462b      	mov	r3, r5
 8008912:	f7f7 fde1 	bl	80004d8 <__aeabi_dmul>
 8008916:	a36e      	add	r3, pc, #440	; (adr r3, 8008ad0 <__ieee754_pow+0x710>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fc26 	bl	800016c <__adddf3>
 8008920:	4622      	mov	r2, r4
 8008922:	4606      	mov	r6, r0
 8008924:	460f      	mov	r7, r1
 8008926:	462b      	mov	r3, r5
 8008928:	4620      	mov	r0, r4
 800892a:	4629      	mov	r1, r5
 800892c:	f7f7 fdd4 	bl	80004d8 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f7f7 fdce 	bl	80004d8 <__aeabi_dmul>
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008944:	4642      	mov	r2, r8
 8008946:	464b      	mov	r3, r9
 8008948:	f7f7 fc10 	bl	800016c <__adddf3>
 800894c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008950:	f7f7 fdc2 	bl	80004d8 <__aeabi_dmul>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fc08 	bl	800016c <__adddf3>
 800895c:	4642      	mov	r2, r8
 800895e:	4606      	mov	r6, r0
 8008960:	460f      	mov	r7, r1
 8008962:	464b      	mov	r3, r9
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f7 fdb6 	bl	80004d8 <__aeabi_dmul>
 800896c:	2200      	movs	r2, #0
 800896e:	4b66      	ldr	r3, [pc, #408]	; (8008b08 <__ieee754_pow+0x748>)
 8008970:	4682      	mov	sl, r0
 8008972:	468b      	mov	fp, r1
 8008974:	f7f7 fbfa 	bl	800016c <__adddf3>
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	f7f7 fbf6 	bl	800016c <__adddf3>
 8008980:	2400      	movs	r4, #0
 8008982:	460d      	mov	r5, r1
 8008984:	4622      	mov	r2, r4
 8008986:	460b      	mov	r3, r1
 8008988:	4640      	mov	r0, r8
 800898a:	4649      	mov	r1, r9
 800898c:	f7f7 fda4 	bl	80004d8 <__aeabi_dmul>
 8008990:	2200      	movs	r2, #0
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	4620      	mov	r0, r4
 8008998:	4629      	mov	r1, r5
 800899a:	4b5b      	ldr	r3, [pc, #364]	; (8008b08 <__ieee754_pow+0x748>)
 800899c:	f7f7 fbe4 	bl	8000168 <__aeabi_dsub>
 80089a0:	4652      	mov	r2, sl
 80089a2:	465b      	mov	r3, fp
 80089a4:	f7f7 fbe0 	bl	8000168 <__aeabi_dsub>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f7f7 fbda 	bl	8000168 <__aeabi_dsub>
 80089b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089b8:	f7f7 fd8e 	bl	80004d8 <__aeabi_dmul>
 80089bc:	4622      	mov	r2, r4
 80089be:	4606      	mov	r6, r0
 80089c0:	460f      	mov	r7, r1
 80089c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089c6:	462b      	mov	r3, r5
 80089c8:	f7f7 fd86 	bl	80004d8 <__aeabi_dmul>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f7 fbca 	bl	800016c <__adddf3>
 80089d8:	2400      	movs	r4, #0
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fbc1 	bl	800016c <__adddf3>
 80089ea:	a33b      	add	r3, pc, #236	; (adr r3, 8008ad8 <__ieee754_pow+0x718>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	4620      	mov	r0, r4
 80089f2:	460d      	mov	r5, r1
 80089f4:	f7f7 fd70 	bl	80004d8 <__aeabi_dmul>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a00:	4620      	mov	r0, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	f7f7 fbb0 	bl	8000168 <__aeabi_dsub>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	4639      	mov	r1, r7
 8008a10:	f7f7 fbaa 	bl	8000168 <__aeabi_dsub>
 8008a14:	a332      	add	r3, pc, #200	; (adr r3, 8008ae0 <__ieee754_pow+0x720>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 fd5d 	bl	80004d8 <__aeabi_dmul>
 8008a1e:	a332      	add	r3, pc, #200	; (adr r3, 8008ae8 <__ieee754_pow+0x728>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	4606      	mov	r6, r0
 8008a26:	460f      	mov	r7, r1
 8008a28:	4620      	mov	r0, r4
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	f7f7 fd54 	bl	80004d8 <__aeabi_dmul>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4630      	mov	r0, r6
 8008a36:	4639      	mov	r1, r7
 8008a38:	f7f7 fb98 	bl	800016c <__adddf3>
 8008a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a3e:	4b33      	ldr	r3, [pc, #204]	; (8008b0c <__ieee754_pow+0x74c>)
 8008a40:	f04f 0a00 	mov.w	sl, #0
 8008a44:	4413      	add	r3, r2
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fb8f 	bl	800016c <__adddf3>
 8008a4e:	4680      	mov	r8, r0
 8008a50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a52:	4689      	mov	r9, r1
 8008a54:	f7f7 fcd6 	bl	8000404 <__aeabi_i2d>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a5e:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <__ieee754_pow+0x750>)
 8008a60:	4413      	add	r3, r2
 8008a62:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008a66:	4642      	mov	r2, r8
 8008a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	f7f7 fb7d 	bl	800016c <__adddf3>
 8008a72:	4632      	mov	r2, r6
 8008a74:	463b      	mov	r3, r7
 8008a76:	f7f7 fb79 	bl	800016c <__adddf3>
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	f7f7 fb75 	bl	800016c <__adddf3>
 8008a82:	4622      	mov	r2, r4
 8008a84:	462b      	mov	r3, r5
 8008a86:	4650      	mov	r0, sl
 8008a88:	468b      	mov	fp, r1
 8008a8a:	f7f7 fb6d 	bl	8000168 <__aeabi_dsub>
 8008a8e:	4632      	mov	r2, r6
 8008a90:	463b      	mov	r3, r7
 8008a92:	f7f7 fb69 	bl	8000168 <__aeabi_dsub>
 8008a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a9a:	f7f7 fb65 	bl	8000168 <__aeabi_dsub>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	e60d      	b.n	80086c4 <__ieee754_pow+0x304>
 8008aa8:	4a454eef 	.word	0x4a454eef
 8008aac:	3fca7e28 	.word	0x3fca7e28
 8008ab0:	93c9db65 	.word	0x93c9db65
 8008ab4:	3fcd864a 	.word	0x3fcd864a
 8008ab8:	a91d4101 	.word	0xa91d4101
 8008abc:	3fd17460 	.word	0x3fd17460
 8008ac0:	518f264d 	.word	0x518f264d
 8008ac4:	3fd55555 	.word	0x3fd55555
 8008ac8:	db6fabff 	.word	0xdb6fabff
 8008acc:	3fdb6db6 	.word	0x3fdb6db6
 8008ad0:	33333303 	.word	0x33333303
 8008ad4:	3fe33333 	.word	0x3fe33333
 8008ad8:	e0000000 	.word	0xe0000000
 8008adc:	3feec709 	.word	0x3feec709
 8008ae0:	dc3a03fd 	.word	0xdc3a03fd
 8008ae4:	3feec709 	.word	0x3feec709
 8008ae8:	145b01f5 	.word	0x145b01f5
 8008aec:	be3e2fe0 	.word	0xbe3e2fe0
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	43400000 	.word	0x43400000
 8008af8:	0003988e 	.word	0x0003988e
 8008afc:	000bb679 	.word	0x000bb679
 8008b00:	08009158 	.word	0x08009158
 8008b04:	3ff00000 	.word	0x3ff00000
 8008b08:	40080000 	.word	0x40080000
 8008b0c:	08009178 	.word	0x08009178
 8008b10:	08009168 	.word	0x08009168
 8008b14:	2601      	movs	r6, #1
 8008b16:	e66a      	b.n	80087ee <__ieee754_pow+0x42e>
 8008b18:	a39d      	add	r3, pc, #628	; (adr r3, 8008d90 <__ieee754_pow+0x9d0>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	4640      	mov	r0, r8
 8008b20:	4649      	mov	r1, r9
 8008b22:	f7f7 fb23 	bl	800016c <__adddf3>
 8008b26:	4622      	mov	r2, r4
 8008b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	4650      	mov	r0, sl
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 fb19 	bl	8000168 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b3e:	f7f7 ff5b 	bl	80009f8 <__aeabi_dcmpgt>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f47f ae09 	bne.w	800875a <__ieee754_pow+0x39a>
 8008b48:	4aa3      	ldr	r2, [pc, #652]	; (8008dd8 <__ieee754_pow+0xa18>)
 8008b4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	f340 8101 	ble.w	8008d56 <__ieee754_pow+0x996>
 8008b54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008b58:	2000      	movs	r0, #0
 8008b5a:	151b      	asrs	r3, r3, #20
 8008b5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008b60:	fa4a f303 	asr.w	r3, sl, r3
 8008b64:	4433      	add	r3, r6
 8008b66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008b6a:	4f9c      	ldr	r7, [pc, #624]	; (8008ddc <__ieee754_pow+0xa1c>)
 8008b6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008b70:	4117      	asrs	r7, r2
 8008b72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008b76:	ea23 0107 	bic.w	r1, r3, r7
 8008b7a:	f1c2 0214 	rsb	r2, r2, #20
 8008b7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008b82:	460b      	mov	r3, r1
 8008b84:	fa4a fa02 	asr.w	sl, sl, r2
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	4620      	mov	r0, r4
 8008b90:	bfb8      	it	lt
 8008b92:	f1ca 0a00 	rsblt	sl, sl, #0
 8008b96:	f7f7 fae7 	bl	8000168 <__aeabi_dsub>
 8008b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba2:	2400      	movs	r4, #0
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	f7f7 fae0 	bl	800016c <__adddf3>
 8008bac:	a37a      	add	r3, pc, #488	; (adr r3, 8008d98 <__ieee754_pow+0x9d8>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	f7f7 fc8f 	bl	80004d8 <__aeabi_dmul>
 8008bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	460f      	mov	r7, r1
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7f7 facf 	bl	8000168 <__aeabi_dsub>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 fac9 	bl	8000168 <__aeabi_dsub>
 8008bd6:	a372      	add	r3, pc, #456	; (adr r3, 8008da0 <__ieee754_pow+0x9e0>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f7f7 fc7c 	bl	80004d8 <__aeabi_dmul>
 8008be0:	a371      	add	r3, pc, #452	; (adr r3, 8008da8 <__ieee754_pow+0x9e8>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	4680      	mov	r8, r0
 8008be8:	4689      	mov	r9, r1
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f7 fc73 	bl	80004d8 <__aeabi_dmul>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 fab7 	bl	800016c <__adddf3>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 faaf 	bl	800016c <__adddf3>
 8008c0e:	4632      	mov	r2, r6
 8008c10:	463b      	mov	r3, r7
 8008c12:	4680      	mov	r8, r0
 8008c14:	4689      	mov	r9, r1
 8008c16:	f7f7 faa7 	bl	8000168 <__aeabi_dsub>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 faa1 	bl	8000168 <__aeabi_dsub>
 8008c26:	4642      	mov	r2, r8
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f7 fc51 	bl	80004d8 <__aeabi_dmul>
 8008c36:	a35e      	add	r3, pc, #376	; (adr r3, 8008db0 <__ieee754_pow+0x9f0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	f7f7 fc4a 	bl	80004d8 <__aeabi_dmul>
 8008c44:	a35c      	add	r3, pc, #368	; (adr r3, 8008db8 <__ieee754_pow+0x9f8>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 fa8d 	bl	8000168 <__aeabi_dsub>
 8008c4e:	4622      	mov	r2, r4
 8008c50:	462b      	mov	r3, r5
 8008c52:	f7f7 fc41 	bl	80004d8 <__aeabi_dmul>
 8008c56:	a35a      	add	r3, pc, #360	; (adr r3, 8008dc0 <__ieee754_pow+0xa00>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f7f7 fa86 	bl	800016c <__adddf3>
 8008c60:	4622      	mov	r2, r4
 8008c62:	462b      	mov	r3, r5
 8008c64:	f7f7 fc38 	bl	80004d8 <__aeabi_dmul>
 8008c68:	a357      	add	r3, pc, #348	; (adr r3, 8008dc8 <__ieee754_pow+0xa08>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fa7b 	bl	8000168 <__aeabi_dsub>
 8008c72:	4622      	mov	r2, r4
 8008c74:	462b      	mov	r3, r5
 8008c76:	f7f7 fc2f 	bl	80004d8 <__aeabi_dmul>
 8008c7a:	a355      	add	r3, pc, #340	; (adr r3, 8008dd0 <__ieee754_pow+0xa10>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f7f7 fa74 	bl	800016c <__adddf3>
 8008c84:	4622      	mov	r2, r4
 8008c86:	462b      	mov	r3, r5
 8008c88:	f7f7 fc26 	bl	80004d8 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4640      	mov	r0, r8
 8008c92:	4649      	mov	r1, r9
 8008c94:	f7f7 fa68 	bl	8000168 <__aeabi_dsub>
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fc18 	bl	80004d8 <__aeabi_dmul>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	f7f7 fa57 	bl	8000168 <__aeabi_dsub>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc2:	f7f7 fd33 	bl	800072c <__aeabi_ddiv>
 8008cc6:	4632      	mov	r2, r6
 8008cc8:	4604      	mov	r4, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	463b      	mov	r3, r7
 8008cce:	4640      	mov	r0, r8
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	f7f7 fc01 	bl	80004d8 <__aeabi_dmul>
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	463b      	mov	r3, r7
 8008cda:	f7f7 fa47 	bl	800016c <__adddf3>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 fa3f 	bl	8000168 <__aeabi_dsub>
 8008cea:	4642      	mov	r2, r8
 8008cec:	464b      	mov	r3, r9
 8008cee:	f7f7 fa3b 	bl	8000168 <__aeabi_dsub>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	4939      	ldr	r1, [pc, #228]	; (8008de0 <__ieee754_pow+0xa20>)
 8008cfa:	f7f7 fa35 	bl	8000168 <__aeabi_dsub>
 8008cfe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008d02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d06:	da29      	bge.n	8008d5c <__ieee754_pow+0x99c>
 8008d08:	4652      	mov	r2, sl
 8008d0a:	f000 f955 	bl	8008fb8 <scalbn>
 8008d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d12:	f7ff bbfe 	b.w	8008512 <__ieee754_pow+0x152>
 8008d16:	4b33      	ldr	r3, [pc, #204]	; (8008de4 <__ieee754_pow+0xa24>)
 8008d18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008d1c:	429f      	cmp	r7, r3
 8008d1e:	f77f af13 	ble.w	8008b48 <__ieee754_pow+0x788>
 8008d22:	4b31      	ldr	r3, [pc, #196]	; (8008de8 <__ieee754_pow+0xa28>)
 8008d24:	440b      	add	r3, r1
 8008d26:	4303      	orrs	r3, r0
 8008d28:	d009      	beq.n	8008d3e <__ieee754_pow+0x97e>
 8008d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	f7f7 fe43 	bl	80009bc <__aeabi_dcmplt>
 8008d36:	3800      	subs	r0, #0
 8008d38:	bf18      	it	ne
 8008d3a:	2001      	movne	r0, #1
 8008d3c:	e453      	b.n	80085e6 <__ieee754_pow+0x226>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	462b      	mov	r3, r5
 8008d42:	f7f7 fa11 	bl	8000168 <__aeabi_dsub>
 8008d46:	4642      	mov	r2, r8
 8008d48:	464b      	mov	r3, r9
 8008d4a:	f7f7 fe4b 	bl	80009e4 <__aeabi_dcmpge>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f aefa 	beq.w	8008b48 <__ieee754_pow+0x788>
 8008d54:	e7e9      	b.n	8008d2a <__ieee754_pow+0x96a>
 8008d56:	f04f 0a00 	mov.w	sl, #0
 8008d5a:	e720      	b.n	8008b9e <__ieee754_pow+0x7de>
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	e7d6      	b.n	8008d0e <__ieee754_pow+0x94e>
 8008d60:	f04f 0b00 	mov.w	fp, #0
 8008d64:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008de0 <__ieee754_pow+0xa20>
 8008d68:	f7ff bbba 	b.w	80084e0 <__ieee754_pow+0x120>
 8008d6c:	f04f 0b00 	mov.w	fp, #0
 8008d70:	f04f 0c00 	mov.w	ip, #0
 8008d74:	f7ff bbb4 	b.w	80084e0 <__ieee754_pow+0x120>
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7ff bb3d 	b.w	80083fa <__ieee754_pow+0x3a>
 8008d80:	9200      	str	r2, [sp, #0]
 8008d82:	f7ff bb89 	b.w	8008498 <__ieee754_pow+0xd8>
 8008d86:	2300      	movs	r3, #0
 8008d88:	f7ff bb73 	b.w	8008472 <__ieee754_pow+0xb2>
 8008d8c:	f3af 8000 	nop.w
 8008d90:	652b82fe 	.word	0x652b82fe
 8008d94:	3c971547 	.word	0x3c971547
 8008d98:	00000000 	.word	0x00000000
 8008d9c:	3fe62e43 	.word	0x3fe62e43
 8008da0:	fefa39ef 	.word	0xfefa39ef
 8008da4:	3fe62e42 	.word	0x3fe62e42
 8008da8:	0ca86c39 	.word	0x0ca86c39
 8008dac:	be205c61 	.word	0xbe205c61
 8008db0:	72bea4d0 	.word	0x72bea4d0
 8008db4:	3e663769 	.word	0x3e663769
 8008db8:	c5d26bf1 	.word	0xc5d26bf1
 8008dbc:	3ebbbd41 	.word	0x3ebbbd41
 8008dc0:	af25de2c 	.word	0xaf25de2c
 8008dc4:	3f11566a 	.word	0x3f11566a
 8008dc8:	16bebd93 	.word	0x16bebd93
 8008dcc:	3f66c16c 	.word	0x3f66c16c
 8008dd0:	5555553e 	.word	0x5555553e
 8008dd4:	3fc55555 	.word	0x3fc55555
 8008dd8:	3fe00000 	.word	0x3fe00000
 8008ddc:	000fffff 	.word	0x000fffff
 8008de0:	3ff00000 	.word	0x3ff00000
 8008de4:	4090cbff 	.word	0x4090cbff
 8008de8:	3f6f3400 	.word	0x3f6f3400

08008dec <__ieee754_sqrt>:
 8008dec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008f48 <__ieee754_sqrt+0x15c>
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	ea3c 0c01 	bics.w	ip, ip, r1
 8008df8:	4606      	mov	r6, r0
 8008dfa:	460d      	mov	r5, r1
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	460a      	mov	r2, r1
 8008e00:	4607      	mov	r7, r0
 8008e02:	4603      	mov	r3, r0
 8008e04:	d10f      	bne.n	8008e26 <__ieee754_sqrt+0x3a>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	f7f7 fb65 	bl	80004d8 <__aeabi_dmul>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4630      	mov	r0, r6
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 f9a9 	bl	800016c <__adddf3>
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4629      	mov	r1, r5
 8008e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e26:	2900      	cmp	r1, #0
 8008e28:	dc0e      	bgt.n	8008e48 <__ieee754_sqrt+0x5c>
 8008e2a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008e2e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008e32:	d0f4      	beq.n	8008e1e <__ieee754_sqrt+0x32>
 8008e34:	b141      	cbz	r1, 8008e48 <__ieee754_sqrt+0x5c>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	f7f7 f995 	bl	8000168 <__aeabi_dsub>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	f7f7 fc73 	bl	800072c <__aeabi_ddiv>
 8008e46:	e7e8      	b.n	8008e1a <__ieee754_sqrt+0x2e>
 8008e48:	1521      	asrs	r1, r4, #20
 8008e4a:	d075      	beq.n	8008f38 <__ieee754_sqrt+0x14c>
 8008e4c:	07cc      	lsls	r4, r1, #31
 8008e4e:	f04f 0400 	mov.w	r4, #0
 8008e52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008e56:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008e5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e5e:	bf5e      	ittt	pl
 8008e60:	0fd9      	lsrpl	r1, r3, #31
 8008e62:	005b      	lslpl	r3, r3, #1
 8008e64:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008e68:	0fd9      	lsrs	r1, r3, #31
 8008e6a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008e6e:	2516      	movs	r5, #22
 8008e70:	4620      	mov	r0, r4
 8008e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e76:	107f      	asrs	r7, r7, #1
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	1846      	adds	r6, r0, r1
 8008e7c:	4296      	cmp	r6, r2
 8008e7e:	bfde      	ittt	le
 8008e80:	1b92      	suble	r2, r2, r6
 8008e82:	1870      	addle	r0, r6, r1
 8008e84:	1864      	addle	r4, r4, r1
 8008e86:	0052      	lsls	r2, r2, #1
 8008e88:	3d01      	subs	r5, #1
 8008e8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008e8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008e92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e96:	d1f0      	bne.n	8008e7a <__ieee754_sqrt+0x8e>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f04f 0e20 	mov.w	lr, #32
 8008e9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008ea2:	4282      	cmp	r2, r0
 8008ea4:	eb06 0c05 	add.w	ip, r6, r5
 8008ea8:	dc02      	bgt.n	8008eb0 <__ieee754_sqrt+0xc4>
 8008eaa:	d113      	bne.n	8008ed4 <__ieee754_sqrt+0xe8>
 8008eac:	459c      	cmp	ip, r3
 8008eae:	d811      	bhi.n	8008ed4 <__ieee754_sqrt+0xe8>
 8008eb0:	f1bc 0f00 	cmp.w	ip, #0
 8008eb4:	eb0c 0506 	add.w	r5, ip, r6
 8008eb8:	da43      	bge.n	8008f42 <__ieee754_sqrt+0x156>
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	db41      	blt.n	8008f42 <__ieee754_sqrt+0x156>
 8008ebe:	f100 0801 	add.w	r8, r0, #1
 8008ec2:	1a12      	subs	r2, r2, r0
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	459c      	cmp	ip, r3
 8008ec8:	bf88      	it	hi
 8008eca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008ece:	eba3 030c 	sub.w	r3, r3, ip
 8008ed2:	4431      	add	r1, r6
 8008ed4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008ed8:	f1be 0e01 	subs.w	lr, lr, #1
 8008edc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008ee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ee4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ee8:	d1db      	bne.n	8008ea2 <__ieee754_sqrt+0xb6>
 8008eea:	4313      	orrs	r3, r2
 8008eec:	d006      	beq.n	8008efc <__ieee754_sqrt+0x110>
 8008eee:	1c48      	adds	r0, r1, #1
 8008ef0:	bf0b      	itete	eq
 8008ef2:	4671      	moveq	r1, lr
 8008ef4:	3101      	addne	r1, #1
 8008ef6:	3401      	addeq	r4, #1
 8008ef8:	f021 0101 	bicne.w	r1, r1, #1
 8008efc:	1063      	asrs	r3, r4, #1
 8008efe:	0849      	lsrs	r1, r1, #1
 8008f00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008f04:	07e2      	lsls	r2, r4, #31
 8008f06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008f0a:	bf48      	it	mi
 8008f0c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008f10:	460e      	mov	r6, r1
 8008f12:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008f16:	e782      	b.n	8008e1e <__ieee754_sqrt+0x32>
 8008f18:	0ada      	lsrs	r2, r3, #11
 8008f1a:	3815      	subs	r0, #21
 8008f1c:	055b      	lsls	r3, r3, #21
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	d0fa      	beq.n	8008f18 <__ieee754_sqrt+0x12c>
 8008f22:	02d5      	lsls	r5, r2, #11
 8008f24:	d50a      	bpl.n	8008f3c <__ieee754_sqrt+0x150>
 8008f26:	f1c1 0420 	rsb	r4, r1, #32
 8008f2a:	fa23 f404 	lsr.w	r4, r3, r4
 8008f2e:	1e4d      	subs	r5, r1, #1
 8008f30:	408b      	lsls	r3, r1
 8008f32:	4322      	orrs	r2, r4
 8008f34:	1b41      	subs	r1, r0, r5
 8008f36:	e789      	b.n	8008e4c <__ieee754_sqrt+0x60>
 8008f38:	4608      	mov	r0, r1
 8008f3a:	e7f0      	b.n	8008f1e <__ieee754_sqrt+0x132>
 8008f3c:	0052      	lsls	r2, r2, #1
 8008f3e:	3101      	adds	r1, #1
 8008f40:	e7ef      	b.n	8008f22 <__ieee754_sqrt+0x136>
 8008f42:	4680      	mov	r8, r0
 8008f44:	e7bd      	b.n	8008ec2 <__ieee754_sqrt+0xd6>
 8008f46:	bf00      	nop
 8008f48:	7ff00000 	.word	0x7ff00000

08008f4c <with_errno>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	4616      	mov	r6, r2
 8008f54:	f7ff f998 	bl	8008288 <__errno>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	6006      	str	r6, [r0, #0]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}

08008f60 <xflow>:
 8008f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f62:	4615      	mov	r5, r2
 8008f64:	461c      	mov	r4, r3
 8008f66:	b180      	cbz	r0, 8008f8a <xflow+0x2a>
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8008f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f76:	4628      	mov	r0, r5
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f7f7 faad 	bl	80004d8 <__aeabi_dmul>
 8008f7e:	2222      	movs	r2, #34	; 0x22
 8008f80:	b003      	add	sp, #12
 8008f82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f86:	f7ff bfe1 	b.w	8008f4c <with_errno>
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	e7ee      	b.n	8008f6e <xflow+0xe>

08008f90 <__math_uflow>:
 8008f90:	2200      	movs	r2, #0
 8008f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f96:	f7ff bfe3 	b.w	8008f60 <xflow>

08008f9a <__math_oflow>:
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008fa0:	f7ff bfde 	b.w	8008f60 <xflow>

08008fa4 <fabs>:
 8008fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fa8:	4770      	bx	lr

08008faa <finite>:
 8008faa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008fae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008fb2:	0fc0      	lsrs	r0, r0, #31
 8008fb4:	4770      	bx	lr
	...

08008fb8 <scalbn>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	4617      	mov	r7, r2
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	b996      	cbnz	r6, 8008fee <scalbn+0x36>
 8008fc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008fcc:	4303      	orrs	r3, r0
 8008fce:	d039      	beq.n	8009044 <scalbn+0x8c>
 8008fd0:	4b33      	ldr	r3, [pc, #204]	; (80090a0 <scalbn+0xe8>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f7f7 fa80 	bl	80004d8 <__aeabi_dmul>
 8008fd8:	4b32      	ldr	r3, [pc, #200]	; (80090a4 <scalbn+0xec>)
 8008fda:	4604      	mov	r4, r0
 8008fdc:	429f      	cmp	r7, r3
 8008fde:	460d      	mov	r5, r1
 8008fe0:	da0f      	bge.n	8009002 <scalbn+0x4a>
 8008fe2:	a32b      	add	r3, pc, #172	; (adr r3, 8009090 <scalbn+0xd8>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 fa76 	bl	80004d8 <__aeabi_dmul>
 8008fec:	e006      	b.n	8008ffc <scalbn+0x44>
 8008fee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008ff2:	4296      	cmp	r6, r2
 8008ff4:	d10a      	bne.n	800900c <scalbn+0x54>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	f7f7 f8b8 	bl	800016c <__adddf3>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	460d      	mov	r5, r1
 8009000:	e020      	b.n	8009044 <scalbn+0x8c>
 8009002:	460b      	mov	r3, r1
 8009004:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009008:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800900c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009010:	19b9      	adds	r1, r7, r6
 8009012:	4291      	cmp	r1, r2
 8009014:	dd0e      	ble.n	8009034 <scalbn+0x7c>
 8009016:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800901a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800901e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009022:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009026:	4820      	ldr	r0, [pc, #128]	; (80090a8 <scalbn+0xf0>)
 8009028:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800902c:	a31a      	add	r3, pc, #104	; (adr r3, 8009098 <scalbn+0xe0>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	e7d9      	b.n	8008fe8 <scalbn+0x30>
 8009034:	2900      	cmp	r1, #0
 8009036:	dd08      	ble.n	800904a <scalbn+0x92>
 8009038:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800903c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009040:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800904a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800904e:	da12      	bge.n	8009076 <scalbn+0xbe>
 8009050:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009054:	429f      	cmp	r7, r3
 8009056:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800905a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800905e:	dcdc      	bgt.n	800901a <scalbn+0x62>
 8009060:	a30b      	add	r3, pc, #44	; (adr r3, 8009090 <scalbn+0xd8>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800906a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800906e:	480f      	ldr	r0, [pc, #60]	; (80090ac <scalbn+0xf4>)
 8009070:	f041 011f 	orr.w	r1, r1, #31
 8009074:	e7b8      	b.n	8008fe8 <scalbn+0x30>
 8009076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800907a:	3136      	adds	r1, #54	; 0x36
 800907c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009080:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	2200      	movs	r2, #0
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <scalbn+0xf8>)
 800908c:	e7ac      	b.n	8008fe8 <scalbn+0x30>
 800908e:	bf00      	nop
 8009090:	c2f8f359 	.word	0xc2f8f359
 8009094:	01a56e1f 	.word	0x01a56e1f
 8009098:	8800759c 	.word	0x8800759c
 800909c:	7e37e43c 	.word	0x7e37e43c
 80090a0:	43500000 	.word	0x43500000
 80090a4:	ffff3cb0 	.word	0xffff3cb0
 80090a8:	8800759c 	.word	0x8800759c
 80090ac:	c2f8f359 	.word	0xc2f8f359
 80090b0:	3c900000 	.word	0x3c900000

080090b4 <_init>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr

080090c0 <_fini>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr
